name: üîç PR Checks

on:
  pull_request:
    branches: [master, develop]

env:
  NODE_ENV: test
  CI: true

jobs:
  # Fast checks that can run in parallel
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci --legacy-peer-deps

      - name: üîç Lint code
        run: npm run lint:check

  type-check:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci --legacy-peer-deps

      - name: üèóÔ∏è Type check
        run: npm run type-check

  build:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci --legacy-peer-deps

      - name: üìã Build package
        run: npm run build

  # Test on latest Node.js version only (faster for PRs)
  test:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci --legacy-peer-deps

      - name: üß™ Run tests
        run: npm run test:silent

      - name: üìä Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-pr
          path: coverage/
          retention-days: 1

  # Coverage analysis for PRs
  coverage:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci --legacy-peer-deps

      - name: üìä Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports-pr
          path: coverage/

      - name: üìä Coverage summary
        run: |
          echo "üìä Coverage Summary for PR:"
          if [ -f "coverage/coverage-summary.json" ]; then
            node -e "
              const coverage = require('./coverage/coverage-summary.json');
              const total = coverage.total;
              console.log(\`Statements: \${total.statements.pct}%\`);
              console.log(\`Branches: \${total.branches.pct}%\`);
              console.log(\`Functions: \${total.functions.pct}%\`);
              console.log(\`Lines: \${total.lines.pct}%\`);
              
              // Check if coverage meets thresholds
              const thresholds = { statements: 12, branches: 5, functions: 5, lines: 10 };
              let failed = false;
              
              Object.entries(thresholds).forEach(([key, threshold]) => {
                const actual = total[key].pct;
                if (actual < threshold) {
                  console.log(\`‚ùå \${key}: \${actual}% < \${threshold}%\`);
                  failed = true;
                } else {
                  console.log(\`‚úÖ \${key}: \${actual}% >= \${threshold}%\`);
                }
              });
              
              if (failed) {
                process.exit(1);
              }
            "
          else
            echo "No coverage report found"
            exit 1
          fi

  # Final status check
  status:
    runs-on: ubuntu-latest
    needs: [lint, type-check, build, test, coverage]
    if: always()
    steps:
      - name: ‚úÖ Check all jobs completed
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && 
                "${{ needs.type-check.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.coverage.result }}" == "success" ]]; then
            echo "üéâ All PR checks passed!"
          else
            echo "‚ùå Some PR checks failed"
            exit 1
          fi 