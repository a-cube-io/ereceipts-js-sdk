name: üöÄ Unified CI/CD

on:
  pull_request:
    branches: [master, develop]
  push:
    branches: [develop, feature/*, master]

permissions:
  contents: read
  actions: write
  pull-requests: write
  packages: write
  id-token: write

env:
  NODE_ENV: test
  CI: true

jobs:
  # Determine workflow type and Node.js versions
  setup:
    runs-on: ubuntu-latest
    outputs:
      is-pr: ${{ github.event_name == 'pull_request' }}
      is-push-to-master: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
      node-versions: ${{ steps.set-versions.outputs.node-versions }}
      should-publish: ${{ steps.set-versions.outputs.should-publish }}
    steps:
      - name: üîß Setup workflow parameters
        id: set-versions
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "node-versions=[20]" >> $GITHUB_OUTPUT
            echo "should-publish=false" >> $GITHUB_OUTPUT
          else
            if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
              echo "node-versions=[18]" >> $GITHUB_OUTPUT
              echo "should-publish=true" >> $GITHUB_OUTPUT
            else
              echo "node-versions=[16,18,20]" >> $GITHUB_OUTPUT
              echo "should-publish=false" >> $GITHUB_OUTPUT
            fi
          fi

  # Fast checks for all workflows
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci --legacy-peer-deps

      - name: üîç Lint code
        run: npm run lint:check

  type-check:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci --legacy-peer-deps

      - name: üèóÔ∏è Type check
        run: npm run type-check

  build:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci --legacy-peer-deps

      - name: üìã Build package
        run: npm run build

      - name: üì¶ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 1

  # Test matrix based on workflow type
  test:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        node-version: ${{ fromJson(needs.setup.outputs.node-versions) }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci --legacy-peer-deps

      - name: üß™ Run tests
        run: npm run test:silent

      - name: üìä Upload coverage reports
        if: matrix.node-version == 18
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.node-version }}
          path: coverage/
          retention-days: 7

  # Coverage analysis
  coverage:
    runs-on: ubuntu-latest
    needs: [setup, test]
    if: ${{ always() && (needs.setup.outputs.node-versions == '[18]' || contains(needs.setup.outputs.node-versions, '18')) }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci --legacy-peer-deps

      - name: üìä Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports-18
          path: coverage/

      - name: üìà Generate coverage badge
        run: |
          if [ -f "coverage/coverage-summary.json" ]; then
            npm run coverage:badge
          else
            echo "No coverage report found, skipping badge generation"
          fi

      - name: üìä Coverage summary
        run: |
          echo "üìä Coverage Summary:"
          if [ -f "coverage/coverage-summary.json" ]; then
            node -e "
              const coverage = require('./coverage/coverage-summary.json');
              const total = coverage.total;
              console.log(\`Statements: \${total.statements.pct}%\`);
              console.log(\`Branches: \${total.branches.pct}%\`);
              console.log(\`Functions: \${total.functions.pct}%\`);
              console.log(\`Lines: \${total.lines.pct}%\`);
              
              // Different thresholds for PR vs CI
              const isPR = '${{ needs.setup.outputs.is-pr }}' === 'true';
              const thresholds = isPR 
                ? { statements: 12, branches: 5, functions: 5, lines: 10 }
                : { statements: 12, branches: 5, functions: 5, lines: 10 };
              
              let failed = false;
              Object.entries(thresholds).forEach(([key, threshold]) => {
                const actual = total[key].pct;
                if (actual < threshold) {
                  console.log(\`‚ùå \${key}: \${actual}% < \${threshold}%\`);
                  failed = true;
                } else {
                  console.log(\`‚úÖ \${key}: \${actual}% >= \${threshold}%\`);
                }
              });
              
              if (failed) {
                process.exit(1);
              }
            "
          else
            echo "No coverage report found - this is expected for PRs or when Node.js 18 is not in the test matrix"
            echo "Coverage analysis will be skipped"
          fi

  # Publish to NPM (only for master pushes)
  publish:
    runs-on: ubuntu-latest
    needs: [setup, lint, type-check, build, test, coverage]
    if: ${{ needs.setup.outputs.should-publish == 'true' && !contains(github.event.head_commit.message, '[skip ci]') }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci --legacy-peer-deps

      - name: üì¶ Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: üè∑Ô∏è Check if version changed and not already released
        id: version-check
        run: |
          if git diff HEAD~1 package.json | grep -q '"version"'; then
            VERSION=$(node -p "require('./package.json').version")
            echo "Version changed to: $VERSION"
            
            if npm view @a-cube-io/ereceipts-js-sdk@$VERSION version 2>/dev/null; then
              echo "version_changed=false" >> $GITHUB_OUTPUT
              echo "Version $VERSION already exists on NPM, skipping publish"
            else
              echo "version_changed=true" >> $GITHUB_OUTPUT
              echo "Version $VERSION is new, will publish"
            fi
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged, skipping publish"
          fi

      - name: üì° Publish to NPM
        if: steps.version-check.outputs.version_changed == 'true'
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Create GitHub release
  release:
    runs-on: ubuntu-latest
    needs: [setup, publish]
    if: ${{ needs.setup.outputs.should-publish == 'true' && needs.publish.result == 'success' && !contains(github.event.head_commit.message, '[skip ci]') }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci --legacy-peer-deps

      - name: üè∑Ô∏è Create GitHub release
        run: |
          VERSION=$(node -p "require('./package.json').version")
          
          if gh release view "v$VERSION" >/dev/null 2>&1; then
            echo "Release v$VERSION already exists, skipping"
          else
            echo "Creating release v$VERSION"
            gh release create "v$VERSION" \
              --title "üì¶ Auto Release v$VERSION" \
              --notes "**‚ö†Ô∏è This is an automatic release triggered by version change in package.json**

          For proper releases with changelogs, use the tag-based release process:
          \`\`\`bash
          git tag v$VERSION
          git push origin v$VERSION
          \`\`\`

          ## Commit Details
          - **Triggered by**: Direct version change in commit ${{ github.sha }}
          - **Branch**: ${{ github.ref_name }}
          - **Version**: $VERSION

          ## Installation
          \`\`\`bash
          npm install @a-cube-io/ereceipts-js-sdk@$VERSION
          \`\`\`" \
              --generate-notes
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Final status check
  status:
    runs-on: ubuntu-latest
    needs: [setup, lint, type-check, build, test, coverage, publish, release]
    if: always()
    steps:
      - name: ‚úÖ Check all jobs completed
        run: |
          # Check if coverage job was skipped (expected for non-master branches)
          COVERAGE_SKIPPED=false
          if [[ "${{ needs.coverage.result }}" == "skipped" ]]; then
            COVERAGE_SKIPPED=true
          fi
          
          # Check if publish job was skipped (expected for non-master branches)
          PUBLISH_SKIPPED=false
          if [[ "${{ needs.publish.result }}" == "skipped" ]]; then
            PUBLISH_SKIPPED=true
          fi
          
          # Check if release job was skipped (expected for non-master branches)
          RELEASE_SKIPPED=false
          if [[ "${{ needs.release.result }}" == "skipped" ]]; then
            RELEASE_SKIPPED=true
          fi
          
          # Debug: Show job results
          echo "üîç Job Results:"
          echo "  Lint: ${{ needs.lint.result }}"
          echo "  Type Check: ${{ needs.type-check.result }}"
          echo "  Build: ${{ needs.build.result }}"
          echo "  Test: ${{ needs.test.result }}"
          echo "  Coverage: ${{ needs.coverage.result }} (skipped: $COVERAGE_SKIPPED)"
          echo "  Publish: ${{ needs.publish.result }} (skipped: $PUBLISH_SKIPPED)"
          echo "  Release: ${{ needs.release.result }} (skipped: $RELEASE_SKIPPED)"
          echo "  Should Publish: ${{ needs.setup.outputs.should-publish }}"
          
          # Validate required jobs
          if [[ "${{ needs.lint.result }}" == "success" && 
                "${{ needs.type-check.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                ( "${{ needs.coverage.result }}" == "success" || "$COVERAGE_SKIPPED" == "true" ) ]]; then
            
            if [[ "${{ needs.setup.outputs.should-publish }}" == "true" ]]; then
              if [[ "${{ needs.publish.result }}" == "success" ]]; then
                echo "üéâ All checks passed and package published successfully!"
              elif [[ "$PUBLISH_SKIPPED" == "true" ]]; then
                echo "üéâ All checks passed! Publish skipped (version unchanged or already published)"
              else
                echo "‚ùå Publish failed"
                exit 1
              fi
            else
              echo "üéâ All checks passed! (No publish needed for this branch)"
            fi
          else
            echo "‚ùå Some checks failed"
            exit 1
          fi 