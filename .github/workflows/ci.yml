name: 🧪 CI Tests

on:
  push:
    branches: [develop, feature/*]

permissions:
  contents: read
  actions: write

env:
  NODE_ENV: test
  CI: true

jobs:
  # Cache dependencies for faster builds
  cache-deps:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🔧 Install dependencies
        id: cache-deps
        run: |
          npm ci --legacy-peer-deps
          echo "cache-hit=true" >> $GITHUB_OUTPUT

  # Lint and type check (fast, can run in parallel)
  lint-and-typecheck:
    runs-on: ubuntu-latest
    needs: cache-deps
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🔍 Lint code
        run: npm run lint:check

      - name: 🏗️ Type check
        run: npm run type-check

  # Build package (can run in parallel with tests)
  build:
    runs-on: ubuntu-latest
    needs: cache-deps
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 📋 Build package
        run: npm run build

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 1

  # Test on multiple Node.js versions (parallel matrix)
  test:
    runs-on: ubuntu-latest
    needs: cache-deps
    strategy:
      fail-fast: false
      matrix:
        node-version: [16, 18, 20]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🧪 Run tests
        run: npm run test:silent

      - name: 📊 Upload coverage reports
        if: matrix.node-version == '18'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

  # Coverage analysis (runs after tests complete)
  coverage:
    runs-on: ubuntu-latest
    needs: [test, lint-and-typecheck, build]
    if: always()
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 📊 Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: coverage/

      - name: 📈 Generate coverage badge
        run: npm run coverage:badge

      - name: 📊 Coverage summary
        run: |
          echo "📊 Coverage Summary:"
          if [ -f "coverage/coverage-summary.json" ]; then
            node -e "
              const coverage = require('./coverage/coverage-summary.json');
              const total = coverage.total;
              console.log(\`Statements: \${total.statements.pct}%\`);
              console.log(\`Branches: \${total.branches.pct}%\`);
              console.log(\`Functions: \${total.functions.pct}%\`);
              console.log(\`Lines: \${total.lines.pct}%\`);
            "
          else
            echo "No coverage report found"
          fi

  # Final status check
  status:
    runs-on: ubuntu-latest
    needs: [test, lint-and-typecheck, build, coverage]
    if: always()
    steps:
      - name: ✅ Check all jobs completed
        run: |
          if [[ "${{ needs.test.result }}" == "success" && 
                "${{ needs.lint-and-typecheck.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" ]]; then
            echo "🎉 All checks passed!"
          else
            echo "❌ Some checks failed"
            exit 1
          fi
