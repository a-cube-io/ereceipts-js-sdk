name: üöÄ Auto Publish to NPM

on:
  push:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  NODE_ENV: production
  CI: true

jobs:
  # Cache dependencies and run quality checks
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci --legacy-peer-deps

      - name: üß™ Run tests
        run: npm run test:silent

      - name: üîç Lint code
        run: npm run lint:check

      - name: üèóÔ∏è Type check
        run: npm run type-check

      - name: üìã Build package
        run: npm run build

      - name: üì¶ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 1

  # Version check and publish
  publish:
    runs-on: ubuntu-latest
    needs: quality-checks
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci --legacy-peer-deps

      - name: üì¶ Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: üè∑Ô∏è Check if version changed and not already released
        id: version-check
        run: |
          # Check if version changed in this commit
          if git diff HEAD~1 package.json | grep -q '"version"'; then
            VERSION=$(node -p "require('./package.json').version")
            echo "Version changed to: $VERSION"
            
            # Check if this version is already published on NPM
            if npm view @a-cube-io/ereceipts-js-sdk@$VERSION version 2>/dev/null; then
              echo "version_changed=false" >> $GITHUB_OUTPUT
              echo "Version $VERSION already exists on NPM, skipping publish"
            else
              echo "version_changed=true" >> $GITHUB_OUTPUT
              echo "Version $VERSION is new, will publish"
            fi
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged, skipping publish"
          fi

      - name: üì° Publish to NPM
        if: steps.version-check.outputs.version_changed == 'true'
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Create GitHub release
  release:
    runs-on: ubuntu-latest
    needs: [quality-checks, publish]
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && needs.publish.result == 'success' }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci --legacy-peer-deps

      - name: üè∑Ô∏è Create GitHub release (if not exists)
        run: |
          VERSION=$(node -p "require('./package.json').version")
          
          # Check if release already exists
          if gh release view "v$VERSION" >/dev/null 2>&1; then
            echo "Release v$VERSION already exists, skipping"
          else
            echo "Creating release v$VERSION"
            gh release create "v$VERSION" \
              --title "üì¶ Auto Release v$VERSION" \
              --notes "**‚ö†Ô∏è This is an automatic release triggered by version change in package.json**

          For proper releases with changelogs, use the tag-based release process:
          \`\`\`bash
          git tag v$VERSION
          git push origin v$VERSION
          \`\`\`

          ## Commit Details
          - **Triggered by**: Direct version change in commit ${{ github.sha }}
          - **Branch**: ${{ github.ref_name }}
          - **Version**: $VERSION

          ## Installation
          \`\`\`bash
          npm install @a-cube-io/ereceipts-js-sdk@$VERSION
          \`\`\`" \
              --generate-notes
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Final status check
  status:
    runs-on: ubuntu-latest
    needs: [quality-checks, publish, release]
    if: always()
    steps:
      - name: ‚úÖ Check all jobs completed
        run: |
          if [[ "${{ needs.quality-checks.result }}" == "success" ]]; then
            if [[ "${{ needs.publish.result }}" == "success" || "${{ needs.publish.result }}" == "skipped" ]]; then
              echo "üéâ All checks passed!"
              if [[ "${{ needs.publish.result }}" == "success" ]]; then
                echo "üì¶ Package published successfully!"
              else
                echo "‚è≠Ô∏è No publish needed (version unchanged or already published)"
              fi
            else
              echo "‚ùå Publish failed"
              exit 1
            fi
          else
            echo "‚ùå Quality checks failed"
            exit 1
          fi
