/**
 * Type-safe event system for SDK
 * Discriminated unions ensure type safety for event payloads
 */

import type {
  PEMId,
  CashierId,
  ReceiptId,
  MerchantId,
  SerialNumber,
  DocumentNumber,
} from './branded.js';

// Core event base
interface BaseEvent {
  timestamp: Date;
  requestId: string;
}

// Receipt Events
export interface ReceiptCreatedEvent extends BaseEvent {
  type: 'receipt.created';
  data: {
    receiptId: ReceiptId;
    amount: string;
    fiscalId: string;
    cashierId?: CashierId;
    pemId?: PEMId;
  };
}

export interface ReceiptVoidedEvent extends BaseEvent {
  type: 'receipt.voided';
  data: {
    receiptId: ReceiptId;
    originalReceiptId: ReceiptId;
    reason: string;
    documentNumber?: DocumentNumber;
  };
}

export interface ReceiptReturnedEvent extends BaseEvent {
  type: 'receipt.returned';
  data: {
    receiptId: ReceiptId;
    originalReceiptId: ReceiptId;
    returnedItems: Array<{
      description: string;
      quantity: string;
      amount: string;
    }>;
  };
}

export interface ReceiptTransmittedEvent extends BaseEvent {
  type: 'receipt.transmitted';
  data: {
    receiptId: ReceiptId;
    documentNumber: DocumentNumber;
    transmissionDate: Date;
    fiscalResponse: unknown;
  };
}

// PEM Events
export interface PEMActivatedEvent extends BaseEvent {
  type: 'pem.activated';
  data: {
    pemId: PEMId;
    serialNumber: SerialNumber;
    activationKey: string;
    status: 'ACTIVE';
  };
}

export interface PEMStatusChangedEvent extends BaseEvent {
  type: 'pem.status_changed';
  data: {
    pemId: PEMId;
    serialNumber: SerialNumber;
    previousStatus: string;
    newStatus: string;
    reason?: string;
  };
}

// Cashier Events
export interface CashierCreatedEvent extends BaseEvent {
  type: 'cashier.created';
  data: {
    cashierId: CashierId;
    email: string;
    merchantId: MerchantId;
  };
}

export interface CashierDeletedEvent extends BaseEvent {
  type: 'cashier.deleted';
  data: {
    cashierId: CashierId;
    email: string;
  };
}

// Merchant Events
export interface MerchantCreatedEvent extends BaseEvent {
  type: 'merchant.created';
  data: {
    merchantId: MerchantId;
    fiscalId: string;
    name: string;
    email: string;
  };
}

export interface MerchantUpdatedEvent extends BaseEvent {
  type: 'merchant.updated';
  data: {
    merchantId: MerchantId;
    changes: Record<string, unknown>;
  };
}

// Error Events
export interface ErrorEvent extends BaseEvent {
  type: 'error';
  data: {
    errorCode: string;
    errorMessage: string;
    operation: string;
    retry: boolean;
    context?: Record<string, unknown>;
  };
}

// Authentication Events
export interface AuthenticationEvent extends BaseEvent {
  type: 'auth.success' | 'auth.failed' | 'auth.expired' | 'auth.refreshed' | 'auth.error' | 'auth.logout';
  data: {
    userId?: string;
    role?: 'provider' | 'merchant' | 'cashier';
    expiresAt?: Date;
    error?: string;
    errorCode?: string;
    errorMessage?: string;
    operation?: string;
    retry?: boolean;
    context?: Record<string, unknown>;
    reason?: string;
    user?: unknown;
    sessionId?: string;
  };
}

// Union type of all events
export type ACubeSDKEvent =
  | ReceiptCreatedEvent
  | ReceiptVoidedEvent
  | ReceiptReturnedEvent
  | ReceiptTransmittedEvent
  | PEMActivatedEvent
  | PEMStatusChangedEvent
  | CashierCreatedEvent
  | CashierDeletedEvent
  | MerchantCreatedEvent
  | MerchantUpdatedEvent
  | ErrorEvent
  | AuthenticationEvent;

// Event type map for type-safe event emission/listening
export type EventTypeMap = {
  [K in ACubeSDKEvent['type']]: Extract<ACubeSDKEvent, { type: K }>['data'];
};

// Webhook event (subset of SDK events that come from server)
export type WebhookEvent = Extract<
  ACubeSDKEvent,
  | ReceiptTransmittedEvent
  | PEMActivatedEvent
  | PEMStatusChangedEvent
  | ErrorEvent
>;

// Client event (events generated by SDK locally)
export type ClientEvent = Exclude<ACubeSDKEvent, WebhookEvent>;
