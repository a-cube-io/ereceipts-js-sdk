/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  '/mf1/cashiers': {
    /** Read Cashiers */
    get: operations['read_cashiers_mf1_cashiers_get'];
    /** Create Cashier */
    post: operations['create_cashier_mf1_cashiers_post'];
  };
  '/mf1/cashiers/me': {
    /**
     * Read Cashier Me
     * @description Read currently authenticated cashier's information
     */
    get: operations['read_cashier_me_mf1_cashiers_me_get'];
  };
  '/mf1/cashiers/{cashier_id}': {
    /**
     * Read Cashier By Id
     * @description Get a specific user by id.
     */
    get: operations['read_cashier_by_id_mf1_cashiers__cashier_id__get'];
    /**
     * Delete Cashier
     * @description Delete a cashier.
     */
    delete: operations['delete_cashier_mf1_cashiers__cashier_id__delete'];
  };
  '/mf1/point-of-sales': {
    /**
     * Read Point Of Sales
     * @description Retrieve PEMs.
     */
    get: operations['read_point_of_sales_mf1_point_of_sales_get'];
  };
  '/mf1/point-of-sales/{serial_number}': {
    /** Read Point Of Sale */
    get: operations['read_point_of_sale_mf1_point_of_sales__serial_number__get'];
  };
  '/mf1/point-of-sales/close': {
    /** Close Journal */
    post: operations['close_journal_mf1_point_of_sales_close_post'];
  };
  '/mf1/point-of-sales/{serial_number}/activation': {
    /**
     * Post Activation
     * @description Trigger the activation process of a Point of Sale by requesting a certificate to the Italian Tax Agency
     */
    post: operations['post_activation_mf1_point_of_sales__serial_number__activation_post'];
  };
  '/mf1/point-of-sales/{serial_number}/inactivity': {
    /**
     * Create Inactivity Period
     * @description Create a new inactivity period
     */
    post: operations['create_inactivity_period_mf1_point_of_sales__serial_number__inactivity_post'];
  };
  '/mf1/point-of-sales/{serial_number}/status/offline': {
    /**
     * Post Offline
     * @description Change the state of the Point of Sale to 'offline'
     */
    post: operations['post_offline_mf1_point_of_sales__serial_number__status_offline_post'];
  };
  '/mf1/receipts': {
    /** Get a list of electronic receipts */
    get: operations['get_receipts_mf1_receipts_get'];
    /** Create a new electronic receipt */
    post: operations['create_receipt_mf1_receipts_post'];
    /** Void an electronic receipt */
    delete: operations['void_receipt_mf1_receipts_delete'];
  };
  '/mf1/receipts/{receipt_uuid}': {
    /** Get an electronic receipt */
    get: operations['get_receipt_mf1_receipts__receipt_uuid__get'];
  };
  '/mf1/receipts/void-with-proof': {
    /** Void an electronic receipt identified by a proof of purchase */
    delete: operations['void_receipt_via_proof_mf1_receipts_void_with_proof_delete'];
  };
  '/mf1/receipts/{receipt_uuid}/details': {
    /**
     * Get the details or the PDF of an electronic receipt
     * @description Retrieve receipt details in JSON format or download as PDF based on the Accept header. Use 'Accept: application/json' for JSON response (default) or 'Accept: application/pdf' for PDF download.
     */
    get: operations['get_receipt_details_mf1_receipts__receipt_uuid__details_get'];
  };
  '/mf1/receipts/return': {
    /** Return items from an electronic receipt (same PEM or other PEM) */
    post: operations['return_receipt_items_mf1_receipts_return_post'];
  };
  '/mf1/receipts/return-with-proof': {
    /** Return items from an electronic receipt identified by a proof of purchase */
    post: operations['return_receipt_items_via_proof_mf1_receipts_return_with_proof_post'];
  };
  '/mf1/cash-register': {
    /**
     * Get Cash Registers
     * @description Get all point of sales for the current merchant.
     */
    get: operations['get_cash_registers_mf1_cash_register_get'];
    /**
     * Create Cash Register
     * @description Create a new point of sale.
     */
    post: operations['create_cash_register_mf1_cash_register_post'];
  };
  '/mf1/cash-register/{id}': {
    /**
     * Get Cash Register
     * @description Get a point of sale by ID.
     */
    get: operations['get_cash_register_mf1_cash_register__id__get'];
  };
  '/mf2/merchants': {
    /**
     * Retrieves the collection of Merchant resources.
     * @description Retrieves the collection of Merchant resources.
     */
    get: operations['api_merchants_get_collection'];
    /**
     * Creates a Merchant resource.
     * @description Creates a Merchant resource.
     */
    post: operations['api_merchants_post'];
  };
  '/mf2/merchants/{uuid}': {
    /**
     * Retrieves a Merchant resource.
     * @description Retrieves a Merchant resource.
     */
    get: operations['api_merchants_uuid_get'];
    /**
     * Replaces the Merchant resource.
     * @description Replaces the Merchant resource.
     */
    put: operations['api_merchants_uuid_put'];
  };
  '/mf2/point-of-sales': {
    /**
     * Creates a new PEM.
     * @description Creates a Pem resource.
     */
    post: operations['api_point-of-sales_post'];
  };
  '/mf2/point-of-sales/{id}/certificates': {
    /**
     * Returns the mTLS and signing certificates
     * @description Retrieves a Pem resource.
     */
    get: operations['api_point-of-sales_idcertificates_get'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** ActivationRequest */
    'E-Receipt_IT_API_ActivationRequest': {
      /** Registration Key */
      registration_key: string;
    };
    /** Address */
    'E-Receipt_IT_API_Address': {
      /**
       * Street Address
       * @description The street address associated to the PEM
       */
      street_address: string;
      /**
       * Zip Code
       * @description The zip code associated to the PEM
       */
      zip_code: string;
      /**
       * City
       * @description The city associated to the PEM
       */
      city: string;
      /**
       * Province
       * @description The province associated to the PEM
       */
      province: string;
    };
    /** CashRegisterBasicOutput */
    'E-Receipt_IT_API_CashRegisterBasicOutput': {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Pem Serial Number */
      pem_serial_number: string;
      /** Name */
      name: string;
    };
    /** CashRegisterCreate */
    'E-Receipt_IT_API_CashRegisterCreate': {
      /** Pem Serial Number */
      pem_serial_number: string;
      /** Name */
      name: string;
    };
    /** CashRegisterDetailedOutput */
    'E-Receipt_IT_API_CashRegisterDetailedOutput': {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Pem Serial Number */
      pem_serial_number: string;
      /** Name */
      name: string;
      /** Mtls Certificate */
      mtls_certificate: string;
      /** Private Key */
      private_key: string;
    };
    /** CashierCreateInput */
    'E-Receipt_IT_API_CashierCreateInput': {
      /** Email */
      email: string;
      /** Password */
      password: string;
    };
    /** CashierOutput */
    'E-Receipt_IT_API_CashierOutput': {
      /** Id */
      id: number;
      /** Email */
      email: string;
    };
    /** ErrorModel400BadRequest */
    'E-Receipt_IT_API_ErrorModel400BadRequest': {
      /**
       * Type
       * @default /errors/400
       */
      type?: string;
      /**
       * Title
       * @default Bad Request
       */
      title?: string;
      /**
       * Status
       * @default 400
       */
      status?: number;
      /**
       * Detail
       * @default A human-readable explanation specific to this occurrence of the problem
       */
      detail?: string;
      /**
       * Instance
       * @default A URI reference that identifies the specific occurrence of the problem
       */
      instance?: string | null;
    };
    /** ErrorModel401Unauthorized */
    'E-Receipt_IT_API_ErrorModel401Unauthorized': {
      /**
       * Type
       * @default /errors/401
       */
      type?: string;
      /**
       * Title
       * @default Could not validate credentials
       */
      title?: string;
      /**
       * Status
       * @default 401
       */
      status?: number;
      /**
       * Detail
       * @default A human-readable explanation specific to this occurrence of the problem
       */
      detail?: string;
      /**
       * Instance
       * @default A URI reference that identifies the specific occurrence of the problem
       */
      instance?: string | null;
    };
    /** ErrorModel403Forbidden */
    'E-Receipt_IT_API_ErrorModel403Forbidden': {
      /**
       * Type
       * @default /errors/403
       */
      type?: string;
      /**
       * Title
       * @default Forbidden
       */
      title?: string;
      /**
       * Status
       * @default 403
       */
      status?: number;
      /**
       * Detail
       * @default A human-readable explanation specific to this occurrence of the problem
       */
      detail?: string;
      /**
       * Instance
       * @default A URI reference that identifies the specific occurrence of the problem
       */
      instance?: string | null;
    };
    /** ErrorModel404NotFound */
    'E-Receipt_IT_API_ErrorModel404NotFound': {
      /**
       * Type
       * @default /errors/404
       */
      type?: string;
      /**
       * Title
       * @default Not Found
       */
      title?: string;
      /**
       * Status
       * @default 404
       */
      status?: number;
      /**
       * Detail
       * @default A human-readable explanation specific to this occurrence of the problem
       */
      detail?: string;
      /**
       * Instance
       * @default A URI reference that identifies the specific occurrence of the problem
       */
      instance?: string | null;
    };
    /**
     * GoodOrService
     * @enum {string}
     */
    'E-Receipt_IT_API_GoodOrService': 'B' | 'S';
    /** HTTPValidationError */
    'E-Receipt_IT_API_HTTPValidationError': {
      /** Detail */
      detail?: components['schemas']['E-Receipt_IT_API_ValidationError'][];
    };
    /**
     * PEMStatus
     * @enum {string}
     */
    'E-Receipt_IT_API_PEMStatus': 'NEW' | 'REGISTERED' | 'ACTIVE' | 'ONLINE' | 'OFFLINE' | 'DISCARDED';
    /** PEMStatusOfflineRequest */
    'E-Receipt_IT_API_PEMStatusOfflineRequest': {
      /**
       * Timestamp
       * Format: date-time
       */
      timestamp: string;
      /** Reason */
      reason: string;
    };
    /** Page[~T]Customized[CashRegisterBasicOutput] */
    'E-Receipt_IT_API_Page__T_Customized_CashRegisterBasicOutput_': {
      /** Members */
      members: components['schemas']['E-Receipt_IT_API_CashRegisterBasicOutput'][];
      /** Total */
      total?: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[~T]Customized[CashierOutput] */
    'E-Receipt_IT_API_Page__T_Customized_CashierOutput_': {
      /** Members */
      members: components['schemas']['E-Receipt_IT_API_CashierOutput'][];
      /** Total */
      total?: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[~T]Customized[PointOfSaleOutput] */
    'E-Receipt_IT_API_Page__T_Customized_PointOfSaleOutput_': {
      /** Members */
      members: components['schemas']['E-Receipt_IT_API_PointOfSaleOutput'][];
      /** Total */
      total?: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** Page[~T]Customized[ReceiptOutput] */
    'E-Receipt_IT_API_Page__T_Customized_ReceiptOutput_': {
      /** Members */
      members: components['schemas']['E-Receipt_IT_API_ReceiptOutput'][];
      /** Total */
      total?: number | null;
      /** Page */
      page: number | null;
      /** Size */
      size: number | null;
      /** Pages */
      pages?: number | null;
    };
    /** PointOfSaleDetailedOutput */
    'E-Receipt_IT_API_PointOfSaleDetailedOutput': {
      /** Serial Number */
      serial_number: string;
      status: components['schemas']['E-Receipt_IT_API_PEMStatus'];
      address: components['schemas']['E-Receipt_IT_API_Address'];
      /** Registration Key */
      registration_key: string | null;
    };
    /** PointOfSaleOutput */
    'E-Receipt_IT_API_PointOfSaleOutput': {
      /** Serial Number */
      serial_number: string;
      status: components['schemas']['E-Receipt_IT_API_PEMStatus'];
      address: components['schemas']['E-Receipt_IT_API_Address'];
    };
    /** ReceiptDetailsOutput */
    'E-Receipt_IT_API_ReceiptDetailsOutput': {
      /**
       * Uuid
       * Format: uuid
       */
      uuid: string;
      type: components['schemas']['E-Receipt_IT_API_ReceiptType'];
      /**
       * Customer Lottery Code
       * @description Lottery code of the customer
       */
      customer_lottery_code?: string | null;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Total Amount
       * @description Total amount of the receipt as a string with up to 8 decimal digits
       */
      total_amount: string;
      /**
       * Document Number
       * @description The document number assigned to the document by the Tax Authority.
       *         This is the official ID of the document valid for fiscal purposes.
       *         It's null if the receipt has not been sent yet.
       */
      document_number?: string | null;
      /** Document Datetime */
      document_datetime?: string | null;
      /**
       * Fiscal Id
       * @description The VAT number associated to the receipt issuer
       */
      fiscal_id: string;
      /**
       * Total Taxable Amount
       * @description Total amount subject to VAT/tax before any discounts or exemptions as a string with 2 to 8 decimal digits
       */
      total_taxable_amount: string;
      /**
       * Total Uncollected Amount
       * @description Total amount that remains unpaid or uncollected from the customer as a string with 2 to 8 decimal digits
       */
      total_uncollected_amount: string;
      /**
       * Deductible Amount
       * @description Amount that can be deducted for tax purposes (business expenses) as a string with 2 to 8 decimal digits
       */
      deductible_amount: string;
      /**
       * Total Vat Amount
       * @description Total Value Added Tax amount calculated on taxable transactions as a string with 2 to 8 decimal digits
       */
      total_vat_amount: string;
      /**
       * Total Discount
       * @description Total discount amount applied to the receipt (net of tax) as a string with 2 to 8 decimal digits
       */
      total_discount: string;
      /**
       * Total Gross Discount
       * @description Total discount amount before tax calculations (gross amount) as a string with 2 to 8 decimal digits
       */
      total_gross_discount: string;
      /**
       * Discount
       * @description Individual discount amount applied to specific items or the overall receipt as a string with 2 to 8 decimal digits
       */
      discount: string;
      /**
       * Items
       * @description List of individual products/services included in the receipt
       * @default []
       */
      items?: components['schemas']['E-Receipt_IT_API_ReceiptItem'][];
    };
    /** ReceiptInput */
    'E-Receipt_IT_API_ReceiptInput': {
      /**
       * Items
       * @description 'Elementi contabili. Commercial document items. It is mandatory that there is at least one item.
       */
      items: components['schemas']['E-Receipt_IT_API_ReceiptItem'][];
      /**
       * Customer Tax Code
       * @description Tax code of the customer
       */
      customer_tax_code?: string | null;
      /**
       * Customer Lottery Code
       * @description Lottery code of the customer
       */
      customer_lottery_code?: string | null;
      /**
       * Discount
       * @description 'Sconto A Pagare'. This discount, applied in EUR as a string with 2 to 8 decimal digits, does not change the taxable amount of the receipt that is sent to the Agenzia delle Entrate. It is just a not paid amount, usually a rounding up, that is applied at payment time.
       * @default 0.00
       */
      discount?: string;
      /**
       * Invoice Issuing
       * @description 'Flag Emissione Fattura'. In case of uncollected amount, set this field to true in case for services invoice at the end of the period. This use case is generally called 'Credito - segue fattura'.
       * @default false
       */
      invoice_issuing?: boolean;
      /**
       * Uncollected Dcr To Ssn
       * @description Set this flag to true when the payment is not collected because the commercial document relates to the Distinta Contabile Riepilogativa that will be transmitted to the Sistema Sanitario Nazionale.
       * @default false
       */
      uncollected_dcr_to_ssn?: boolean;
      /**
       * Services Uncollected Amount
       * @description 'Credito Non Riscosso - Prestazioni Servizi'. Uncollected Amount in EUR as a string with 2 to 8 decimal digits in case of services.
       * @default 0.00
       */
      services_uncollected_amount?: string;
      /**
       * Goods Uncollected Amount
       * @description 'Credito Non Riscosso - Bene Consegnato'. Uncollected Amount in EUR as a string with 2 to 8 decimal digits in case of delivered goods.
       * @default 0.00
       */
      goods_uncollected_amount?: string;
      /**
       * Cash Payment Amount
       * @description 'Pagamento in contanti'. Cash payment amount in EUR as a string with 2 to 8 decimal digits.
       * @default 0.00
       */
      cash_payment_amount?: string;
      /**
       * Electronic Payment Amount
       * @description 'Pagamento elettronico'. Electronic payment amount in EUR as a string with 2 to 8 decimal digits.
       * @default 0.00
       */
      electronic_payment_amount?: string;
      /**
       * Ticket Restaurant Payment Amount
       * @description 'Pagamento Ticket Restaurant'. Ticket restaurant payment amount in EUR as a string with 2 to 8 decimal digits.
       * @default 0.00
       */
      ticket_restaurant_payment_amount?: string;
      /**
       * Ticket Restaurant Quantity
       * @description 'Numero Ticket Restaurant'. Number of Ticket Restaurants used.
       * @default 0
       */
      ticket_restaurant_quantity?: number;
    };
    /**
     * ReceiptItem
     * @description Model representing an item in a commercial document.
     */
    'E-Receipt_IT_API_ReceiptItem': {
      /**
       * @description Type of the item. It can be a good or a service.
       * @default B
       */
      good_or_service?: components['schemas']['E-Receipt_IT_API_GoodOrService'];
      /**
       * Quantity
       * @description Quantity expressed as a string with exactly 2 decimal digits. E.g. '1.00', '1.50', '2.00'
       */
      quantity: string;
      /**
       * Description
       * @description Description of the item (max 1000 chars)
       */
      description: string;
      /**
       * Unit Price
       * @description Unit price expressed as a string with 2 to 8 decimal digits. It is a gross price, i.e. it includes VAT amount
       */
      unit_price: string;
      /**
       * @description VAT rate code as a string
       * @default 22
       */
      vat_rate_code?: components['schemas']['E-Receipt_IT_API_VatRateCode'] | null;
      /**
       * Simplified Vat Allocation
       * @description Set to true if this item is subject to 'Ventilazione IVA'. If true, 'vat_rate_code' must not be set.
       * @default false
       */
      simplified_vat_allocation?: boolean;
      /**
       * Discount
       * @description Discount amount in EUR as a string with 2 to 8 decimal digits. It is a gross price, i.e. it includes VAT amount
       * @default 0
       */
      discount?: string;
      /**
       * Is Down Payment Or Voucher Redemption
       * @description Field to be filled in when issuing a commercial balance document to indicate that the amount reported in field 3.8.5 <TotalAmount> has already been collected as a down payment and the goods being sold had not been delivered. Field to be filled in also for the sale of goods and services by redeeming single-use vouchers.
       * @default false
       */
      is_down_payment_or_voucher_redemption?: boolean;
      /**
       * Complimentary
       * @description Set to true if it is a complimentary (free) item. It deducts the gift amount from the amount of the document but does not deduct it from the VAT and taxable amount
       * @default false
       */
      complimentary?: boolean;
    };
    /** ReceiptOutput */
    'E-Receipt_IT_API_ReceiptOutput': {
      /**
       * Uuid
       * Format: uuid
       */
      uuid: string;
      type: components['schemas']['E-Receipt_IT_API_ReceiptType'];
      /**
       * Customer Lottery Code
       * @description Lottery code of the customer
       */
      customer_lottery_code?: string | null;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Total Amount
       * @description Total amount of the receipt as a string with up to 8 decimal digits
       */
      total_amount: string;
      /**
       * Document Number
       * @description The document number assigned to the document by the Tax Authority.
       *         This is the official ID of the document valid for fiscal purposes.
       *         It's null if the receipt has not been sent yet.
       */
      document_number?: string | null;
      /** Document Datetime */
      document_datetime?: string | null;
    };
    /**
     * ReceiptProofType
     * @enum {string}
     */
    'E-Receipt_IT_API_ReceiptProofType': 'POS' | 'VR' | 'ND';
    /** ReceiptReturnOrVoidViaPEMInput */
    'E-Receipt_IT_API_ReceiptReturnOrVoidViaPEMInput': {
      /**
       * Pem Id
       * @description The PEM ID that issued the original receipt. If not provided, we assume the sale receipt was issued by the current PEM.
       */
      pem_id?: string | null;
      /** Items */
      items: components['schemas']['E-Receipt_IT_API_ReceiptItem'][];
      /**
       * Document Number
       * @description The document number of the original receipt
       */
      document_number: string;
      /**
       * Document Date
       * @description The date of the original receipt in ISO format. Mandatory only if the sale receipt has been issued by a different PEM.
       */
      document_date?: string | null;
      /**
       * Lottery Code
       * @description The lottery code of the original receipt
       */
      lottery_code?: string | null;
    };
    /** ReceiptReturnOrVoidWithProofInput */
    'E-Receipt_IT_API_ReceiptReturnOrVoidWithProofInput': {
      /** Items */
      items: components['schemas']['E-Receipt_IT_API_ReceiptItem'][];
      /** @description The type of proof of purchase: 'POS' for POS receipts, 'VR' for 'Vuoti a rendere', 'ND' for other residual cases. Used in place of device serial number/unique PEM identifier. */
      proof: components['schemas']['E-Receipt_IT_API_ReceiptProofType'];
      /**
       * Document Datetime
       * @description The date of the proof of purchase in ISO format
       */
      document_datetime: string;
    };
    /**
     * ReceiptType
     * @enum {string}
     */
    'E-Receipt_IT_API_ReceiptType': 'sale' | 'return' | 'void';
    /** ValidationError */
    'E-Receipt_IT_API_ValidationError': {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /**
     * VatRateCode
     * @description VAT rate codes with their corresponding descriptions.
     * @enum {string}
     */
    'E-Receipt_IT_API_VatRateCode': '4' | '5' | '10' | '22' | '2' | '6.4' | '7' | '7.3' | '7.5' | '7.65' | '7.95' | '8.3' | '8.5' | '8.8' | '9.5' | '12.3' | 'N1' | 'N2' | 'N3' | 'N4' | 'N5' | 'N6';
    'A-Cube_GOV-IT_PEL_Platform_Address': {
      street_address: string;
      zip_code: string;
      city: string;
      province: string;
    };
    'A-Cube_GOV-IT_PEL_Platform_Address.jsonld': {
      '@context'?: OneOf<[string, {
        '@vocab': string;
        /** @enum {string} */
        hydra: 'http://www.w3.org/ns/hydra/core#';
        [key: string]: unknown;
      }]>;
      '@id'?: string;
      '@type'?: string;
      street_address: string;
      zip_code: string;
      city: string;
      province: string;
    };
    /** @description Unprocessable entity */
    'A-Cube_GOV-IT_PEL_Platform_ConstraintViolation-json': {
      /**
       * @default 422
       * @example 422
       */
      status?: number;
      violations?: {
          /** @description The property path of the violation */
          propertyPath?: string;
          /** @description The message associated with the violation */
          message?: string;
        }[];
      detail?: string;
      type?: string;
      title?: string | null;
      instance?: string | null;
    };
    /** @description Unprocessable entity */
    'A-Cube_GOV-IT_PEL_Platform_ConstraintViolation.jsonld-jsonld': {
      '@context'?: OneOf<[string, {
        '@vocab': string;
        /** @enum {string} */
        hydra: 'http://www.w3.org/ns/hydra/core#';
        [key: string]: unknown;
      }]>;
      '@id'?: string;
      '@type'?: string;
      /**
       * @default 422
       * @example 422
       */
      status?: number;
      violations?: {
          /** @description The property path of the violation */
          propertyPath?: string;
          /** @description The message associated with the violation */
          message?: string;
        }[];
      detail?: string;
      description?: string;
      type?: string;
      title?: string | null;
      instance?: string | null;
    };
    /** @description A representation of common errors. */
    'A-Cube_GOV-IT_PEL_Platform_Error': {
      /** @description A short, human-readable summary of the problem. */
      title?: string | null;
      /** @description A human-readable explanation specific to this occurrence of the problem. */
      detail?: string | null;
      /** @default 400 */
      status?: number;
      /** @description A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced. */
      instance?: string | null;
      /** @description A URI reference that identifies the problem type */
      type?: string;
    };
    /** @description A representation of common errors. */
    'A-Cube_GOV-IT_PEL_Platform_Error.jsonld': {
      '@context'?: OneOf<[string, {
        '@vocab': string;
        /** @enum {string} */
        hydra: 'http://www.w3.org/ns/hydra/core#';
        [key: string]: unknown;
      }]>;
      '@id'?: string;
      '@type'?: string;
      /** @description A short, human-readable summary of the problem. */
      title?: string | null;
      /** @description A human-readable explanation specific to this occurrence of the problem. */
      detail?: string | null;
      /** @default 400 */
      status?: number;
      /** @description A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced. */
      instance?: string | null;
      /** @description A URI reference that identifies the problem type */
      type?: string;
      description?: string | null;
    };
    'A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantCreateInput': {
      /** @description The VAT-ID of the merchant (Partita IVA). */
      fiscal_id: string;
      /** @description The business name of the merchant (Ragione sociale). */
      name: string;
      /**
       * Format: email
       * @description The email address.
       */
      email: string;
      /** @description The password. */
      password: string;
      /** @description The billing address. */
      address?: components['schemas']['A-Cube_GOV-IT_PEL_Platform_Address'];
    };
    'A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantCreateInput.jsonld': {
      /** @description The VAT-ID of the merchant (Partita IVA). */
      fiscal_id: string;
      /** @description The business name of the merchant (Ragione sociale). */
      name: string;
      /**
       * Format: email
       * @description The email address.
       */
      email: string;
      /** @description The password. */
      password: string;
      /** @description The billing address. */
      address?: components['schemas']['A-Cube_GOV-IT_PEL_Platform_Address.jsonld'];
    };
    'A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantOutput': {
      uuid?: string;
      fiscal_id?: string;
      name?: string;
      email?: string;
      address?: components['schemas']['A-Cube_GOV-IT_PEL_Platform_Address'];
    };
    'A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantOutput.jsonld': {
      '@context'?: OneOf<[string, {
        '@vocab': string;
        /** @enum {string} */
        hydra: 'http://www.w3.org/ns/hydra/core#';
        [key: string]: unknown;
      }]>;
      '@id'?: string;
      '@type'?: string;
      uuid?: string;
      fiscal_id?: string;
      name?: string;
      email?: string;
      address?: components['schemas']['A-Cube_GOV-IT_PEL_Platform_Address.jsonld'];
    };
    'A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantUpdateInput': {
      /** @description The business name of the merchant (Ragione sociale). */
      name: string;
      /** @description The billing address. */
      address?: components['schemas']['A-Cube_GOV-IT_PEL_Platform_Address'] | null;
    };
    'A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantUpdateInput.jsonld': {
      /** @description The business name of the merchant (Ragione sociale). */
      name: string;
      /** @description The billing address. */
      address?: components['schemas']['A-Cube_GOV-IT_PEL_Platform_Address.jsonld'] | null;
    };
    'A-Cube_GOV-IT_PEL_Platform_Pem.PemCertificatesOutput': {
      mtls_certificate?: string;
      activation_xml_response?: string | null;
    };
    'A-Cube_GOV-IT_PEL_Platform_Pem.PemCertificatesOutput.jsonld': {
      '@context'?: OneOf<[string, {
        '@vocab': string;
        /** @enum {string} */
        hydra: 'http://www.w3.org/ns/hydra/core#';
        [key: string]: unknown;
      }]>;
      '@id'?: string;
      '@type'?: string;
      mtls_certificate?: string;
      activation_xml_response?: string | null;
    };
    'A-Cube_GOV-IT_PEL_Platform_Pem.PemCreateInput': {
      /**
       * Format: uuid
       * @description The merchant UUID.
       */
      merchant_uuid: string;
      /** @description The address. Leave empty to use the default merchant address. */
      address?: components['schemas']['A-Cube_GOV-IT_PEL_Platform_Address'] | null;
      /** @description The external PEM configuration. */
      external_pem_data?: components['schemas']['A-Cube_GOV-IT_PEL_Platform_PemData'] | null;
    };
    'A-Cube_GOV-IT_PEL_Platform_Pem.PemCreateInput.jsonld': {
      /**
       * Format: uuid
       * @description The merchant UUID.
       */
      merchant_uuid: string;
      /** @description The address. Leave empty to use the default merchant address. */
      address?: components['schemas']['A-Cube_GOV-IT_PEL_Platform_Address.jsonld'] | null;
      /** @description The external PEM configuration. */
      external_pem_data?: components['schemas']['A-Cube_GOV-IT_PEL_Platform_PemData.jsonld'] | null;
    };
    'A-Cube_GOV-IT_PEL_Platform_Pem.PemCreateOutput': {
      serial_number?: string;
      registration_key?: string;
    };
    'A-Cube_GOV-IT_PEL_Platform_Pem.PemCreateOutput.jsonld': {
      '@context'?: OneOf<[string, {
        '@vocab': string;
        /** @enum {string} */
        hydra: 'http://www.w3.org/ns/hydra/core#';
        [key: string]: unknown;
      }]>;
      '@id'?: string;
      '@type'?: string;
      serial_number?: string;
      registration_key?: string;
    };
    'A-Cube_GOV-IT_PEL_Platform_PemData': {
      version: string;
      /** @enum {string} */
      type: 'AP' | 'SP' | 'TM' | 'PV';
    };
    'A-Cube_GOV-IT_PEL_Platform_PemData.jsonld': {
      version: string;
      /** @enum {string} */
      type: 'AP' | 'SP' | 'TM' | 'PV';
    };
  };
  responses: {
  };
  parameters: {
  };
  requestBodies: {
  };
  headers: {
  };
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Read Cashiers */
  read_cashiers_mf1_cashiers_get: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        size?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_Page__T_Customized_CashierOutput_'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel403Forbidden'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel404NotFound'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_HTTPValidationError'];
        };
      };
    };
  };
  /** Create Cashier */
  create_cashier_mf1_cashiers_post: {
    requestBody: {
      content: {
        'application/json': components['schemas']['E-Receipt_IT_API_CashierCreateInput'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_CashierOutput'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel403Forbidden'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel404NotFound'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Read Cashier Me
   * @description Read currently authenticated cashier's information
   */
  read_cashier_me_mf1_cashiers_me_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_CashierOutput'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel403Forbidden'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel404NotFound'];
        };
      };
    };
  };
  /**
   * Read Cashier By Id
   * @description Get a specific user by id.
   */
  read_cashier_by_id_mf1_cashiers__cashier_id__get: {
    parameters: {
      path: {
        cashier_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_CashierOutput'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel403Forbidden'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel404NotFound'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Delete Cashier
   * @description Delete a cashier.
   */
  delete_cashier_mf1_cashiers__cashier_id__delete: {
    parameters: {
      path: {
        cashier_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel403Forbidden'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel404NotFound'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Read Point Of Sales
   * @description Retrieve PEMs.
   */
  read_point_of_sales_mf1_point_of_sales_get: {
    parameters: {
      query?: {
        status?: components['schemas']['E-Receipt_IT_API_PEMStatus'] | null;
        /** @description Page number */
        page?: number;
        size?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_Page__T_Customized_PointOfSaleOutput_'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel403Forbidden'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel404NotFound'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_HTTPValidationError'];
        };
      };
    };
  };
  /** Read Point Of Sale */
  read_point_of_sale_mf1_point_of_sales__serial_number__get: {
    parameters: {
      path: {
        /** @description The Point of Sale's serial number */
        serial_number: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_PointOfSaleDetailedOutput'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel403Forbidden'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel404NotFound'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_HTTPValidationError'];
        };
      };
    };
  };
  /** Close Journal */
  close_journal_mf1_point_of_sales_close_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel403Forbidden'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel404NotFound'];
        };
      };
    };
  };
  /**
   * Post Activation
   * @description Trigger the activation process of a Point of Sale by requesting a certificate to the Italian Tax Agency
   */
  post_activation_mf1_point_of_sales__serial_number__activation_post: {
    parameters: {
      path: {
        /** @description The Point of Sale's serial number */
        serial_number: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['E-Receipt_IT_API_ActivationRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel403Forbidden'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel404NotFound'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Create Inactivity Period
   * @description Create a new inactivity period
   */
  create_inactivity_period_mf1_point_of_sales__serial_number__inactivity_post: {
    parameters: {
      path: {
        /** @description The Point of Sale serial number */
        serial_number: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel400BadRequest'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel401Unauthorized'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel403Forbidden'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel404NotFound'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Post Offline
   * @description Change the state of the Point of Sale to 'offline'
   */
  post_offline_mf1_point_of_sales__serial_number__status_offline_post: {
    parameters: {
      path: {
        /** @description The Point of Sale serial number */
        serial_number: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['E-Receipt_IT_API_PEMStatusOfflineRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel403Forbidden'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel404NotFound'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_HTTPValidationError'];
        };
      };
    };
  };
  /** Get a list of electronic receipts */
  get_receipts_mf1_receipts_get: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        size?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_Page__T_Customized_ReceiptOutput_'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel403Forbidden'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel404NotFound'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_HTTPValidationError'];
        };
      };
    };
  };
  /** Create a new electronic receipt */
  create_receipt_mf1_receipts_post: {
    requestBody: {
      content: {
        'application/json': components['schemas']['E-Receipt_IT_API_ReceiptInput'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ReceiptOutput'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel403Forbidden'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel404NotFound'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_HTTPValidationError'];
        };
      };
    };
  };
  /** Void an electronic receipt */
  void_receipt_mf1_receipts_delete: {
    requestBody: {
      content: {
        'application/json': components['schemas']['E-Receipt_IT_API_ReceiptReturnOrVoidViaPEMInput'];
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel403Forbidden'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel404NotFound'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_HTTPValidationError'];
        };
      };
    };
  };
  /** Get an electronic receipt */
  get_receipt_mf1_receipts__receipt_uuid__get: {
    parameters: {
      path: {
        receipt_uuid: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ReceiptOutput'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel403Forbidden'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel404NotFound'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_HTTPValidationError'];
        };
      };
    };
  };
  /** Void an electronic receipt identified by a proof of purchase */
  void_receipt_via_proof_mf1_receipts_void_with_proof_delete: {
    requestBody: {
      content: {
        'application/json': components['schemas']['E-Receipt_IT_API_ReceiptReturnOrVoidWithProofInput'];
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel403Forbidden'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel404NotFound'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Get the details or the PDF of an electronic receipt
   * @description Retrieve receipt details in JSON format or download as PDF based on the Accept header. Use 'Accept: application/json' for JSON response (default) or 'Accept: application/pdf' for PDF download.
   */
  get_receipt_details_mf1_receipts__receipt_uuid__details_get: {
    parameters: {
      header?: {
        /** @description Content type preference. Use 'application/json' for JSON response or 'application/pdf' for PDF download. Defaults to 'application/json' if not specified. */
        accept?: string | null;
      };
      path: {
        receipt_uuid: string;
      };
    };
    responses: {
      /** @description Receipt details in JSON format or PDF file based on Accept header */
      200: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ReceiptDetailsOutput'];
          'application/pdf': string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden - User not authorized to access this receipt */
      403: {
        content: never;
      };
      /** @description Receipt not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_HTTPValidationError'];
        };
      };
    };
  };
  /** Return items from an electronic receipt (same PEM or other PEM) */
  return_receipt_items_mf1_receipts_return_post: {
    requestBody: {
      content: {
        'application/json': components['schemas']['E-Receipt_IT_API_ReceiptReturnOrVoidViaPEMInput'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ReceiptOutput'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel403Forbidden'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel404NotFound'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_HTTPValidationError'];
        };
      };
    };
  };
  /** Return items from an electronic receipt identified by a proof of purchase */
  return_receipt_items_via_proof_mf1_receipts_return_with_proof_post: {
    requestBody: {
      content: {
        'application/json': components['schemas']['E-Receipt_IT_API_ReceiptReturnOrVoidWithProofInput'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ReceiptOutput'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel403Forbidden'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel404NotFound'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Get Cash Registers
   * @description Get all point of sales for the current merchant.
   */
  get_cash_registers_mf1_cash_register_get: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        size?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_Page__T_Customized_CashRegisterBasicOutput_'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel403Forbidden'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel404NotFound'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Create Cash Register
   * @description Create a new point of sale.
   */
  create_cash_register_mf1_cash_register_post: {
    requestBody: {
      content: {
        'application/json': components['schemas']['E-Receipt_IT_API_CashRegisterCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_CashRegisterDetailedOutput'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel403Forbidden'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel404NotFound'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Get Cash Register
   * @description Get a point of sale by ID.
   */
  get_cash_register_mf1_cash_register__id__get: {
    parameters: {
      path: {
        /** @description ID of the cash register */
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_CashRegisterBasicOutput'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel403Forbidden'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_ErrorModel404NotFound'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['E-Receipt_IT_API_HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Retrieves the collection of Merchant resources.
   * @description Retrieves the collection of Merchant resources.
   */
  api_merchants_get_collection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        page?: number;
      };
    };
    responses: {
      /** @description Merchant collection */
      200: {
        content: {
          'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantOutput'][];
          'application/ld+json': {
            member: components['schemas']['A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantOutput.jsonld'][];
            totalItems?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "first": "string",
             *   "last": "string",
             *   "previous": "string",
             *   "next": "string"
             * }
             */
            view?: {
              /** Format: iri-reference */
              '@id'?: string;
              '@type'?: string;
              /** Format: iri-reference */
              first?: string;
              /** Format: iri-reference */
              last?: string;
              /** Format: iri-reference */
              previous?: string;
              /** Format: iri-reference */
              next?: string;
            };
            search?: {
              '@type'?: string;
              template?: string;
              variableRepresentation?: string;
              mapping?: ({
                  '@type'?: string;
                  variable?: string;
                  property?: string | null;
                  required?: boolean;
                })[];
            };
          };
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error.jsonld'];
          'application/problem+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
          'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
        };
      };
    };
  };
  /**
   * Creates a Merchant resource.
   * @description Creates a Merchant resource.
   */
  api_merchants_post: {
    /** @description The new Merchant resource */
    requestBody: {
      content: {
        'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantCreateInput'];
        'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantCreateInput.jsonld'];
      };
    };
    responses: {
      /** @description Merchant resource created */
      201: {
        content: {
          'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantOutput'];
          'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantOutput.jsonld'];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
          'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error.jsonld'];
          'application/problem+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
          'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error.jsonld'];
          'application/problem+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
          'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
        };
      };
      /** @description An error occurred */
      422: {
        content: {
          'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_ConstraintViolation.jsonld-jsonld'];
          'application/problem+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_ConstraintViolation-json'];
          'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_ConstraintViolation-json'];
        };
      };
    };
  };
  /**
   * Retrieves a Merchant resource.
   * @description Retrieves a Merchant resource.
   */
  api_merchants_uuid_get: {
    parameters: {
      path: {
        /** @description Merchant identifier */
        uuid: string;
      };
    };
    responses: {
      /** @description Merchant resource */
      200: {
        content: {
          'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantOutput'];
          'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantOutput.jsonld'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error.jsonld'];
          'application/problem+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
          'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error.jsonld'];
          'application/problem+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
          'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
        };
      };
    };
  };
  /**
   * Replaces the Merchant resource.
   * @description Replaces the Merchant resource.
   */
  api_merchants_uuid_put: {
    parameters: {
      path: {
        /** @description Merchant identifier */
        uuid: string;
      };
    };
    /** @description The updated Merchant resource */
    requestBody: {
      content: {
        'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantUpdateInput'];
        'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantUpdateInput.jsonld'];
      };
    };
    responses: {
      /** @description Merchant resource updated */
      200: {
        content: {
          'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantOutput'];
          'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantOutput.jsonld'];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
          'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error.jsonld'];
          'application/problem+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
          'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error.jsonld'];
          'application/problem+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
          'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error.jsonld'];
          'application/problem+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
          'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
        };
      };
      /** @description An error occurred */
      422: {
        content: {
          'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_ConstraintViolation.jsonld-jsonld'];
          'application/problem+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_ConstraintViolation-json'];
          'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_ConstraintViolation-json'];
        };
      };
    };
  };
  /**
   * Creates a new PEM.
   * @description Creates a Pem resource.
   */
  'api_point-of-sales_post': {
    /** @description The new Pem resource */
    requestBody: {
      content: {
        'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Pem.PemCreateInput'];
        'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Pem.PemCreateInput.jsonld'];
      };
    };
    responses: {
      /** @description Pem resource created */
      201: {
        content: {
          'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Pem.PemCreateOutput'];
          'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Pem.PemCreateOutput.jsonld'];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
          'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error.jsonld'];
          'application/problem+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
          'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error.jsonld'];
          'application/problem+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
          'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
        };
      };
      /** @description An error occurred */
      422: {
        content: {
          'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_ConstraintViolation.jsonld-jsonld'];
          'application/problem+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_ConstraintViolation-json'];
          'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_ConstraintViolation-json'];
        };
      };
    };
  };
  /**
   * Returns the mTLS and signing certificates
   * @description Retrieves a Pem resource.
   */
  'api_point-of-sales_idcertificates_get': {
    parameters: {
      path: {
        /** @description Pem identifier */
        id: string;
      };
    };
    responses: {
      /** @description Pem resource */
      200: {
        content: {
          'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Pem.PemCertificatesOutput'];
          'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Pem.PemCertificatesOutput.jsonld'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error.jsonld'];
          'application/problem+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
          'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/ld+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error.jsonld'];
          'application/problem+json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
          'application/json': components['schemas']['A-Cube_GOV-IT_PEL_Platform_Error'];
        };
      };
    };
  };
}
