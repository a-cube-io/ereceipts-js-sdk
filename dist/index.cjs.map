{"version":3,"sources":["../src/errors/index.ts","../src/generated/endpoints.ts","../src/resources/base-openapi.ts","../src/resources/cashiers.ts","../src/resources/receipts.ts","../src/resources/point-of-sales.ts","../src/resources/cash-registers.ts","../src/resources/merchants.ts","../src/resources/pems.ts","../src/http/circuit-breaker.ts","../src/http/retry.ts","../src/http/middleware.ts","../src/http/client.ts","../src/core/sdk.ts","../src/index.ts","../src/types/branded.ts"],"names":["generateRequestId","createErrorFromResponse","response","operation","requestId","message","getErrorMessage","AuthenticationError","AuthorizationError","resourceType","extractResourceType","resourceId","extractResourceId","NotFoundError","violations","extractValidationViolations","ValidationError","retryAfter","extractRetryAfter","RateLimitError","NetworkError","data","obj","v","ACubeSDKError","FiscalError","ConfigurationError","CircuitBreakerError","init_errors","__esmMin","code","options","state","CashierEndpoints","PointOfSalesEndpoints","ReceiptEndpoints","CashRegisterEndpoints","MerchantEndpoints","PEMEndpoints","EndpointUtils","init_endpoints","resource","operationId","allClasses","endpointClass","endpoint","pathParams","url","key","value","statusCode","BaseOpenAPIResource","init_base_openapi","config","endpointKey","httpOptions","error","headers","successResponse","context","queryParams","errors","paramName","paramType","expectedType","_options","enhancedError","operationKey","_error","attempt","delay","jitter","cashiers_exports","__export","CashiersResource","init_cashiers","_CashiersResource","client","params","cashierId","passwordCheck","email","password","suggestions","score","common","isValid","length","lowercase","uppercase","numbers","symbols","allChars","i","localPart","domain","visibleChars","maskedPart","parts","allowedDomains","ipAddress","cashier","receipts_exports","ReceiptsResource","init_receipts","voidData","receiptId","format","acceptHeader","returnData","item","itemErrors","paymentErrors","calculationErrors","fiscalErrors","index","prefix","validVATRates","cashAmount","electronicAmount","ticketAmount","calculated","totalPayments","subtotal","totalVAT","totalDiscount","vatBreakdown","quantity","unitPrice","itemDiscount","vatRate","itemNetTotal","itemVAT","itemGrossTotal","vatKey","breakdown","finalSubtotal","finalTotal","sum","amounts","receipt","date","_receipt","receipts","summary","totalAmount","dates","r","b","amount","paymentMethod","returnDate","receiptDate","daysSinceReceipt","returnPeriodDays","chars","result","point_of_sales_exports","PointOfSalesResource","init_point_of_sales","_PointOfSalesResource","serialNumber","activationData","inactivityData","device","_serialNumber","serialValidation","keyValidation","serialStr","_device","lastSeenTime","minutesSinceLastSeen","status","lastSeen","hoursSinceLastSeen","uptimeHours","uptimePercentage","availabilityStatus","devices","report","totalUptime","uptime","_date","reasons","requirements","now","group","cash_registers_exports","CashRegistersResource","init_cash_registers","_CashRegistersResource","registerId","register","settings","mockTransactionCount","mockTotalAmount","mockTodayTransactions","mockTodayAmount","_register","pemModel","issues","recommendations","registers","totalRevenue","performanceData","stats","todayRevenue","merchants_exports","MerchantsResource","init_merchants","_MerchantsResource","merchantId","merchant","address","vatValidation","nameValidation","passwordValidation","addressValidation","vatNumber","name","digit","fiscalId","zipCode","formattedAddress","missingFields","completenessScore","totalFields","registrationDate","businessAge","complianceStatus","addressPart","c","regionProvinces","province","regions","region","provinces","pems_exports","PEMsResource","init_pems","_PEMsResource","posId","certificates","_posId","_certificateType","addressErrors","root","cert","intermediate","leaf","validationResults","expiredCerts","revokedCerts","hasRoot","hasLeaf","deviceCert","thirtyDaysFromNow","earliestExpiry","a","expiringSoon","expiryDate","lastAuditDate","sixMonthsAgo","level","daysUntilExpiry","issuerCert","urgency","CircuitBreaker","operationName","timeoutPromise","_","reject","newState","reason","oldState","failureRate","RetryHandler","lastError","nextDelay","retryAttempt","errorCode","_attempt","baseDelay","err","networkErrorCodes","ms","resolve","totalDelay","DEFAULT_RETRY_CONFIG","AGGRESSIVE_RETRY_CONFIG","CONSERVATIVE_RETRY_CONFIG","MiddlewareStack","middleware","m","currentContext","currentResponse","currentError","middlewareError","AuthenticationMiddleware","getToken","token","RequestIdMiddleware","UserAgentMiddleware","userAgent","ContentTypeMiddleware","LoggingMiddleware","logger","logData","logLevel","sanitized","header","k","body","sensitiveFields","field","RateLimitingMiddleware","windowStart","recentRequests","time","PerformanceMiddleware","duration","existing","HttpClient","EventEmitter","msg","meta","startTime","executeRequest","processedContext","processedResponse","timeoutOverride","timeout","controller","timeoutId","fetchOptions","endTime","contentType","responseContext","path","updates","DEFAULT_HTTP_CONFIG","AUTH_HTTP_CONFIG","DEFAULT_SDK_CONFIG","ACubeSDK","userConfig","type","baseConfig","baseUrl","event","healthStatus","newConfig","createACubeSDK","createReceiptId","id","createCashierId","createPEMId","createMerchantId","createCashRegisterId","createSerialNumber","sn","createFiscalId","createDocumentNumber","dn","createAmount","createVATRate","rate","createQuantity","qty","isReceiptId","isCashierId","isFiscalId","isAmount","initializeSandboxSDK","initializeProductionSDK","initializeDevelopmentSDK","SDK_VERSION","API_VERSION","index_default"],"mappings":"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","file":"index.cjs","sourcesContent":["/**\n * Enterprise-grade error handling system\n * Hierarchical error types with retry logic and audit information\n */\n\n// Base error class with audit information\nexport abstract class ACubeSDKError extends Error {\n  public readonly timestamp: Date;\n  public readonly requestId: string;\n  public readonly operation: string;\n  public readonly retryable: boolean;\n  public readonly statusCode?: number;\n  public readonly auditInfo?: AuditInfo;\n  public readonly cause?: Error;\n\n  constructor(\n    message: string,\n    public readonly code: string,\n    options: {\n      operation: string;\n      retryable?: boolean;\n      statusCode?: number;\n      requestId?: string;\n      auditInfo?: AuditInfo;\n      cause?: Error;\n    }\n  ) {\n    super(message);\n    if (options.cause) {\n      this.cause = options.cause;\n    }\n    this.name = this.constructor.name;\n    this.timestamp = new Date();\n    this.requestId = options.requestId ?? generateRequestId();\n    this.operation = options.operation;\n    this.retryable = options.retryable ?? false;\n    if (options.statusCode !== undefined) {\n      this.statusCode = options.statusCode;\n    }\n    if (options.auditInfo !== undefined) {\n      this.auditInfo = options.auditInfo;\n    }\n\n    // Ensure proper prototype chain\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  toJSON(): Record<string, unknown> {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      operation: this.operation,\n      retryable: this.retryable,\n      statusCode: this.statusCode,\n      timestamp: this.timestamp.toISOString(),\n      requestId: this.requestId,\n      auditInfo: this.auditInfo,\n      stack: this.stack,\n    };\n  }\n}\n\n// Audit information for compliance\nexport interface AuditInfo {\n  userId?: string;\n  role?: 'provider' | 'merchant' | 'cashier';\n  fiscalId?: string;\n  receiptId?: string;\n  pemId?: string;\n  ipAddress?: string;\n  userAgent?: string;\n}\n\n// Network-related errors (usually retryable)\nexport class NetworkError extends ACubeSDKError {\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      statusCode?: number;\n      requestId?: string;\n      retryable?: boolean;\n      cause?: Error;\n    } = {}\n  ) {\n    super(message, 'NETWORK_ERROR', {\n      operation,\n      retryable: options.retryable ?? true,\n      ...(options.statusCode !== undefined && { statusCode: options.statusCode }),\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.cause !== undefined && { cause: options.cause }),\n    });\n  }\n}\n\n// Authentication/Authorization errors (not retryable)\nexport class AuthenticationError extends ACubeSDKError {\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      statusCode?: number;\n      requestId?: string;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(message, 'AUTHENTICATION_ERROR', {\n      operation,\n      retryable: false,\n      statusCode: options.statusCode ?? 401,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n    });\n  }\n}\n\n// Authorization errors (not retryable)\nexport class AuthorizationError extends ACubeSDKError {\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      statusCode?: number;\n      requestId?: string;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(message, 'AUTHORIZATION_ERROR', {\n      operation,\n      retryable: false,\n      statusCode: options.statusCode ?? 403,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n    });\n  }\n}\n\n// Validation errors (not retryable)\nexport class ValidationError extends ACubeSDKError {\n  public readonly violations: ValidationViolation[];\n\n  constructor(\n    message: string,\n    operation: string,\n    violations: ValidationViolation[],\n    options: {\n      requestId?: string;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(message, 'VALIDATION_ERROR', {\n      operation,\n      retryable: false,\n      statusCode: 422,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n    });\n    this.violations = violations;\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      violations: this.violations,\n    };\n  }\n}\n\nexport interface ValidationViolation {\n  field: string;\n  message: string;\n  code: string;\n  value?: unknown;\n}\n\n// Fiscal/compliance specific errors (usually not retryable)\nexport class FiscalError extends ACubeSDKError {\n  public readonly fiscalCode?: string;\n  public readonly documentNumber?: string;\n\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      fiscalCode?: string;\n      documentNumber?: string;\n      statusCode?: number;\n      requestId?: string;\n      retryable?: boolean;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(message, 'FISCAL_ERROR', {\n      operation,\n      retryable: options.retryable ?? false,\n      statusCode: options.statusCode ?? 400,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n    });\n    if (options.fiscalCode !== undefined) {\n      this.fiscalCode = options.fiscalCode;\n    }\n    if (options.documentNumber !== undefined) {\n      this.documentNumber = options.documentNumber;\n    }\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      fiscalCode: this.fiscalCode,\n      documentNumber: this.documentNumber,\n    };\n  }\n}\n\n// Rate limiting errors (retryable)\nexport class RateLimitError extends ACubeSDKError {\n  public readonly retryAfter?: number;\n\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      retryAfter?: number;\n      requestId?: string;\n    } = {}\n  ) {\n    super(message, 'RATE_LIMIT_ERROR', {\n      operation,\n      retryable: true,\n      statusCode: 429,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n    });\n    if (options.retryAfter !== undefined) {\n      this.retryAfter = options.retryAfter;\n    }\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      retryAfter: this.retryAfter,\n    };\n  }\n}\n\n// Configuration errors (not retryable)\nexport class ConfigurationError extends ACubeSDKError {\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      requestId?: string;\n    } = {}\n  ) {\n    super(message, 'CONFIGURATION_ERROR', {\n      operation,\n      retryable: false,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n    });\n  }\n}\n\n// Resource not found errors (not retryable)\nexport class NotFoundError extends ACubeSDKError {\n  public readonly resourceType: string;\n  public readonly resourceId: string;\n\n  constructor(\n    resourceType: string,\n    resourceId: string,\n    operation: string,\n    options: {\n      requestId?: string;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(\n      `${resourceType} with id ${resourceId} not found`,\n      'NOT_FOUND_ERROR',\n      {\n        operation,\n        retryable: false,\n        statusCode: 404,\n        ...(options.requestId !== undefined && { requestId: options.requestId }),\n        ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n      }\n    );\n    this.resourceType = resourceType;\n    this.resourceId = resourceId;\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      resourceType: this.resourceType,\n      resourceId: this.resourceId,\n    };\n  }\n}\n\n// Circuit breaker errors (retryable)\nexport class CircuitBreakerError extends ACubeSDKError {\n  public readonly state: 'OPEN' | 'HALF_OPEN';\n\n  constructor(\n    message: string,\n    operation: string,\n    state: 'OPEN' | 'HALF_OPEN',\n    options: {\n      requestId?: string;\n    } = {}\n  ) {\n    super(message, 'CIRCUIT_BREAKER_ERROR', {\n      operation,\n      retryable: true,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n    });\n    this.state = state;\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      state: this.state,\n    };\n  }\n}\n\n// Utility functions\nfunction generateRequestId(): string {\n  return `req_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;\n}\n\n// Error factory for creating errors from HTTP responses\nexport function createErrorFromResponse(\n  response: {\n    status: number;\n    statusText: string;\n    data?: unknown;\n  },\n  operation: string,\n  requestId?: string\n): ACubeSDKError {\n  const message = getErrorMessage(response.data) || response.statusText;\n\n  switch (response.status) {\n    case 401:\n      return new AuthenticationError(message, operation, {\n        statusCode: response.status,\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 403:\n      return new AuthorizationError(message, operation, {\n        statusCode: response.status,\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 404:\n      // Try to extract resource info from error data\n      const resourceType = extractResourceType(response.data);\n      const resourceId = extractResourceId(response.data);\n      if (resourceType && resourceId) {\n        return new NotFoundError(resourceType, resourceId, operation, {\n          ...(requestId !== undefined && { requestId }),\n        });\n      }\n      // Create a concrete NotFoundError for generic 404s\n      return new NotFoundError('Resource', 'unknown', operation, {\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 422:\n      const violations = extractValidationViolations(response.data);\n      return new ValidationError(message, operation, violations, {\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 429:\n      const retryAfter = extractRetryAfter(response.data);\n      return new RateLimitError(message, operation, {\n        ...(retryAfter !== undefined && { retryAfter }),\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 500:\n    case 502:\n    case 503:\n    case 504:\n      return new NetworkError(message, operation, {\n        statusCode: response.status,\n        ...(requestId !== undefined && { requestId }),\n        retryable: true,\n      });\n    default:\n      return new NetworkError(message, operation, {\n        statusCode: response.status,\n        ...(requestId !== undefined && { requestId }),\n        retryable: response.status >= 500,\n      });\n  }\n}\n\n// Helper functions for extracting error details\nfunction getErrorMessage(data: unknown): string | null {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    return (obj.message as string) || (obj.detail as string) || null;\n  }\n  return null;\n}\n\nfunction extractResourceType(data: unknown): string | null {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    return obj.resourceType as string || null;\n  }\n  return null;\n}\n\nfunction extractResourceId(data: unknown): string | null {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    return obj.resourceId as string || null;\n  }\n  return null;\n}\n\nfunction extractValidationViolations(data: unknown): ValidationViolation[] {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    if (Array.isArray(obj.violations)) {\n      return obj.violations.map((v: any) => ({\n        field: v.propertyPath || v.field || 'unknown',\n        message: v.message || 'Validation failed',\n        code: v.code || 'VALIDATION_FAILED',\n        value: v.value,\n      }));\n    }\n    if (Array.isArray(obj.detail)) {\n      return obj.detail.map((v: any) => ({\n        field: v.loc?.join('.') || 'unknown',\n        message: v.msg || 'Validation failed',\n        code: v.type || 'VALIDATION_FAILED',\n        value: v.input,\n      }));\n    }\n  }\n  return [];\n}\n\nfunction extractRetryAfter(data: unknown): number | undefined {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    const retryAfter = obj.retryAfter || obj.retry_after;\n    return typeof retryAfter === 'number' ? retryAfter : undefined;\n  }\n  return undefined;\n}","/**\n * Generated Endpoint Definitions from OpenAPI Specification\n * Comprehensive endpoint configurations for all API resources\n * \n * This file is auto-generated based on openapi.yaml\n * Do not edit manually - use regeneration scripts instead\n */\n\nexport type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n\nexport interface EndpointDefinition {\n  path: string;\n  method: HttpMethod;\n  operationId: string;\n  summary?: string;\n  description?: string;\n  tags: string[];\n  security?: Array<Record<string, string[]>>;\n  parameters?: {\n    path?: Record<string, string>;\n    query?: Record<string, string>;\n    header?: Record<string, string>;\n  };\n  requestBody?: {\n    required: boolean;\n    contentType: string;\n    schema: string;\n  };\n  responses: {\n    [statusCode: string]: {\n      description: string;\n      contentType?: string;\n      schema?: string;\n    };\n  };\n  metadata?: {\n    resource: string;\n    operation: string;\n    authRequired: boolean;\n    retryable: boolean;\n  };\n}\n\n/**\n * Cashier Endpoints - User account management for cashiers\n */\nexport class CashierEndpoints {\n  static readonly LIST: EndpointDefinition = {\n    path: '/mf1/cashiers',\n    method: 'GET',\n    operationId: 'read_cashiers_mf1_cashiers_get',\n    summary: 'Read Cashiers',\n    description: 'Get a paginated list of cashiers',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      query: {\n        page: 'integer',\n        size: 'integer'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_Page__T_Customized_CashierOutput_'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly CREATE: EndpointDefinition = {\n    path: '/mf1/cashiers',\n    method: 'POST',\n    operationId: 'create_cashier_mf1_cashiers_post',\n    summary: 'Create Cashier',\n    description: 'Create a new cashier account',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_CashierCreateInput'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashierOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'create',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly ME: EndpointDefinition = {\n    path: '/mf1/cashiers/me',\n    method: 'GET',\n    operationId: 'read_cashier_me_mf1_cashiers_me_get',\n    summary: 'Read Cashier Me',\n    description: 'Read currently authenticated cashier\\'s information',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashierOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'me',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly GET_BY_ID: EndpointDefinition = {\n    path: '/mf1/cashiers/{cashier_id}',\n    method: 'GET',\n    operationId: 'read_cashier_by_id_mf1_cashiers__cashier_id__get',\n    summary: 'Read Cashier By Id',\n    description: 'Get a specific user by id',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        cashier_id: 'integer'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashierOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly DELETE: EndpointDefinition = {\n    path: '/mf1/cashiers/{cashier_id}',\n    method: 'DELETE',\n    operationId: 'delete_cashier_mf1_cashiers__cashier_id__delete',\n    summary: 'Delete Cashier',\n    description: 'Delete a cashier',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        cashier_id: 'integer'\n      }\n    },\n    responses: {\n      '204': {\n        description: 'Successful Response'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'delete',\n      authRequired: true,\n      retryable: false\n    }\n  };\n}\n\n/**\n * Point of Sales Endpoints - PEM device management\n */\nexport class PointOfSalesEndpoints {\n  static readonly LIST: EndpointDefinition = {\n    path: '/mf1/point-of-sales',\n    method: 'GET',\n    operationId: 'read_point_of_sales_mf1_point_of_sales_get',\n    summary: 'Read Point Of Sales',\n    description: 'Retrieve PEMs',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_Page__T_Customized_PointOfSaleOutput_'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly GET_BY_SERIAL: EndpointDefinition = {\n    path: '/mf1/point-of-sales/{serial_number}',\n    method: 'GET',\n    operationId: 'read_point_of_sale_mf1_point_of_sales__serial_number__get',\n    summary: 'Read Point Of Sale',\n    description: 'Get a specific Point of Sale by serial number',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        serial_number: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_PointOfSaleOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly CLOSE_JOURNAL: EndpointDefinition = {\n    path: '/mf1/point-of-sales/close',\n    method: 'POST',\n    operationId: 'close_journal_mf1_point_of_sales_close_post',\n    summary: 'Close Journal',\n    description: 'Close the daily journal for Point of Sales',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_CloseJournalRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CloseJournalOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'close_journal',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly ACTIVATION: EndpointDefinition = {\n    path: '/mf1/point-of-sales/{serial_number}/activation',\n    method: 'POST',\n    operationId: 'post_activation_mf1_point_of_sales__serial_number__activation_post',\n    summary: 'Post Activation',\n    description: 'Trigger the activation process of a Point of Sale by requesting a certificate to the Italian Tax Agency',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        serial_number: 'string'\n      }\n    },\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_ActivationRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ActivationOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'activation',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly CREATE_INACTIVITY: EndpointDefinition = {\n    path: '/mf1/point-of-sales/{serial_number}/inactivity',\n    method: 'POST',\n    operationId: 'create_inactivity_period_mf1_point_of_sales__serial_number__inactivity_post',\n    summary: 'Create Inactivity Period',\n    description: 'Create a new inactivity period',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        serial_number: 'string'\n      }\n    },\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_InactivityRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'create_inactivity',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly SET_OFFLINE: EndpointDefinition = {\n    path: '/mf1/point-of-sales/{serial_number}/status/offline',\n    method: 'POST',\n    operationId: 'post_offline_mf1_point_of_sales__serial_number__status_offline_post',\n    summary: 'Post Offline',\n    description: 'Change the state of the Point of Sale to \\'offline\\'',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        serial_number: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'set_offline',\n      authRequired: true,\n      retryable: false\n    }\n  };\n}\n\n/**\n * Receipt Endpoints - Electronic receipt management\n */\nexport class ReceiptEndpoints {\n  static readonly LIST: EndpointDefinition = {\n    path: '/mf1/receipts',\n    method: 'GET',\n    operationId: 'get_receipts_mf1_receipts_get',\n    summary: 'Get Receipts',\n    description: 'Get a list of electronic receipts',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      query: {\n        page: 'integer',\n        size: 'integer',\n        start_date: 'string',\n        end_date: 'string',\n        serial_number: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_Page__T_Customized_ReceiptOutput_'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly CREATE: EndpointDefinition = {\n    path: '/mf1/receipts',\n    method: 'POST',\n    operationId: 'create_receipt_mf1_receipts_post',\n    summary: 'Create Receipt',\n    description: 'Create a new electronic receipt',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_ReceiptInput'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'create',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly VOID: EndpointDefinition = {\n    path: '/mf1/receipts',\n    method: 'DELETE',\n    operationId: 'void_receipt_mf1_receipts_delete',\n    summary: 'Void Receipt',\n    description: 'Void an electronic receipt',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_VoidReceiptRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_VoidReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'void',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly GET_BY_UUID: EndpointDefinition = {\n    path: '/mf1/receipts/{receipt_uuid}',\n    method: 'GET',\n    operationId: 'get_receipt_mf1_receipts__receipt_uuid__get',\n    summary: 'Get Receipt',\n    description: 'Get an electronic receipt',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        receipt_uuid: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly VOID_WITH_PROOF: EndpointDefinition = {\n    path: '/mf1/receipts/void-with-proof',\n    method: 'DELETE',\n    operationId: 'void_receipt_via_proof_mf1_receipts_void_with_proof_delete',\n    summary: 'Void Receipt Via Proof',\n    description: 'Void an electronic receipt identified by a proof of purchase',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_VoidReceiptWithProofRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_VoidReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'void_with_proof',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly GET_DETAILS: EndpointDefinition = {\n    path: '/mf1/receipts/{receipt_uuid}/details',\n    method: 'GET',\n    operationId: 'get_receipt_details_mf1_receipts__receipt_uuid__details_get',\n    summary: 'Get Receipt Details',\n    description: 'Get the details or the PDF of an electronic receipt',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        receipt_uuid: 'string'\n      },\n      header: {\n        Accept: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'get_details',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly RETURN_ITEMS: EndpointDefinition = {\n    path: '/mf1/receipts/return',\n    method: 'POST',\n    operationId: 'return_receipt_items_mf1_receipts_return_post',\n    summary: 'Return Receipt Items',\n    description: 'Return items from an electronic receipt (same PEM or other PEM)',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_ReturnRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'return_items',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly RETURN_ITEMS_WITH_PROOF: EndpointDefinition = {\n    path: '/mf1/receipts/return-with-proof',\n    method: 'POST',\n    operationId: 'return_receipt_items_via_proof_mf1_receipts_return_with_proof_post',\n    summary: 'Return Receipt Items Via Proof',\n    description: 'Return items from an electronic receipt identified by a proof of purchase',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_ReturnWithProofRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'return_items_with_proof',\n      authRequired: true,\n      retryable: false\n    }\n  };\n}\n\n/**\n * Cash Register Endpoints - Cash register management\n */\nexport class CashRegisterEndpoints {\n  static readonly CREATE: EndpointDefinition = {\n    path: '/mf1/cash-register',\n    method: 'POST',\n    operationId: 'create_cash_register_mf1_cash_register_post',\n    summary: 'Create Cash Register',\n    description: 'Create a new cash register',\n    tags: ['Cash Register'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_CashRegisterInput'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashRegisterOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cash-registers',\n      operation: 'create',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly LIST: EndpointDefinition = {\n    path: '/mf1/cash-register',\n    method: 'GET',\n    operationId: 'get_cash_registers_mf1_cash_register_get',\n    summary: 'Get Cash Registers',\n    description: 'Get a list of cash registers',\n    tags: ['Cash Register'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_Page__T_Customized_CashRegisterOutput_'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'cash-registers',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly GET_BY_ID: EndpointDefinition = {\n    path: '/mf1/cash-register/{id}',\n    method: 'GET',\n    operationId: 'get_cash_register_mf1_cash_register__id__get',\n    summary: 'Get Cash Register',\n    description: 'Get a specific cash register by ID',\n    tags: ['Cash Register'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        id: 'integer'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashRegisterOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'cash-registers',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n}\n\n/**\n * Merchant Endpoints - Business entity management\n */\nexport class MerchantEndpoints {\n  static readonly LIST: EndpointDefinition = {\n    path: '/merchants',\n    method: 'GET',\n    operationId: 'api_merchants_get_collection',\n    summary: 'Get Merchants',\n    description: 'Get a list of merchants',\n    tags: ['Merchant'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'merchants',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly CREATE: EndpointDefinition = {\n    path: '/merchants',\n    method: 'POST',\n    operationId: 'api_merchants_post',\n    summary: 'Create Merchant',\n    description: 'Create a new merchant',\n    tags: ['Merchant'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'Merchant-create'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'Merchant-read'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'merchants',\n      operation: 'create',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly GET_BY_UUID: EndpointDefinition = {\n    path: '/merchants/{uuid}',\n    method: 'GET',\n    operationId: 'api_merchants_uuid_get',\n    summary: 'Get Merchant',\n    description: 'Get a specific merchant by UUID',\n    tags: ['Merchant'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        uuid: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'Merchant-read'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'merchants',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly UPDATE: EndpointDefinition = {\n    path: '/merchants/{uuid}',\n    method: 'PUT',\n    operationId: 'api_merchants_uuid_put',\n    summary: 'Update Merchant',\n    description: 'Update a merchant',\n    tags: ['Merchant'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        uuid: 'string'\n      }\n    },\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'Merchant-update'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'Merchant-read'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'merchants',\n      operation: 'update',\n      authRequired: true,\n      retryable: false\n    }\n  };\n}\n\n/**\n * PEM Endpoints - Point of Sale Module certificate management\n */\nexport class PEMEndpoints {\n  static readonly CREATE_POS: EndpointDefinition = {\n    path: '/point-of-sales',\n    method: 'POST',\n    operationId: 'api_point-of-sales_post',\n    summary: 'Create Point of Sale',\n    description: 'Create a new Point of Sale',\n    tags: ['Pem'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'PointOfSale-create'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'PointOfSale-read'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'pems',\n      operation: 'create_pos',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly GET_CERTIFICATES: EndpointDefinition = {\n    path: '/point-of-sales/{id}/certificates',\n    method: 'GET',\n    operationId: 'api_point-of-sales_idcertificates_get',\n    summary: 'Get PEM Certificates',\n    description: 'Get certificates for a Point of Sale',\n    tags: ['Pem'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        id: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'pems',\n      operation: 'get_certificates',\n      authRequired: true,\n      retryable: true\n    }\n  };\n}\n\n/**\n * Utility class for endpoint operations\n */\nexport class EndpointUtils {\n  /**\n   * Get all endpoints for a specific resource\n   */\n  static getResourceEndpoints(resource: string): EndpointDefinition[] {\n    switch (resource.toLowerCase()) {\n      case 'cashiers':\n        return Object.values(CashierEndpoints);\n      case 'point-of-sales':\n        return Object.values(PointOfSalesEndpoints);\n      case 'receipts':\n        return Object.values(ReceiptEndpoints);\n      case 'cash-registers':\n        return Object.values(CashRegisterEndpoints);\n      case 'merchants':\n        return Object.values(MerchantEndpoints);\n      case 'pems':\n        return Object.values(PEMEndpoints);\n      default:\n        return [];\n    }\n  }\n\n  /**\n   * Find endpoint by operation ID\n   */\n  static findEndpointByOperationId(operationId: string): EndpointDefinition | null {\n    const allClasses = [\n      CashierEndpoints,\n      PointOfSalesEndpoints,\n      ReceiptEndpoints,\n      CashRegisterEndpoints,\n      MerchantEndpoints,\n      PEMEndpoints,\n    ];\n\n    for (const endpointClass of allClasses) {\n      for (const endpoint of Object.values(endpointClass)) {\n        if (endpoint.operationId === operationId) {\n          return endpoint;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Build URL with path parameters\n   */\n  static buildUrl(endpoint: EndpointDefinition, pathParams: Record<string, string | number> = {}): string {\n    let url = endpoint.path;\n    \n    for (const [key, value] of Object.entries(pathParams)) {\n      url = url.replace(`{${key}}`, String(value));\n    }\n    \n    return url;\n  }\n\n  /**\n   * Check if endpoint requires authentication\n   */\n  static requiresAuth(endpoint: EndpointDefinition): boolean {\n    return endpoint.metadata?.authRequired ?? false;\n  }\n\n  /**\n   * Check if endpoint operation is retryable\n   */\n  static isRetryable(endpoint: EndpointDefinition): boolean {\n    return endpoint.metadata?.retryable ?? false;\n  }\n\n  /**\n   * Get expected content type for request body\n   */\n  static getRequestContentType(endpoint: EndpointDefinition): string | null {\n    return endpoint.requestBody?.contentType ?? null;\n  }\n\n  /**\n   * Get expected response content type\n   */\n  static getResponseContentType(endpoint: EndpointDefinition, statusCode: string): string | null {\n    return endpoint.responses[statusCode]?.contentType ?? null;\n  }\n}","/**\n * Base OpenAPI Resource Class\n * Enterprise-grade foundation for all API resources with full type safety\n * \n * Features:\n * - Type-safe request execution based on OpenAPI specification\n * - Automatic parameter binding (path, query, body)\n * - Schema validation and error handling\n * - Audit trail and metadata tracking\n * - Integration with existing HTTP client and middleware\n */\n\nimport type { HttpClient, RequestOptions as HttpRequestOptions } from '@/http/client';\nimport type { EndpointDefinition, HttpMethod } from '@/generated/endpoints';\nimport { EndpointUtils } from '@/generated/endpoints';\nimport { ValidationError, type ACubeSDKError } from '@/errors/index';\n\nexport interface BaseResourceConfig {\n  client: HttpClient;\n  endpoints: Record<string, EndpointDefinition>;\n}\n\nexport interface RequestOptions {\n  pathParams?: Record<string, string | number>;\n  queryParams?: Record<string, unknown>;\n  headers?: Record<string, string>;\n  metadata?: Record<string, unknown>;\n  skipRetry?: boolean;\n  skipCircuitBreaker?: boolean;\n  timeout?: number;\n}\n\nexport interface ValidationContext {\n  endpoint: EndpointDefinition;\n  operation: string;\n  data?: unknown;\n  pathParams?: Record<string, string | number>;\n  queryParams?: Record<string, unknown>;\n}\n\n/**\n * Abstract base class for all OpenAPI-based resources\n * Provides type-safe operations with comprehensive error handling and validation\n */\nexport abstract class BaseOpenAPIResource {\n  protected readonly client: HttpClient;\n  protected readonly endpoints: Record<string, EndpointDefinition>;\n\n  constructor(config: BaseResourceConfig) {\n    this.client = config.client;\n    this.endpoints = config.endpoints;\n  }\n\n  /**\n   * Execute a type-safe API request based on OpenAPI endpoint definition\n   * \n   * @template TRequest - Type of request data\n   * @template TResponse - Type of response data\n   * @param endpointKey - Key to identify the endpoint in the endpoints map\n   * @param data - Request body data (for POST/PUT/PATCH requests)\n   * @param options - Additional request options\n   * @returns Promise resolving to typed response data\n   */\n  protected async executeRequest<TRequest = unknown, TResponse = unknown>(\n    endpointKey: string,\n    data?: TRequest,\n    options: RequestOptions = {}\n  ): Promise<TResponse> {\n    const endpoint = this.endpoints[endpointKey];\n    if (!endpoint) {\n      throw new ValidationError(\n        `Unknown endpoint: ${endpointKey}`,\n        'execute_request',\n        [{ field: 'endpointKey', message: `Endpoint '${endpointKey}' not found`, code: 'UNKNOWN_ENDPOINT' }]\n      );\n    }\n\n    // Validate the request before execution\n    this.validateRequest({ endpoint, operation: endpointKey, data, ...options });\n\n    // Build the complete URL with path parameters\n    const url = this.buildRequestUrl(endpoint, options.pathParams);\n\n    // Prepare request options for HTTP client\n    const httpOptions: HttpRequestOptions = {\n      method: endpoint.method,\n      url,\n      data,\n      headers: {\n        ...this.getDefaultHeaders(endpoint),\n        ...options.headers,\n      },\n      metadata: {\n        operationId: endpoint.operationId,\n        resource: endpoint.metadata?.resource,\n        operation: endpoint.metadata?.operation,\n        ...options.metadata,\n      },\n      skipRetry: options.skipRetry ?? !EndpointUtils.isRetryable(endpoint),\n    };\n\n    // Add optional properties only if they have values\n    if (options.queryParams) {\n      httpOptions.params = options.queryParams;\n    }\n    if (options.timeout) {\n      httpOptions.timeout = options.timeout;\n    }\n    if (options.skipCircuitBreaker !== undefined) {\n      httpOptions.skipCircuitBreaker = options.skipCircuitBreaker;\n    }\n\n    try {\n      // Execute the HTTP request through the client\n      const response = await this.client.request<TResponse>(httpOptions);\n      \n      // Validate response if needed\n      this.validateResponse(endpoint, response.data);\n      \n      return response.data;\n    } catch (error) {\n      // Enhanced error handling with OpenAPI context\n      throw this.enhanceError(error as ACubeSDKError, endpoint, endpointKey, options);\n    }\n  }\n\n  /**\n   * Build complete request URL with path parameter substitution\n   */\n  private buildRequestUrl(endpoint: EndpointDefinition, pathParams: Record<string, string | number> = {}): string {\n    return EndpointUtils.buildUrl(endpoint, pathParams);\n  }\n\n  /**\n   * Get default headers based on endpoint requirements\n   */\n  private getDefaultHeaders(endpoint: EndpointDefinition): Record<string, string> {\n    const headers: Record<string, string> = {};\n\n    // Set content type for requests with body\n    if (endpoint.requestBody) {\n      headers['Content-Type'] = endpoint.requestBody.contentType;\n    }\n\n    // Set default accept header\n    const successResponse = endpoint.responses['200'] || endpoint.responses['201'];\n    if (successResponse?.contentType) {\n      headers['Accept'] = successResponse.contentType;\n    }\n\n    return headers;\n  }\n\n  /**\n   * Validate request data against OpenAPI specification\n   */\n  private validateRequest(context: ValidationContext): void {\n    const { endpoint, operation, data, pathParams, queryParams } = context;\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    // Validate required path parameters\n    if (endpoint.parameters?.path) {\n      for (const [paramName, paramType] of Object.entries(endpoint.parameters.path)) {\n        if (!pathParams || !(paramName in pathParams)) {\n          errors.push({\n            field: `path.${paramName}`,\n            message: `Required path parameter '${paramName}' is missing`,\n            code: 'MISSING_PATH_PARAM',\n          });\n        } else {\n          // Type validation for path parameters\n          const value = pathParams[paramName];\n          if (!this.validateParameterType(value, paramType)) {\n            errors.push({\n              field: `path.${paramName}`,\n              message: `Path parameter '${paramName}' must be of type ${paramType}`,\n              code: 'INVALID_PATH_PARAM_TYPE',\n            });\n          }\n        }\n      }\n    }\n\n    // Validate required request body\n    if (endpoint.requestBody?.required && !data) {\n      errors.push({\n        field: 'body',\n        message: 'Request body is required',\n        code: 'MISSING_BODY',\n      });\n    }\n\n    // Validate query parameters (basic type checking)\n    if (endpoint.parameters?.query && queryParams) {\n      for (const [paramName, paramType] of Object.entries(endpoint.parameters.query)) {\n        const value = queryParams[paramName];\n        if (value !== undefined && !this.validateParameterType(value, paramType)) {\n          errors.push({\n            field: `query.${paramName}`,\n            message: `Query parameter '${paramName}' must be of type ${paramType}`,\n            code: 'INVALID_QUERY_PARAM_TYPE',\n          });\n        }\n      }\n    }\n\n    if (errors.length > 0) {\n      throw new ValidationError(\n        `Request validation failed for operation '${operation}'`,\n        operation,\n        errors\n      );\n    }\n  }\n\n  /**\n   * Basic type validation for parameters\n   */\n  private validateParameterType(value: unknown, expectedType: string): boolean {\n    switch (expectedType) {\n      case 'string':\n        return typeof value === 'string';\n      case 'integer':\n      case 'number':\n        return typeof value === 'number' || (typeof value === 'string' && !isNaN(Number(value)));\n      case 'boolean':\n        return typeof value === 'boolean';\n      default:\n        return true; // Allow unknown types for now\n    }\n  }\n\n  /**\n   * Validate response data (can be extended for schema validation)\n   */\n  private validateResponse(endpoint: EndpointDefinition, data: unknown): void {\n    // Basic response validation - can be enhanced with JSON schema validation\n    if (data === null || data === undefined) {\n      // Check if null response is expected\n      const hasNullableResponse = Object.keys(endpoint.responses).some(code => \n        code === '204' || endpoint.responses[code]?.description?.toLowerCase().includes('no content')\n      );\n      \n      if (!hasNullableResponse) {\n        console.warn(`Received null/undefined response for ${endpoint.operationId}`);\n      }\n    }\n  }\n\n  /**\n   * Enhance errors with OpenAPI-specific context\n   */\n  private enhanceError(\n    error: ACubeSDKError,\n    endpoint: EndpointDefinition,\n    operation: string,\n    _options: RequestOptions\n  ): ACubeSDKError {\n    // Create enhanced error with additional context\n    const enhancedError = new (error.constructor as new (...args: any[]) => ACubeSDKError)(\n      error.message,\n      error.code,\n      {\n        operation: error.operation || endpoint.operationId,\n        retryable: error.retryable !== undefined ? error.retryable : EndpointUtils.isRetryable(endpoint),\n        statusCode: error.statusCode,\n        requestId: error.requestId,\n        auditInfo: {\n          ...error.auditInfo,\n          // Add OpenAPI-specific audit information\n          pemId: endpoint.metadata?.resource === 'point-of-sales' ? String(_options.pathParams?.serial_number || '') : error.auditInfo?.pemId,\n        },\n        cause: error.cause,\n      }\n    );\n\n    // Add a custom property for OpenAPI metadata (non-enumerable to avoid serialization issues)\n    Object.defineProperty(enhancedError, 'openapiMetadata', {\n      value: {\n        resource: endpoint.metadata?.resource,\n        endpointOperation: operation,\n        httpMethod: endpoint.method,\n        path: endpoint.path,\n      },\n      writable: false,\n      enumerable: false,\n      configurable: false,\n    });\n\n    return enhancedError;\n  }\n\n  /**\n   * Utility method to check if an operation is available\n   */\n  protected hasOperation(operationKey: string): boolean {\n    return operationKey in this.endpoints;\n  }\n\n  /**\n   * Get endpoint definition for an operation\n   */\n  protected getEndpoint(operationKey: string): EndpointDefinition | null {\n    return this.endpoints[operationKey] || null;\n  }\n\n  /**\n   * Get all available operations for this resource\n   */\n  protected getAvailableOperations(): string[] {\n    return Object.keys(this.endpoints);\n  }\n\n  /**\n   * Create a standardized error for missing operations\n   */\n  protected createUnsupportedOperationError(operation: string): ValidationError {\n    return new ValidationError(\n      `Operation '${operation}' is not supported by this resource`,\n      'unsupported_operation',\n      [{ \n        field: 'operation', \n        message: `Available operations: ${this.getAvailableOperations().join(', ')}`, \n        code: 'UNSUPPORTED_OPERATION' \n      }]\n    );\n  }\n\n  // Static utility methods for common patterns\n\n  /**\n   * Format validation errors for user-friendly display\n   */\n  static formatValidationErrors(errors: Array<{ field: string; message: string; code: string }>): string {\n    return errors.map(error => `${error.field}: ${error.message}`).join(', ');\n  }\n\n  /**\n   * Extract error details from API response\n   */\n  static extractErrorDetails(error: unknown): { message: string; details?: unknown } {\n    if (error instanceof ValidationError) {\n      return {\n        message: error.message,\n        details: error.violations,\n      };\n    }\n\n    if (error instanceof Error) {\n      return { message: error.message };\n    }\n\n    return { message: 'Unknown error occurred' };\n  }\n\n  /**\n   * Check if error indicates a temporary failure\n   */\n  static isTemporaryError(error: ACubeSDKError): boolean {\n    // Network errors are usually temporary\n    if (error.name === 'NetworkError') {\n      return true;\n    }\n\n    // Some HTTP status codes indicate temporary issues\n    if (error.statusCode) {\n      return [429, 500, 502, 503, 504].includes(error.statusCode);\n    }\n\n    return error.retryable ?? false;\n  }\n\n  /**\n   * Get retry delay for temporary errors\n   */\n  static getRetryDelay(_error: ACubeSDKError, attempt: number): number {\n    // Exponential backoff with jitter\n    const baseDelay = 1000; // 1 second\n    const maxDelay = 30000; // 30 seconds\n    \n    let delay = Math.min(baseDelay * Math.pow(2, attempt - 1), maxDelay);\n    \n    // Add jitter (±25%)\n    const jitter = delay * 0.25;\n    delay += (Math.random() * 2 - 1) * jitter;\n    \n    return Math.floor(delay);\n  }\n}\n\n/**\n * Type-safe endpoint builder for dynamic endpoint creation\n */\nexport class EndpointBuilder {\n  private definition: Partial<EndpointDefinition> = {};\n\n  constructor(path: string, method: HttpMethod) {\n    this.definition = {\n      path,\n      method,\n      tags: [],\n      responses: {},\n    };\n  }\n\n  operationId(id: string): this {\n    this.definition.operationId = id;\n    return this;\n  }\n\n  summary(text: string): this {\n    this.definition.summary = text;\n    return this;\n  }\n\n  description(text: string): this {\n    this.definition.description = text;\n    return this;\n  }\n\n  tag(name: string): this {\n    this.definition.tags = [...(this.definition.tags || []), name];\n    return this;\n  }\n\n  requireAuth(): this {\n    this.definition.security = [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }];\n    return this;\n  }\n\n  pathParam(name: string, type: string): this {\n    if (!this.definition.parameters) {\n      this.definition.parameters = {};\n    }\n    if (!this.definition.parameters.path) {\n      this.definition.parameters.path = {};\n    }\n    this.definition.parameters.path[name] = type;\n    return this;\n  }\n\n  queryParam(name: string, type: string): this {\n    if (!this.definition.parameters) {\n      this.definition.parameters = {};\n    }\n    if (!this.definition.parameters.query) {\n      this.definition.parameters.query = {};\n    }\n    this.definition.parameters.query[name] = type;\n    return this;\n  }\n\n  requestBody(schema: string, required = true): this {\n    this.definition.requestBody = {\n      required,\n      contentType: 'application/json',\n      schema,\n    };\n    return this;\n  }\n\n  response(statusCode: string, description: string, schema?: string): this {\n    if (!this.definition.responses) {\n      this.definition.responses = {};\n    }\n    this.definition.responses[statusCode] = {\n      description,\n      ...(schema && { contentType: 'application/json', schema }),\n    };\n    return this;\n  }\n\n  metadata(resource: string, operation: string, authRequired = true, retryable = true): this {\n    this.definition.metadata = {\n      resource,\n      operation,\n      authRequired,\n      retryable,\n    };\n    return this;\n  }\n\n  build(): EndpointDefinition {\n    if (!this.definition.operationId) {\n      throw new Error('operationId is required');\n    }\n\n    return this.definition as EndpointDefinition;\n  }\n}","/**\n * Cashiers Resource - OpenAPI Implementation\n * Type-safe implementation based on OpenAPI specification\n * \n * Features:\n * - Full CRUD operations for cashier management\n * - Type-safe input/output with branded types\n * - Advanced validation and business logic\n * - Password security utilities\n * - Email management and formatting\n */\n\nimport { BaseOpenAPIResource } from '@/resources/base-openapi';\nimport { CashierEndpoints } from '@/generated/endpoints';\nimport type { HttpClient } from '@/http/client';\nimport type { CashierId } from '@/types/branded';\nimport type { components } from '@/types/generated';\nimport { ValidationError } from '@/errors/index';\n\n// Extract types from OpenAPI generated types\ntype CashierCreateInput = components['schemas']['E-Receipt_IT_API_CashierCreateInput'];\ntype CashierOutput = components['schemas']['E-Receipt_IT_API_CashierOutput'];\ntype CashierPage = components['schemas']['E-Receipt_IT_API_Page__T_Customized_CashierOutput_'];\n\nexport interface CashierListParams {\n  page?: number;\n  size?: number;\n}\n\nexport interface CashierValidationOptions {\n  enforceStrongPassword?: boolean;\n  allowedEmailDomains?: string[];\n  checkEmailUniqueness?: boolean;\n}\n\n/**\n * Cashiers Resource Class - OpenAPI Based\n * Manages cashier user accounts with full OpenAPI compliance\n */\nexport class CashiersResource extends BaseOpenAPIResource {\n  constructor(client: HttpClient) {\n    super({\n      client,\n      endpoints: {\n        list: CashierEndpoints.LIST,\n        create: CashierEndpoints.CREATE,\n        me: CashierEndpoints.ME,\n        getById: CashierEndpoints.GET_BY_ID,\n        delete: CashierEndpoints.DELETE,\n      }\n    });\n  }\n\n  /**\n   * Get a list of cashiers with pagination\n   * \n   * @param params - Pagination parameters\n   * @returns Promise resolving to paginated cashier list\n   */\n  async list(params?: CashierListParams): Promise<CashierPage> {\n    return this.executeRequest<void, CashierPage>('list', undefined, {\n      ...(params && { queryParams: params as Record<string, unknown> }),\n      metadata: {\n        operation: 'list_cashiers',\n      }\n    });\n  }\n\n  /**\n   * Create a new cashier\n   * \n   * @param data - Cashier creation input data\n   * @param options - Validation options\n   * @returns Promise resolving to created cashier\n   */\n  async create(\n    data: CashierCreateInput, \n    options: CashierValidationOptions = {}\n  ): Promise<CashierOutput> {\n    // Validate input with custom business rules\n    await this.validateCashierInput(data, options);\n\n    return this.executeRequest<CashierCreateInput, CashierOutput>('create', data, {\n      metadata: {\n        operation: 'create_cashier',\n        email: data.email,\n      }\n    });\n  }\n\n  /**\n   * Get current cashier information\n   * \n   * @returns Promise resolving to current cashier details\n   */\n  async me(): Promise<CashierOutput> {\n    return this.executeRequest<void, CashierOutput>('me', undefined, {\n      metadata: {\n        operation: 'get_current_cashier',\n      }\n    });\n  }\n\n  /**\n   * Get a specific cashier by ID\n   * \n   * @param cashierId - Cashier ID (branded or number)\n   * @returns Promise resolving to cashier details\n   */\n  async retrieve(cashierId: CashierId | number): Promise<CashierOutput> {\n    return this.executeRequest<void, CashierOutput>('getById', undefined, {\n      pathParams: { cashier_id: cashierId },\n      metadata: {\n        operation: 'get_cashier',\n        cashierId,\n      }\n    });\n  }\n\n  /**\n   * Delete a cashier\n   * \n   * @param cashierId - Cashier ID (branded or number)\n   * @returns Promise resolving when deletion is complete\n   */\n  async delete(cashierId: CashierId | number): Promise<void> {\n    return this.executeRequest<void, void>('delete', undefined, {\n      pathParams: { cashier_id: cashierId },\n      metadata: {\n        operation: 'delete_cashier',\n        cashierId,\n      }\n    });\n  }\n\n  /**\n   * Update a cashier's profile (future enhancement)\n   * Note: This endpoint is not yet available in the OpenAPI spec\n   */\n  async update(cashierId: CashierId | number, data: Partial<CashierCreateInput>): Promise<CashierOutput> {\n    if (!this.hasOperation('update')) {\n      throw this.createUnsupportedOperationError('update');\n    }\n    \n    return this.executeRequest<Partial<CashierCreateInput>, CashierOutput>('update', data, {\n      pathParams: { cashier_id: cashierId },\n      metadata: {\n        operation: 'update_cashier',\n        cashierId,\n      }\n    });\n  }\n\n  // Validation methods\n\n  /**\n   * Comprehensive cashier input validation\n   */\n  private async validateCashierInput(\n    data: CashierCreateInput, \n    options: CashierValidationOptions = {}\n  ): Promise<void> {\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    // Email validation\n    if (!data.email || !this.isValidEmail(data.email)) {\n      errors.push({\n        field: 'email',\n        message: 'Invalid email format',\n        code: 'INVALID_EMAIL'\n      });\n    } else {\n      // Domain validation if specified\n      if (options.allowedEmailDomains && options.allowedEmailDomains.length > 0) {\n        if (!CashiersResource.isAllowedEmailDomain(data.email, options.allowedEmailDomains)) {\n          errors.push({\n            field: 'email',\n            message: `Email domain not allowed. Allowed domains: ${options.allowedEmailDomains.join(', ')}`,\n            code: 'DOMAIN_NOT_ALLOWED'\n          });\n        }\n      }\n\n      // Email uniqueness check (if enabled and implemented)\n      if (options.checkEmailUniqueness) {\n        const isDuplicate = await this.checkEmailExists(data.email);\n        if (isDuplicate) {\n          errors.push({\n            field: 'email',\n            message: 'Email address is already in use',\n            code: 'EMAIL_EXISTS'\n          });\n        }\n      }\n    }\n\n    // Password validation\n    const passwordCheck = CashiersResource.checkPasswordStrength(data.password);\n    if (!passwordCheck.isValid) {\n      if (options.enforceStrongPassword) {\n        errors.push({\n          field: 'password',\n          message: passwordCheck.message || 'Password does not meet security requirements',\n          code: 'WEAK_PASSWORD'\n        });\n      } else {\n        // Just warn for weak passwords if not enforcing\n        console.warn(`Weak password detected for ${data.email}: ${passwordCheck.suggestions.join(', ')}`);\n      }\n    }\n\n    if (errors.length > 0) {\n      throw new ValidationError('Invalid cashier input', 'create_cashier', errors);\n    }\n  }\n\n  /**\n   * Check if email already exists (placeholder for future implementation)\n   */\n  private async checkEmailExists(email: string): Promise<boolean> {\n    // This would require a separate endpoint or database query\n    // For now, we'll return false as a placeholder\n    console.warn(`Email uniqueness check not implemented for: ${email}`);\n    return false;\n  }\n\n  /**\n   * Validate email format\n   */\n  private isValidEmail(email: string): boolean {\n    return CashiersResource.isValidEmail(email);\n  }\n\n  // Static utility methods\n\n  /**\n   * Validate email format (static utility)\n   */\n  static isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  /**\n   * Check password strength with detailed analysis\n   */\n  static checkPasswordStrength(password: string): {\n    isValid: boolean;\n    score: number;\n    message?: string;\n    suggestions: string[];\n  } {\n    const suggestions: string[] = [];\n    let score = 0;\n\n    // Length checks\n    if (password.length >= 8) score++;\n    if (password.length >= 12) score++;\n    if (password.length < 8) {\n      suggestions.push('Use at least 8 characters');\n    }\n\n    // Character variety checks\n    if (/[a-z]/.test(password)) score++;\n    else suggestions.push('Include lowercase letters');\n\n    if (/[A-Z]/.test(password)) score++;\n    else suggestions.push('Include uppercase letters');\n\n    if (/\\d/.test(password)) score++;\n    else suggestions.push('Include numbers');\n\n    if (/[^a-zA-Z0-9]/.test(password)) score++;\n    else suggestions.push('Include special characters');\n\n    // Common patterns to avoid\n    if (/(.)\\\\1{2,}/.test(password)) {\n      score--;\n      suggestions.push('Avoid repeating characters');\n    }\n\n    // Common passwords check\n    const commonPasswords = [\n      'password', 'password123', '12345678', 'qwerty', 'abc123', \n      'password1', '123456789', 'welcome', 'admin', 'letmein'\n    ];\n    \n    if (commonPasswords.some(common => password.toLowerCase().includes(common.toLowerCase()))) {\n      score = 0;\n      suggestions.push('Avoid common passwords');\n    }\n\n    // Dictionary word check (basic)\n    if (/^[a-zA-Z]+$/.test(password) && password.length < 12) {\n      score--;\n      suggestions.push('Avoid using only dictionary words');\n    }\n\n    const isValid = score >= 4 && password.length >= 8;\n    const message = isValid ? 'Strong password' : 'Password too weak';\n\n    return { isValid, score, message, suggestions };\n  }\n\n  /**\n   * Generate a secure password\n   */\n  static generateSecurePassword(length = 12): string {\n    const lowercase = 'abcdefghijklmnopqrstuvwxyz';\n    const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const numbers = '0123456789';\n    const symbols = '!@#$%^&*()_+-=[]{}|;:,.<>?';\n    \n    const allChars = lowercase + uppercase + numbers + symbols;\n    \n    // Ensure at least one character from each category\n    let password = '';\n    password += lowercase[Math.floor(Math.random() * lowercase.length)];\n    password += uppercase[Math.floor(Math.random() * uppercase.length)];\n    password += numbers[Math.floor(Math.random() * numbers.length)];\n    password += symbols[Math.floor(Math.random() * symbols.length)];\n    \n    // Fill the rest randomly\n    for (let i = password.length; i < length; i++) {\n      password += allChars[Math.floor(Math.random() * allChars.length)];\n    }\n    \n    // Shuffle the password\n    return password.split('').sort(() => Math.random() - 0.5).join('');\n  }\n\n  /**\n   * Format email for display (partial masking for privacy)\n   */\n  static formatEmailForDisplay(email: string): string {\n    const [localPart, domain] = email.split('@');\n    if (!localPart || !domain) return email;\n\n    if (localPart.length <= 3) {\n      return `${localPart[0]}**@${domain}`;\n    }\n\n    const visibleChars = Math.min(3, Math.floor(localPart.length / 2));\n    const maskedPart = '*'.repeat(localPart.length - visibleChars);\n    \n    return `${localPart.substring(0, visibleChars)}${maskedPart}@${domain}`;\n  }\n\n  /**\n   * Extract domain from email\n   */\n  static getEmailDomain(email: string): string | null {\n    const parts = email.split('@');\n    return parts.length === 2 ? parts[1] || null : null;\n  }\n\n  /**\n   * Validate email domain against allowed domains\n   */\n  static isAllowedEmailDomain(email: string, allowedDomains: string[]): boolean {\n    const domain = this.getEmailDomain(email);\n    return domain ? allowedDomains.includes(domain.toLowerCase()) : false;\n  }\n\n  /**\n   * Generate username suggestion from email\n   */\n  static generateUsername(email: string): string {\n    const [localPart] = email.split('@');\n    if (!localPart) return 'user';\n    \n    // Clean up the local part for username\n    return localPart\n      .toLowerCase()\n      .replace(/[^a-z0-9]/g, '')\n      .substring(0, 20);\n  }\n\n  /**\n   * Validate cashier creation rate limits (placeholder for future implementation)\n   */\n  static checkCreationRateLimit(ipAddress: string): boolean {\n    // This would check against a rate limiting service\n    console.warn(`Rate limit check not implemented for IP: ${ipAddress}`);\n    return true; // Allow by default\n  }\n\n  /**\n   * Get cashier role permissions (placeholder for future implementation)\n   */\n  static getCashierPermissions(): string[] {\n    return [\n      'create_receipt',\n      'view_receipts',\n      'void_receipt',\n      'return_items',\n      'view_daily_summary',\n    ];\n  }\n\n  /**\n   * Format cashier for display in UI\n   */\n  static formatCashierForDisplay(cashier: CashierOutput): {\n    displayName: string;\n    maskedEmail: string;\n    status: string;\n    permissions: string[];\n  } {\n    return {\n      displayName: cashier.email.split('@')[0] || 'Unknown',\n      maskedEmail: this.formatEmailForDisplay(cashier.email),\n      status: 'active', // This would come from the API response\n      permissions: this.getCashierPermissions(),\n    };\n  }\n\n  /**\n   * Validate cashier session (placeholder for future implementation)\n   */\n  static validateCashierSession(cashierId: CashierId | number): Promise<boolean> {\n    // This would validate against the authentication service\n    console.warn(`Session validation not implemented for cashier: ${cashierId}`);\n    return Promise.resolve(true);\n  }\n}\n\n// Re-export for convenience\nexport { CashiersResource as Cashiers };\n\n// Export types for external use\nexport type {\n  CashierCreateInput,\n  CashierOutput,\n  CashierPage,\n};","/**\n * Receipts Resource - OpenAPI Implementation\n * Type-safe implementation for electronic receipt management\n * \n * Features:\n * - Complete electronic receipt lifecycle management\n * - Type-safe input/output with branded types\n * - Advanced validation for Italian fiscal requirements\n * - Receipt item calculations and VAT handling\n * - PDF generation and details retrieval\n * - Return and void operations\n */\n\nimport { BaseOpenAPIResource } from '@/resources/base-openapi';\nimport { ReceiptEndpoints } from '@/generated/endpoints';\nimport type { HttpClient } from '@/http/client';\nimport type { ReceiptId, Amount } from '@/types/branded';\nimport type { components } from '@/types/generated';\nimport { ValidationError } from '@/errors/index';\n\n// Extract types from OpenAPI generated types\ntype ReceiptInput = components['schemas']['E-Receipt_IT_API_ReceiptInput'];\ntype ReceiptOutput = components['schemas']['E-Receipt_IT_API_ReceiptOutput'];\ntype ReceiptPage = components['schemas']['E-Receipt_IT_API_Page__T_Customized_ReceiptOutput_'];\ntype VoidReceiptRequest = components['schemas']['E-Receipt_IT_API_ReceiptReturnOrVoidViaPEMInput'];\ntype VoidReceiptOutput = ReceiptOutput; // Returns standard receipt output\ntype VoidReceiptWithProofRequest = components['schemas']['E-Receipt_IT_API_ReceiptReturnOrVoidWithProofInput'];\ntype ReturnRequest = components['schemas']['E-Receipt_IT_API_ReceiptReturnOrVoidViaPEMInput'];\ntype ReturnWithProofRequest = components['schemas']['E-Receipt_IT_API_ReceiptReturnOrVoidWithProofInput'];\n\nexport interface ReceiptListParams {\n  page?: number | undefined;\n  size?: number | undefined;\n  start_date?: string | undefined;\n  end_date?: string | undefined;\n  serial_number?: string | undefined;\n}\n\nexport interface ReceiptValidationOptions {\n  validateVATRates?: boolean;\n  checkTotalCalculations?: boolean;\n  enforceItalianFiscalRules?: boolean;\n  maxReceiptItems?: number;\n}\n\nexport interface ReceiptCalculationResult {\n  subtotal: Amount;\n  vatAmount: Amount;\n  totalAmount: Amount;\n  discountAmount: Amount;\n  itemCount: number;\n  breakdown: {\n    vatRate: string;\n    netAmount: Amount;\n    vatAmount: Amount;\n    grossAmount: Amount;\n  }[];\n}\n\nexport type ReceiptItemType = 'good' | 'service' | 'mixed';\nexport type PaymentMethod = 'cash' | 'electronic' | 'ticket_restaurant' | 'mixed';\n\n/**\n * Receipts Resource Class - OpenAPI Based\n * Manages electronic receipts with full Italian fiscal compliance\n */\nexport class ReceiptsResource extends BaseOpenAPIResource {\n  constructor(client: HttpClient) {\n    super({\n      client,\n      endpoints: {\n        list: ReceiptEndpoints.LIST,\n        create: ReceiptEndpoints.CREATE,\n        void: ReceiptEndpoints.VOID,\n        getByUuid: ReceiptEndpoints.GET_BY_UUID,\n        voidWithProof: ReceiptEndpoints.VOID_WITH_PROOF,\n        getDetails: ReceiptEndpoints.GET_DETAILS,\n        returnItems: ReceiptEndpoints.RETURN_ITEMS,\n        returnItemsWithProof: ReceiptEndpoints.RETURN_ITEMS_WITH_PROOF,\n      }\n    });\n  }\n\n  /**\n   * Get a list of receipts with filtering and pagination\n   * \n   * @param params - List parameters including filters and pagination\n   * @returns Promise resolving to paginated receipt list\n   */\n  async list(params?: ReceiptListParams): Promise<ReceiptPage> {\n    return this.executeRequest<void, ReceiptPage>('list', undefined, {\n      ...(params && { queryParams: params as Record<string, unknown> }),\n      metadata: {\n        operation: 'list_receipts',\n        dateRange: params?.start_date && params?.end_date ? `${params.start_date} to ${params.end_date}` : undefined,\n      }\n    });\n  }\n\n  /**\n   * Create a new electronic receipt\n   * \n   * @param data - Receipt input data with items and payment information\n   * @param options - Validation options for fiscal compliance\n   * @returns Promise resolving to created receipt\n   */\n  async create(\n    data: ReceiptInput, \n    options: ReceiptValidationOptions = {}\n  ): Promise<ReceiptOutput> {\n    // Validate input with Italian fiscal rules\n    await this.validateReceiptInput(data, options);\n\n    return this.executeRequest<ReceiptInput, ReceiptOutput>('create', data, {\n      metadata: {\n        operation: 'create_receipt',\n        itemCount: data.items.length,\n        totalAmount: this.calculateTotalAmount(data).totalAmount,\n      }\n    });\n  }\n\n  /**\n   * Void an electronic receipt\n   * \n   * @param voidData - Void request data\n   * @returns Promise resolving to void confirmation\n   */\n  async void(voidData: VoidReceiptRequest): Promise<VoidReceiptOutput> {\n    return this.executeRequest<VoidReceiptRequest, VoidReceiptOutput>('void', voidData, {\n      metadata: {\n        operation: 'void_receipt',\n      }\n    });\n  }\n\n  /**\n   * Get a specific receipt by UUID\n   * \n   * @param receiptId - Receipt UUID\n   * @returns Promise resolving to receipt details\n   */\n  async retrieve(receiptId: ReceiptId | string): Promise<ReceiptOutput> {\n    return this.executeRequest<void, ReceiptOutput>('getByUuid', undefined, {\n      pathParams: { receipt_uuid: receiptId },\n      metadata: {\n        operation: 'get_receipt',\n        receiptId,\n      }\n    });\n  }\n\n  /**\n   * Void a receipt using proof of purchase\n   * \n   * @param voidData - Void request with proof data\n   * @returns Promise resolving to void confirmation\n   */\n  async voidWithProof(voidData: VoidReceiptWithProofRequest): Promise<VoidReceiptOutput> {\n    return this.executeRequest<VoidReceiptWithProofRequest, VoidReceiptOutput>('voidWithProof', voidData, {\n      metadata: {\n        operation: 'void_receipt_with_proof',\n      }\n    });\n  }\n\n  /**\n   * Get receipt details or PDF\n   * \n   * @param receiptId - Receipt UUID\n   * @param format - Response format ('json' or 'pdf')\n   * @returns Promise resolving to receipt details or PDF blob\n   */\n  async getDetails(receiptId: ReceiptId | string, format: 'json' | 'pdf' = 'json'): Promise<components['schemas']['E-Receipt_IT_API_ReceiptDetailsOutput'] | Blob> {\n    const acceptHeader = format === 'pdf' ? 'application/pdf' : 'application/json';\n    \n    return this.executeRequest<void, components['schemas']['E-Receipt_IT_API_ReceiptDetailsOutput'] | Blob>('getDetails', undefined, {\n      pathParams: { receipt_uuid: receiptId },\n      headers: { Accept: acceptHeader },\n      metadata: {\n        operation: 'get_receipt_details',\n        receiptId,\n        format,\n      }\n    });\n  }\n\n  /**\n   * Return items from a receipt\n   * \n   * @param returnData - Return request data\n   * @returns Promise resolving to return receipt\n   */\n  async returnItems(returnData: ReturnRequest): Promise<ReceiptOutput> {\n    return this.executeRequest<ReturnRequest, ReceiptOutput>('returnItems', returnData, {\n      metadata: {\n        operation: 'return_receipt_items',\n      }\n    });\n  }\n\n  /**\n   * Return items from a receipt using proof of purchase\n   * \n   * @param returnData - Return request with proof data\n   * @returns Promise resolving to return receipt\n   */\n  async returnItemsWithProof(returnData: ReturnWithProofRequest): Promise<ReceiptOutput> {\n    return this.executeRequest<ReturnWithProofRequest, ReceiptOutput>('returnItemsWithProof', returnData, {\n      metadata: {\n        operation: 'return_receipt_items_with_proof',\n      }\n    });\n  }\n\n  // Validation methods\n\n  /**\n   * Comprehensive receipt input validation\n   */\n  private async validateReceiptInput(\n    data: ReceiptInput, \n    options: ReceiptValidationOptions = {}\n  ): Promise<void> {\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    // Basic validation\n    if (!data.items || data.items.length === 0) {\n      errors.push({\n        field: 'items',\n        message: 'Receipt must contain at least one item',\n        code: 'NO_ITEMS'\n      });\n    }\n\n    // Item count validation\n    if (options.maxReceiptItems && data.items.length > options.maxReceiptItems) {\n      errors.push({\n        field: 'items',\n        message: `Receipt cannot contain more than ${options.maxReceiptItems} items`,\n        code: 'TOO_MANY_ITEMS'\n      });\n    }\n\n    // Validate each item\n    for (let i = 0; i < data.items.length; i++) {\n      const item = data.items[i];\n      if (!item) continue;\n      const itemErrors = this.validateReceiptItem(item, i, options);\n      errors.push(...itemErrors);\n    }\n\n    // Payment validation\n    const paymentErrors = this.validatePaymentAmounts(data);\n    errors.push(...paymentErrors);\n\n    // Total calculation validation\n    if (options.checkTotalCalculations) {\n      const calculationErrors = this.validateCalculations(data);\n      errors.push(...calculationErrors);\n    }\n\n    // Italian fiscal rules validation\n    if (options.enforceItalianFiscalRules) {\n      const fiscalErrors = this.validateItalianFiscalRules(data);\n      errors.push(...fiscalErrors);\n    }\n\n    if (errors.length > 0) {\n      throw new ValidationError('Invalid receipt input', 'create_receipt', errors);\n    }\n  }\n\n  /**\n   * Validate individual receipt item\n   */\n  private validateReceiptItem(\n    item: components['schemas']['E-Receipt_IT_API_ReceiptItem'], \n    index: number, \n    options: ReceiptValidationOptions\n  ): Array<{ field: string; message: string; code: string }> {\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n    const prefix = `items[${index}]`;\n\n    // Required fields\n    if (!item.description || item.description.trim().length === 0) {\n      errors.push({\n        field: `${prefix}.description`,\n        message: 'Item description is required',\n        code: 'REQUIRED'\n      });\n    }\n\n    if (!item.quantity || parseFloat(item.quantity) <= 0) {\n      errors.push({\n        field: `${prefix}.quantity`,\n        message: 'Item quantity must be greater than 0',\n        code: 'INVALID_QUANTITY'\n      });\n    }\n\n    if (!item.unit_price || parseFloat(item.unit_price) < 0) {\n      errors.push({\n        field: `${prefix}.unit_price`,\n        message: 'Item unit price cannot be negative',\n        code: 'INVALID_PRICE'\n      });\n    }\n\n    // VAT rate validation\n    if (options.validateVATRates && item.vat_rate_code) {\n      const validVATRates = ['0', '4', '5', '10', '22']; // Italian VAT rates\n      if (!validVATRates.includes(item.vat_rate_code)) {\n        errors.push({\n          field: `${prefix}.vat_rate_code`,\n          message: `Invalid VAT rate. Valid rates: ${validVATRates.join(', ')}`,\n          code: 'INVALID_VAT_RATE'\n        });\n      }\n    }\n\n    // Description length validation\n    if (item.description && item.description.length > 200) {\n      errors.push({\n        field: `${prefix}.description`,\n        message: 'Item description cannot exceed 200 characters',\n        code: 'DESCRIPTION_TOO_LONG'\n      });\n    }\n\n    return errors;\n  }\n\n  /**\n   * Validate payment amounts\n   */\n  private validatePaymentAmounts(data: ReceiptInput): Array<{ field: string; message: string; code: string }> {\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    const cashAmount = parseFloat(data.cash_payment_amount || '0');\n    const electronicAmount = parseFloat(data.electronic_payment_amount || '0');\n    const ticketAmount = parseFloat(data.ticket_restaurant_payment_amount || '0');\n\n    // At least one payment method must be used\n    if (cashAmount <= 0 && electronicAmount <= 0 && ticketAmount <= 0) {\n      errors.push({\n        field: 'payment',\n        message: 'At least one payment method must have a positive amount',\n        code: 'NO_PAYMENT'\n      });\n    }\n\n    // Negative amounts validation\n    if (cashAmount < 0) {\n      errors.push({\n        field: 'cash_payment_amount',\n        message: 'Cash payment amount cannot be negative',\n        code: 'NEGATIVE_AMOUNT'\n      });\n    }\n\n    if (electronicAmount < 0) {\n      errors.push({\n        field: 'electronic_payment_amount',\n        message: 'Electronic payment amount cannot be negative',\n        code: 'NEGATIVE_AMOUNT'\n      });\n    }\n\n    if (ticketAmount < 0) {\n      errors.push({\n        field: 'ticket_restaurant_payment_amount',\n        message: 'Ticket restaurant payment amount cannot be negative',\n        code: 'NEGATIVE_AMOUNT'\n      });\n    }\n\n    return errors;\n  }\n\n  /**\n   * Validate calculation accuracy\n   */\n  private validateCalculations(data: ReceiptInput): Array<{ field: string; message: string; code: string }> {\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    try {\n      const calculated = this.calculateTotalAmount(data);\n      const totalPayments = parseFloat(data.cash_payment_amount || '0') + \n                           parseFloat(data.electronic_payment_amount || '0') + \n                           parseFloat(data.ticket_restaurant_payment_amount || '0');\n\n      // Check if total payments match calculated total (with small tolerance for rounding)\n      const tolerance = 0.01;\n      if (Math.abs(totalPayments - parseFloat(calculated.totalAmount)) > tolerance) {\n        errors.push({\n          field: 'payment_total',\n          message: `Payment total (${totalPayments.toFixed(2)}) does not match calculated total (${calculated.totalAmount})`,\n          code: 'PAYMENT_MISMATCH'\n        });\n      }\n    } catch (error) {\n      errors.push({\n        field: 'calculation',\n        message: 'Failed to validate receipt calculations',\n        code: 'CALCULATION_ERROR'\n      });\n    }\n\n    return errors;\n  }\n\n  /**\n   * Validate Italian fiscal compliance rules\n   */\n  private validateItalianFiscalRules(data: ReceiptInput): Array<{ field: string; message: string; code: string }> {\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    // Check for fiscal compliance requirements\n    const totalAmount = parseFloat(this.calculateTotalAmount(data).totalAmount);\n\n    // High-value transaction reporting (example threshold)\n    if (totalAmount > 3000) {\n      const cashAmount = parseFloat(data.cash_payment_amount || '0');\n      if (cashAmount > 1000) {\n        errors.push({\n          field: 'cash_payment_amount',\n          message: 'Cash payments over €1000 require additional documentation for transactions above €3000',\n          code: 'HIGH_VALUE_CASH_LIMIT'\n        });\n      }\n    }\n\n    // Validate lottery code if provided (simplified check)\n    if (data.customer_lottery_code && !/^[A-Z0-9]{16}$/.test(data.customer_lottery_code)) {\n      errors.push({\n        field: 'customer_lottery_code',\n        message: 'Lottery code must be 16 alphanumeric characters',\n        code: 'INVALID_LOTTERY_CODE'\n      });\n    }\n\n    return errors;\n  }\n\n  // Calculation methods\n\n  /**\n   * Calculate total receipt amount with VAT breakdown\n   */\n  public calculateTotalAmount(data: ReceiptInput): ReceiptCalculationResult {\n    let subtotal = 0;\n    let totalVAT = 0;\n    let totalDiscount = parseFloat(data.discount || '0');\n    \n    const vatBreakdown = new Map<string, { net: number; vat: number; gross: number }>();\n\n    // Calculate item totals\n    for (const item of data.items) {\n      const quantity = parseFloat(item.quantity);\n      const unitPrice = parseFloat(item.unit_price);\n      const itemDiscount = parseFloat(item.discount || '0');\n      const vatRate = parseFloat(item.vat_rate_code || '0') / 100;\n\n      // Calculate item total before VAT\n      const itemNetTotal = (quantity * unitPrice) - itemDiscount;\n      const itemVAT = itemNetTotal * vatRate;\n      const itemGrossTotal = itemNetTotal + itemVAT;\n\n      subtotal += itemNetTotal;\n      totalVAT += itemVAT;\n\n      // Track VAT breakdown\n      const vatKey = item.vat_rate_code || '0';\n      if (!vatBreakdown.has(vatKey)) {\n        vatBreakdown.set(vatKey, { net: 0, vat: 0, gross: 0 });\n      }\n      const breakdown = vatBreakdown.get(vatKey)!;\n      breakdown.net += itemNetTotal;\n      breakdown.vat += itemVAT;\n      breakdown.gross += itemGrossTotal;\n    }\n\n    // Apply global discount\n    const finalSubtotal = subtotal - totalDiscount;\n    const finalTotal = finalSubtotal + totalVAT;\n\n    return {\n      subtotal: finalSubtotal.toFixed(2) as Amount,\n      vatAmount: totalVAT.toFixed(2) as Amount,\n      totalAmount: finalTotal.toFixed(2) as Amount,\n      discountAmount: (totalDiscount + data.items.reduce((sum, item) => sum + parseFloat(item.discount || '0'), 0)).toFixed(2) as Amount,\n      itemCount: data.items.length,\n      breakdown: Array.from(vatBreakdown.entries()).map(([vatRate, amounts]) => ({\n        vatRate,\n        netAmount: amounts.net.toFixed(2) as Amount,\n        vatAmount: amounts.vat.toFixed(2) as Amount,\n        grossAmount: amounts.gross.toFixed(2) as Amount,\n      })),\n    };\n  }\n\n  // Static utility methods\n\n  /**\n   * Format receipt for display\n   */\n  static formatReceiptForDisplay(receipt: ReceiptOutput): {\n    receiptNumber: string;\n    date: string;\n    time: string;\n    formattedTotal: string;\n    paymentMethod: PaymentMethod;\n    itemSummary: string;\n  } {\n    const date = new Date(receipt.created_at);\n    \n    return {\n      receiptNumber: receipt.uuid.split('-')[0]?.toUpperCase() || 'UNKNOWN',\n      date: date.toLocaleDateString('it-IT'),\n      time: date.toLocaleTimeString('it-IT'),\n      formattedTotal: `€ ${receipt.total_amount}`,\n      paymentMethod: this.determinePaymentMethod(receipt),\n      itemSummary: `0 items`, // items field not available in OpenAPI schema\n    };\n  }\n\n  /**\n   * Determine primary payment method\n   */\n  private static determinePaymentMethod(_receipt: ReceiptOutput): PaymentMethod {\n    // Note: payment amount fields not available in OpenAPI schema\n    // Using default payment method\n    return 'cash'; // Default\n  }\n\n  /**\n   * Generate receipt summary for reports\n   */\n  static generateReceiptSummary(receipts: ReceiptOutput[]): {\n    totalCount: number;\n    totalAmount: Amount;\n    vatAmount: Amount;\n    averageAmount: Amount;\n    paymentMethodBreakdown: Record<PaymentMethod, { count: number; amount: Amount }>;\n    dateRange: { from: string; to: string };\n  } {\n    const summary = {\n      totalCount: receipts.length,\n      totalAmount: '0.00' as Amount,\n      vatAmount: '0.00' as Amount,\n      averageAmount: '0.00' as Amount,\n      paymentMethodBreakdown: {\n        cash: { count: 0, amount: '0.00' as Amount },\n        electronic: { count: 0, amount: '0.00' as Amount },\n        ticket_restaurant: { count: 0, amount: '0.00' as Amount },\n        mixed: { count: 0, amount: '0.00' as Amount },\n      } as Record<PaymentMethod, { count: number; amount: Amount }>,\n      dateRange: { from: '', to: '' },\n    };\n\n    if (receipts.length === 0) return summary;\n\n    let totalAmount = 0;\n    let totalVAT = 0;\n    const dates = receipts.map(r => new Date(r.created_at)).sort((a, b) => a.getTime() - b.getTime());\n\n    for (const receipt of receipts) {\n      const amount = parseFloat(receipt.total_amount);\n      totalAmount += amount;\n      \n      // Estimate VAT (simplified calculation)\n      totalVAT += amount * 0.15; // Rough estimate\n\n      const paymentMethod = this.determinePaymentMethod(receipt);\n      summary.paymentMethodBreakdown[paymentMethod].count++;\n      summary.paymentMethodBreakdown[paymentMethod].amount = \n        (parseFloat(summary.paymentMethodBreakdown[paymentMethod].amount) + amount).toFixed(2) as Amount;\n    }\n\n    summary.totalAmount = totalAmount.toFixed(2) as Amount;\n    summary.vatAmount = totalVAT.toFixed(2) as Amount;\n    summary.averageAmount = (totalAmount / receipts.length).toFixed(2) as Amount;\n    summary.dateRange.from = dates[0]?.toISOString().split('T')[0] || '';\n    summary.dateRange.to = dates[dates.length - 1]?.toISOString().split('T')[0] || '';\n\n    return summary;\n  }\n\n  /**\n   * Validate receipt return eligibility\n   */\n  static validateReturnEligibility(receipt: ReceiptOutput, returnDate: Date = new Date()): {\n    eligible: boolean;\n    reason?: string;\n    daysRemaining?: number;\n  } {\n    const receiptDate = new Date(receipt.created_at);\n    const daysSinceReceipt = Math.floor((returnDate.getTime() - receiptDate.getTime()) / (1000 * 60 * 60 * 24));\n    const returnPeriodDays = 30; // Example return period\n\n    if (daysSinceReceipt > returnPeriodDays) {\n      return {\n        eligible: false,\n        reason: `Return period expired. Returns allowed within ${returnPeriodDays} days.`,\n      };\n    }\n\n    if (receipt.document_number && receipt.document_number.includes('VOID')) {\n      return {\n        eligible: false,\n        reason: 'Receipt has already been voided',\n      };\n    }\n\n    return {\n      eligible: true,\n      daysRemaining: returnPeriodDays - daysSinceReceipt,\n    };\n  }\n\n  /**\n   * Generate fiscal code for lottery participation\n   */\n  static generateLotteryCode(): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for (let i = 0; i < 16; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n}\n\n// Re-export for convenience\nexport { ReceiptsResource as Receipts };\n\n// Export types for external use\nexport type {\n  ReceiptInput,\n  ReceiptOutput,\n  ReceiptPage,\n  VoidReceiptRequest,\n  VoidReceiptOutput,\n  ReturnRequest,\n};","/**\n * Point of Sales Resource - OpenAPI Implementation\n * Type-safe implementation for PEM device management\n * \n * Features:\n * - Complete PEM device lifecycle management\n * - Activation and certificate management\n * - Status monitoring and control\n * - Journal closing operations\n * - Inactivity period management\n */\n\nimport { BaseOpenAPIResource } from '@/resources/base-openapi';\nimport { PointOfSalesEndpoints } from '@/generated/endpoints';\nimport type { HttpClient } from '@/http/client';\nimport type { SerialNumber } from '@/types/branded';\nimport type { components } from '@/types/generated';\nimport { ValidationError } from '@/errors/index';\n\n// Extract types from OpenAPI generated types\ntype PointOfSaleOutput = components['schemas']['E-Receipt_IT_API_PointOfSaleOutput'];\ntype PointOfSalePage = components['schemas']['E-Receipt_IT_API_Page__T_Customized_PointOfSaleOutput_'];\ntype ActivationRequest = components['schemas']['E-Receipt_IT_API_ActivationRequest'];\ntype InactivityRequest = components['schemas']['E-Receipt_IT_API_PEMStatusOfflineRequest'];\n// These endpoints return empty objects/have no request body per OpenAPI spec\ntype ActivationOutput = Record<string, never>; // Activation endpoint returns empty object\ntype CloseJournalRequest = void; // Close journal has no request body\ntype CloseJournalOutput = Record<string, never>; // Close journal returns empty object\n\nexport interface PointOfSaleValidationOptions {\n  validateSerialNumber?: boolean;\n  checkActivationStatus?: boolean;\n  enforceStatusTransitions?: boolean;\n}\n\nexport interface DeviceStatus {\n  serialNumber: SerialNumber;\n  status: PEMStatus;\n  lastSeen: string;\n  certificateExpiry?: string | undefined;\n  firmwareVersion?: string | undefined;\n  batteryLevel?: number | undefined;\n  connectivity: ConnectivityStatus;\n}\n\nexport interface JournalSummary {\n  date: string;\n  transactionCount: number;\n  totalAmount: string;\n  vatAmount: string;\n  firstTransaction?: string;\n  lastTransaction?: string;\n  status: 'open' | 'closed' | 'pending';\n}\n\n// Use actual OpenAPI types where available\nexport type PEMStatus = components['schemas']['E-Receipt_IT_API_PEMStatus'];\nexport type ConnectivityStatus = 'online' | 'offline' | 'intermittent' | 'unknown';\nexport type ActivationStatus = 'pending' | 'in_progress' | 'completed' | 'failed' | 'expired';\n\n/**\n * Point of Sales Resource Class - OpenAPI Based\n * Manages PEM devices with full Italian fiscal compliance\n */\nexport class PointOfSalesResource extends BaseOpenAPIResource {\n  constructor(client: HttpClient) {\n    super({\n      client,\n      endpoints: {\n        list: PointOfSalesEndpoints.LIST,\n        getBySerial: PointOfSalesEndpoints.GET_BY_SERIAL,\n        closeJournal: PointOfSalesEndpoints.CLOSE_JOURNAL,\n        activation: PointOfSalesEndpoints.ACTIVATION,\n        createInactivity: PointOfSalesEndpoints.CREATE_INACTIVITY,\n        setOffline: PointOfSalesEndpoints.SET_OFFLINE,\n      }\n    });\n  }\n\n  /**\n   * Get a list of Point of Sales devices\n   * \n   * @returns Promise resolving to paginated PEM list\n   */\n  async list(): Promise<PointOfSalePage> {\n    return this.executeRequest<void, PointOfSalePage>('list', undefined, {\n      metadata: {\n        operation: 'list_point_of_sales',\n      }\n    });\n  }\n\n  /**\n   * Get a specific Point of Sale by serial number\n   * \n   * @param serialNumber - Device serial number\n   * @returns Promise resolving to PEM details\n   */\n  async retrieve(serialNumber: SerialNumber | string): Promise<PointOfSaleOutput> {\n    return this.executeRequest<void, PointOfSaleOutput>('getBySerial', undefined, {\n      pathParams: { serial_number: serialNumber },\n      metadata: {\n        operation: 'get_point_of_sale',\n        serialNumber,\n      }\n    });\n  }\n\n  /**\n   * Close the daily journal for a Point of Sale\n   * \n   * @returns Promise resolving to close confirmation\n   */\n  async closeJournal(): Promise<CloseJournalOutput> {\n    return this.executeRequest<void, CloseJournalOutput>('closeJournal', undefined, {\n      metadata: {\n        operation: 'close_journal',\n      }\n    });\n  }\n\n  /**\n   * Trigger activation process for a Point of Sale\n   * \n   * @param serialNumber - Device serial number\n   * @param activationData - Activation request data\n   * @param options - Validation options\n   * @returns Promise resolving to activation status\n   */\n  async activate(\n    serialNumber: SerialNumber | string,\n    activationData: ActivationRequest,\n    options: PointOfSaleValidationOptions = {}\n  ): Promise<ActivationOutput> {\n    // Validate activation request\n    await this.validateActivationRequest(serialNumber, activationData, options);\n\n    return this.executeRequest<ActivationRequest, ActivationOutput>('activation', activationData, {\n      pathParams: { serial_number: serialNumber },\n      metadata: {\n        operation: 'activate_point_of_sale',\n        serialNumber,\n        registrationKey: activationData.registration_key,\n      }\n    });\n  }\n\n  /**\n   * Create an inactivity period for a Point of Sale\n   * \n   * @param serialNumber - Device serial number\n   * @param inactivityData - Inactivity period request data\n   * @returns Promise resolving when inactivity period is created\n   */\n  async createInactivityPeriod(\n    serialNumber: SerialNumber | string,\n    inactivityData: InactivityRequest\n  ): Promise<void> {\n    return this.executeRequest<InactivityRequest, void>('createInactivity', inactivityData, {\n      pathParams: { serial_number: serialNumber },\n      metadata: {\n        operation: 'create_inactivity_period',\n        serialNumber,\n      }\n    });\n  }\n\n  /**\n   * Set Point of Sale status to offline\n   * \n   * @param serialNumber - Device serial number\n   * @returns Promise resolving when status is updated\n   */\n  async setOffline(serialNumber: SerialNumber | string): Promise<void> {\n    return this.executeRequest<void, void>('setOffline', undefined, {\n      pathParams: { serial_number: serialNumber },\n      metadata: {\n        operation: 'set_point_of_sale_offline',\n        serialNumber,\n      }\n    });\n  }\n\n  /**\n   * Get device status summary\n   * \n   * @param serialNumber - Device serial number\n   * @returns Promise resolving to device status\n   */\n  async getDeviceStatus(serialNumber: SerialNumber | string): Promise<DeviceStatus> {\n    const device = await this.retrieve(serialNumber);\n    return PointOfSalesResource.analyzeDeviceStatus(device);\n  }\n\n  /**\n   * Get journal summary for a specific date\n   * \n   * @param serialNumber - Device serial number\n   * @param date - Date in YYYY-MM-DD format\n   * @returns Promise resolving to journal summary\n   */\n  async getJournalSummary(\n    _serialNumber: SerialNumber | string, \n    date: string = new Date().toISOString().split('T')[0]!\n  ): Promise<JournalSummary> {\n    // This would typically require additional API endpoints\n    // For now, return a mock summary\n    return {\n      date,\n      transactionCount: 0,\n      totalAmount: '0.00',\n      vatAmount: '0.00',\n      status: 'open',\n    };\n  }\n\n  // Validation methods\n\n  /**\n   * Validate activation request\n   */\n  private async validateActivationRequest(\n    serialNumber: SerialNumber | string,\n    activationData: ActivationRequest,\n    options: PointOfSaleValidationOptions = {}\n  ): Promise<void> {\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    // Serial number validation\n    if (options.validateSerialNumber) {\n      const serialValidation = PointOfSalesResource.validateSerialNumber(serialNumber);\n      if (!serialValidation.isValid) {\n        errors.push({\n          field: 'serial_number',\n          message: serialValidation.error || 'Invalid serial number format',\n          code: 'INVALID_SERIAL_NUMBER'\n        });\n      }\n    }\n\n    // Registration key validation\n    if (!activationData.registration_key || activationData.registration_key.length === 0) {\n      errors.push({\n        field: 'registration_key',\n        message: 'Registration key is required',\n        code: 'REQUIRED'\n      });\n    } else {\n      const keyValidation = this.validateRegistrationKey(activationData.registration_key);\n      if (!keyValidation.isValid) {\n        errors.push({\n          field: 'registration_key',\n          message: keyValidation.error || 'Invalid registration key format',\n          code: 'INVALID_REGISTRATION_KEY'\n        });\n      }\n    }\n\n    // Check activation status if required\n    if (options.checkActivationStatus) {\n      try {\n        const device = await this.retrieve(serialNumber);\n        if (device.status === 'ACTIVE') {\n          errors.push({\n            field: 'status',\n            message: 'Device is already activated',\n            code: 'ALREADY_ACTIVATED'\n          });\n        }\n      } catch (error) {\n        // Device not found is acceptable for new activations\n        if (error instanceof Error && !error.message.includes('404')) {\n          errors.push({\n            field: 'device',\n            message: 'Unable to verify device status',\n            code: 'STATUS_CHECK_FAILED'\n          });\n        }\n      }\n    }\n\n    if (errors.length > 0) {\n      throw new ValidationError('Invalid activation request', 'activate_point_of_sale', errors);\n    }\n  }\n\n  /**\n   * Validate registration key format\n   */\n  private validateRegistrationKey(key: string): { isValid: boolean; error?: string } {\n    // Basic format validation (this would depend on the actual key format)\n    if (key.length < 16) {\n      return { isValid: false, error: 'Registration key must be at least 16 characters' };\n    }\n\n    if (!/^[A-Z0-9-]+$/.test(key)) {\n      return { isValid: false, error: 'Registration key contains invalid characters' };\n    }\n\n    return { isValid: true };\n  }\n\n  // Static utility methods\n\n  /**\n   * Validate serial number format\n   */\n  static validateSerialNumber(serialNumber: SerialNumber | string): { isValid: boolean; error?: string } {\n    const serialStr = String(serialNumber);\n\n    // Basic serial number validation\n    if (serialStr.length < 8 || serialStr.length > 20) {\n      return { isValid: false, error: 'Serial number must be between 8 and 20 characters' };\n    }\n\n    if (!/^[A-Z0-9]+$/.test(serialStr)) {\n      return { isValid: false, error: 'Serial number must contain only uppercase letters and numbers' };\n    }\n\n    return { isValid: true };\n  }\n\n  /**\n   * Analyze device status from device data\n   */\n  static analyzeDeviceStatus(device: PointOfSaleOutput): DeviceStatus {\n    return {\n      serialNumber: device.serial_number as SerialNumber,\n      status: device.status as PEMStatus,\n      lastSeen: new Date().toISOString(), // last_seen field not available in OpenAPI schema\n      certificateExpiry: undefined, // certificate_expiry field not available in OpenAPI schema\n      firmwareVersion: undefined, // firmware_version field not available in OpenAPI schema\n      batteryLevel: undefined, // battery_level field not available in OpenAPI schema\n      connectivity: this.determineConnectivityStatus(device),\n    };\n  }\n\n  /**\n   * Determine connectivity status from device data\n   */\n  private static determineConnectivityStatus(_device: PointOfSaleOutput): ConnectivityStatus {\n    // last_seen field not available in OpenAPI schema, using mock connectivity\n    const lastSeenTime = new Date().getTime();\n    const now = Date.now();\n    const minutesSinceLastSeen = (now - lastSeenTime) / (1000 * 60);\n\n    if (minutesSinceLastSeen <= 5) return 'online';\n    if (minutesSinceLastSeen <= 30) return 'intermittent';\n    return 'offline';\n  }\n\n  /**\n   * Format device for display\n   */\n  static formatDeviceForDisplay(device: PointOfSaleOutput): {\n    displayName: string;\n    statusBadge: string;\n    location: string;\n    lastActivity: string;\n    certificateStatus: string;\n  } {\n    const status = device.status || 'unknown';\n    // last_seen field not available in OpenAPI schema, using current time\n    const lastSeen = new Date();\n\n    return {\n      displayName: `PEM ${device.serial_number}`,\n      statusBadge: status.toUpperCase(),\n      location: device.address?.city || 'Unknown Location',\n      lastActivity: lastSeen.toLocaleString(),\n      certificateStatus: 'Not Available', // certificate_expiry field not available in OpenAPI schema\n    };\n  }\n\n  /**\n   * Calculate device uptime\n   */\n  static calculateUptime(_device: PointOfSaleOutput): {\n    uptimeHours: number;\n    uptimePercentage: number;\n    availabilityStatus: 'excellent' | 'good' | 'poor' | 'critical';\n  } {\n    // This would typically use historical data\n    // For now, return mock calculations based on last seen\n    // last_seen field not available in OpenAPI schema, using current time\n    const lastSeenTime = Date.now();\n    const now = Date.now();\n    const hoursSinceLastSeen = (now - lastSeenTime) / (1000 * 60 * 60);\n\n    // Mock uptime calculation\n    const uptimeHours = Math.max(0, 24 - hoursSinceLastSeen);\n    const uptimePercentage = Math.round((uptimeHours / 24) * 100);\n\n    let availabilityStatus: 'excellent' | 'good' | 'poor' | 'critical' = 'excellent';\n    if (uptimePercentage < 95) availabilityStatus = 'good';\n    if (uptimePercentage < 85) availabilityStatus = 'poor';\n    if (uptimePercentage < 70) availabilityStatus = 'critical';\n\n    return {\n      uptimeHours: Math.round(uptimeHours * 100) / 100,\n      uptimePercentage,\n      availabilityStatus,\n    };\n  }\n\n  /**\n   * Generate device health report\n   */\n  static generateHealthReport(devices: PointOfSaleOutput[]): {\n    totalDevices: number;\n    activeDevices: number;\n    offlineDevices: number;\n    devicesRequiringAttention: number;\n    avgUptimePercentage: number;\n    certificateExpiringCount: number;\n    statusBreakdown: Record<PEMStatus, number>;\n  } {\n    const report = {\n      totalDevices: devices.length,\n      activeDevices: 0,\n      offlineDevices: 0,\n      devicesRequiringAttention: 0,\n      avgUptimePercentage: 0,\n      certificateExpiringCount: 0,\n      statusBreakdown: {} as Record<PEMStatus, number>,\n    };\n\n    let totalUptime = 0;\n    // const now = new Date();\n    // Note: certificate_expiry field not available in OpenAPI schema\n\n    for (const device of devices) {\n      const status = device.status as PEMStatus;\n      \n      // Update status breakdown\n      report.statusBreakdown[status] = (report.statusBreakdown[status] || 0) + 1;\n\n      // Count active/offline devices\n      if (status === 'ACTIVE') {\n        report.activeDevices++;\n      } else if (status === 'OFFLINE') {\n        report.offlineDevices++;\n      }\n\n      // Check for devices requiring attention\n      if (['DISCARDED'].includes(status)) {\n        report.devicesRequiringAttention++;\n      }\n\n      // Note: certificate_expiry field not available in OpenAPI schema\n      // Using mock certificate validation\n\n      // Calculate uptime\n      const uptime = this.calculateUptime(device);\n      totalUptime += uptime.uptimePercentage;\n    }\n\n    report.avgUptimePercentage = devices.length > 0 ? \n      Math.round(totalUptime / devices.length) : 0;\n\n    return report;\n  }\n\n  /**\n   * Validate journal closing eligibility\n   */\n  static validateJournalClosingEligibility(device: PointOfSaleOutput, _date: string): {\n    canClose: boolean;\n    reasons: string[];\n    requirements: string[];\n  } {\n    const reasons: string[] = [];\n    const requirements: string[] = [];\n\n    // Check device status\n    if (device.status !== 'ACTIVE') {\n      reasons.push('Device must be in active status');\n    }\n\n    // Note: last_journal_close and pending_transactions fields not available in OpenAPI schema\n    // Using mock validation logic\n\n    // Requirements for closing\n    requirements.push('All transactions must be transmitted to tax authority');\n    requirements.push('Device must be connected to network');\n    requirements.push('No active receipt printing operations');\n\n    return {\n      canClose: reasons.length === 0,\n      reasons,\n      requirements,\n    };\n  }\n\n  /**\n   * Get recommended maintenance schedule\n   */\n  static getMaintenanceSchedule(_device: PointOfSaleOutput): {\n    nextMaintenance: string;\n    maintenanceType: 'routine' | 'certificate' | 'firmware' | 'urgent';\n    priority: 'low' | 'medium' | 'high' | 'critical';\n    description: string;\n    estimatedDuration: string;\n  } {\n    const now = new Date();\n    \n    // Note: certificate_expiry and firmware_version fields not available in OpenAPI schema\n    // Using default maintenance schedule\n\n    // Default routine maintenance\n    return {\n      nextMaintenance: new Date(now.getTime() + 90 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]!,\n      maintenanceType: 'routine',\n      priority: 'low',\n      description: 'Routine maintenance and inspection',\n      estimatedDuration: '30-60 minutes',\n    };\n  }\n\n  /**\n   * Check if firmware version is outdated\n   * @deprecated This method is not used since firmware_version is not available in OpenAPI schema\n   */\n  // private static isOutdatedFirmware(version: string): boolean {\n  //   // Simple version comparison (in reality, this would be more sophisticated)\n  //   const currentVersion = '2.1.0'; // Mock current version\n  //   return version < currentVersion;\n  // }\n\n  /**\n   * Generate activation code for new devices\n   */\n  static generateActivationCode(): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    \n    // Generate in format: XXXX-XXXX-XXXX-XXXX\n    for (let group = 0; group < 4; group++) {\n      if (group > 0) result += '-';\n      for (let i = 0; i < 4; i++) {\n        result += chars.charAt(Math.floor(Math.random() * chars.length));\n      }\n    }\n    \n    return result;\n  }\n}\n\n// Re-export for convenience\nexport { PointOfSalesResource as PointOfSales };\n\n// Export types for external use\nexport type {\n  PointOfSaleOutput,\n  PointOfSalePage,\n  ActivationRequest,\n  ActivationOutput,\n  CloseJournalRequest,\n  CloseJournalOutput,\n  InactivityRequest,\n};","/**\n * Cash Registers Resource - OpenAPI Implementation\n * Type-safe implementation for cash register management\n * \n * Features:\n * - Cash register lifecycle management\n * - Registration and configuration\n * - Status monitoring and reporting\n * - Integration with Point of Sales devices\n */\n\nimport { BaseOpenAPIResource } from '@/resources/base-openapi';\nimport { CashRegisterEndpoints } from '@/generated/endpoints';\nimport type { HttpClient } from '@/http/client';\nimport type { CashRegisterId } from '@/types/branded';\nimport type { components } from '@/types/generated';\nimport { ValidationError } from '@/errors/index';\n\n// Extract types from OpenAPI generated types\ntype CashRegisterInput = components['schemas']['E-Receipt_IT_API_CashRegisterCreate'];\ntype CashRegisterOutput = components['schemas']['E-Receipt_IT_API_CashRegisterDetailedOutput'];\ntype CashRegisterPage = components['schemas']['E-Receipt_IT_API_Page__T_Customized_CashRegisterBasicOutput_'];\n\nexport interface CashRegisterValidationOptions {\n  validateSerialNumber?: boolean;\n  checkDuplicateRegistration?: boolean;\n  enforceLocationValidation?: boolean;\n}\n\nexport interface CashRegisterConfiguration {\n  id: CashRegisterId;\n  name: string;\n  location: string;\n  serialNumber: string;\n  model: string;\n  manufacturer: string;\n  installationDate: string;\n  lastMaintenance?: string | undefined;\n  nextMaintenance?: string | undefined;\n  status: CashRegisterStatus;\n  settings: CashRegisterSettings;\n}\n\nexport interface CashRegisterSettings {\n  printReceipts: boolean;\n  enableLottery: boolean;\n  defaultVATRate: string;\n  language: 'it' | 'en' | 'de' | 'fr';\n  currency: 'EUR';\n  timezone: string;\n  paperSize: 'A4' | 'thermal_58mm' | 'thermal_80mm';\n  connectionType: 'ethernet' | 'wifi' | 'cellular';\n}\n\nexport interface CashRegisterStats {\n  registerId: CashRegisterId;\n  totalTransactions: number;\n  totalAmount: string;\n  averageTransaction: string;\n  transactionsToday: number;\n  amountToday: string;\n  lastTransaction?: string;\n  uptime: {\n    hours: number;\n    percentage: number;\n  };\n  errorCount: number;\n  maintenanceScore: number;\n}\n\nexport type CashRegisterStatus = 'active' | 'inactive' | 'maintenance' | 'error' | 'offline';\nexport type MaintenanceType = 'routine' | 'repair' | 'upgrade' | 'calibration';\n\n/**\n * Cash Registers Resource Class - OpenAPI Based\n * Manages cash register devices with full compliance\n */\nexport class CashRegistersResource extends BaseOpenAPIResource {\n  constructor(client: HttpClient) {\n    super({\n      client,\n      endpoints: {\n        create: CashRegisterEndpoints.CREATE,\n        list: CashRegisterEndpoints.LIST,\n        getById: CashRegisterEndpoints.GET_BY_ID,\n      }\n    });\n  }\n\n  /**\n   * Create a new cash register\n   * \n   * @param data - Cash register input data\n   * @param options - Validation options\n   * @returns Promise resolving to created cash register\n   */\n  async create(\n    data: CashRegisterInput, \n    options: CashRegisterValidationOptions = {}\n  ): Promise<CashRegisterOutput> {\n    // Validate input\n    await this.validateCashRegisterInput(data, options);\n\n    return this.executeRequest<CashRegisterInput, CashRegisterOutput>('create', data, {\n      metadata: {\n        operation: 'create_cash_register',\n        serialNumber: data.pem_serial_number,\n        name: data.name,\n      }\n    });\n  }\n\n  /**\n   * Get a list of cash registers\n   * \n   * @returns Promise resolving to paginated cash register list\n   */\n  async list(): Promise<CashRegisterPage> {\n    return this.executeRequest<void, CashRegisterPage>('list', undefined, {\n      metadata: {\n        operation: 'list_cash_registers',\n      }\n    });\n  }\n\n  /**\n   * Get a specific cash register by ID\n   * \n   * @param registerId - Cash register ID\n   * @returns Promise resolving to cash register details\n   */\n  async retrieve(registerId: CashRegisterId | number): Promise<CashRegisterOutput> {\n    return this.executeRequest<void, CashRegisterOutput>('getById', undefined, {\n      pathParams: { id: registerId },\n      metadata: {\n        operation: 'get_cash_register',\n        registerId,\n      }\n    });\n  }\n\n  /**\n   * Get cash register configuration\n   * \n   * @param registerId - Cash register ID\n   * @returns Promise resolving to configuration\n   */\n  async getConfiguration(registerId: CashRegisterId | number): Promise<CashRegisterConfiguration> {\n    const register = await this.retrieve(registerId);\n    return CashRegistersResource.buildConfiguration(register);\n  }\n\n  /**\n   * Get cash register statistics\n   * \n   * @param registerId - Cash register ID\n   * @returns Promise resolving to statistics\n   */\n  async getStatistics(registerId: CashRegisterId | number): Promise<CashRegisterStats> {\n    const register = await this.retrieve(registerId);\n    return CashRegistersResource.calculateStatistics(register);\n  }\n\n  /**\n   * Update cash register settings (future enhancement)\n   */\n  async updateSettings(\n    registerId: CashRegisterId | number, \n    settings: Partial<CashRegisterSettings>\n  ): Promise<CashRegisterOutput> {\n    if (!this.hasOperation('update')) {\n      throw this.createUnsupportedOperationError('update');\n    }\n    \n    return this.executeRequest<Partial<CashRegisterSettings>, CashRegisterOutput>('update', settings, {\n      pathParams: { id: registerId },\n      metadata: {\n        operation: 'update_cash_register_settings',\n        registerId,\n      }\n    });\n  }\n\n  // Validation methods\n\n  /**\n   * Validate cash register input\n   */\n  private async validateCashRegisterInput(\n    data: CashRegisterInput, \n    options: CashRegisterValidationOptions = {}\n  ): Promise<void> {\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    // Serial number validation (using pem_serial_number from OpenAPI schema)\n    if (!data.pem_serial_number || data.pem_serial_number.trim().length === 0) {\n      errors.push({\n        field: 'serial_number',\n        message: 'Serial number is required',\n        code: 'REQUIRED'\n      });\n    } else if (options.validateSerialNumber) {\n      const serialValidation = CashRegistersResource.validateSerialNumber(data.pem_serial_number);\n      if (!serialValidation.isValid) {\n        errors.push({\n          field: 'serial_number',\n          message: serialValidation.error || 'Invalid serial number format',\n          code: 'INVALID_SERIAL_NUMBER'\n        });\n      }\n    }\n\n    // Name validation (location field not available in OpenAPI schema)\n    if (options.enforceLocationValidation) {\n      if (!data.name || data.name.trim().length === 0) {\n        errors.push({\n          field: 'name',\n          message: 'Name is required',\n          code: 'REQUIRED'\n        });\n      } else if (data.name.length > 100) {\n        errors.push({\n          field: 'name',\n          message: 'Name cannot exceed 100 characters',\n          code: 'TOO_LONG'\n        });\n      }\n    }\n\n    // Duplicate registration check\n    if (options.checkDuplicateRegistration) {\n      const isDuplicate = await this.checkDuplicateSerial(data.pem_serial_number);\n      if (isDuplicate) {\n        errors.push({\n          field: 'serial_number',\n          message: 'Cash register with this serial number is already registered',\n          code: 'DUPLICATE_SERIAL'\n        });\n      }\n    }\n\n    if (errors.length > 0) {\n      throw new ValidationError('Invalid cash register input', 'create_cash_register', errors);\n    }\n  }\n\n  /**\n   * Check for duplicate serial number\n   */\n  private async checkDuplicateSerial(serialNumber: string): Promise<boolean> {\n    try {\n      const registers = await this.list();\n      return registers.members.some(register => register.pem_serial_number === serialNumber);\n    } catch (error) {\n      console.warn(`Unable to check for duplicate serial number: ${error}`);\n      return false;\n    }\n  }\n\n  // Static utility methods\n\n  /**\n   * Validate serial number format\n   */\n  static validateSerialNumber(serialNumber: string): { isValid: boolean; error?: string } {\n    if (serialNumber.length < 6 || serialNumber.length > 20) {\n      return { isValid: false, error: 'Serial number must be between 6 and 20 characters' };\n    }\n\n    if (!/^[A-Z0-9-]+$/.test(serialNumber)) {\n      return { isValid: false, error: 'Serial number must contain only uppercase letters, numbers, and hyphens' };\n    }\n\n    return { isValid: true };\n  }\n\n  /**\n   * Build configuration from cash register data\n   */\n  static buildConfiguration(register: CashRegisterOutput): CashRegisterConfiguration {\n    return {\n      id: register.id as CashRegisterId,\n      name: register.name || `Cash Register ${register.id}`,\n      location: 'Unknown Location', // location field not available in OpenAPI schema\n      serialNumber: register.pem_serial_number,\n      model: 'Unknown Model', // model field not available in OpenAPI schema\n      manufacturer: 'Unknown Manufacturer', // manufacturer field not available in OpenAPI schema\n      installationDate: new Date().toISOString(), // installation_date field not available in OpenAPI schema\n      lastMaintenance: undefined, // last_maintenance field not available in OpenAPI schema\n      nextMaintenance: undefined, // next_maintenance field not available in OpenAPI schema\n      status: 'active' as CashRegisterStatus, // status field not available in OpenAPI schema\n      settings: this.getDefaultSettings(),\n    };\n  }\n\n  /**\n   * Get default settings for cash registers\n   */\n  static getDefaultSettings(): CashRegisterSettings {\n    return {\n      printReceipts: true,\n      enableLottery: true,\n      defaultVATRate: '22',\n      language: 'it',\n      currency: 'EUR',\n      timezone: 'Europe/Rome',\n      paperSize: 'thermal_80mm',\n      connectionType: 'ethernet',\n    };\n  }\n\n  /**\n   * Calculate statistics for a cash register\n   */\n  static calculateStatistics(register: CashRegisterOutput): CashRegisterStats {\n    // Mock statistics calculation (in reality, this would use historical data)\n    const mockTransactionCount = Math.floor(Math.random() * 1000) + 100;\n    const mockTotalAmount = (Math.random() * 50000 + 10000).toFixed(2);\n    const mockTodayTransactions = Math.floor(Math.random() * 50) + 10;\n    const mockTodayAmount = (Math.random() * 2000 + 500).toFixed(2);\n\n    return {\n      registerId: register.id as CashRegisterId,\n      totalTransactions: mockTransactionCount,\n      totalAmount: mockTotalAmount,\n      averageTransaction: (parseFloat(mockTotalAmount) / mockTransactionCount).toFixed(2),\n      transactionsToday: mockTodayTransactions,\n      amountToday: mockTodayAmount,\n      // lastTransaction field omitted since it's not available in OpenAPI schema\n      uptime: {\n        hours: 23.5,\n        percentage: 97.9,\n      },\n      errorCount: Math.floor(Math.random() * 5),\n      maintenanceScore: Math.floor(Math.random() * 20) + 80,\n    };\n  }\n\n  /**\n   * Format cash register for display\n   */\n  static formatForDisplay(register: CashRegisterOutput): {\n    displayName: string;\n    statusBadge: string;\n    location: string;\n    lastActivity: string;\n    serialNumber: string;\n  } {\n    return {\n      displayName: register.name || `Cash Register ${register.id}`,\n      statusBadge: 'ACTIVE', // status field not available in OpenAPI schema\n      location: 'Unknown Location', // location field not available in OpenAPI schema\n      lastActivity: 'Never', // last_activity field not available in OpenAPI schema\n      serialNumber: register.pem_serial_number || 'Unknown',\n    };\n  }\n\n  /**\n   * Generate maintenance schedule\n   */\n  static generateMaintenanceSchedule(_register: CashRegisterOutput): {\n    nextMaintenance: string;\n    maintenanceType: MaintenanceType;\n    priority: 'low' | 'medium' | 'high' | 'critical';\n    description: string;\n    estimatedDuration: string;\n  } {\n    const now = new Date();\n    \n    // Since last_maintenance field is not available in OpenAPI schema,\n    // return default routine maintenance schedule\n    return {\n      nextMaintenance: new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]!,\n      maintenanceType: 'routine',\n      priority: 'medium',\n      description: 'Routine maintenance and inspection',\n      estimatedDuration: '2 hours',\n    };\n  }\n\n  /**\n   * Validate cash register compatibility with PEM device\n   */\n  static validatePEMCompatibility(\n    register: CashRegisterOutput, \n    pemModel: string\n  ): {\n    compatible: boolean;\n    issues: string[];\n    recommendations: string[];\n  } {\n    // Suppress unused variable warning\n    void register;\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n\n    // Note: connection_type, firmware_version, and power_consumption fields\n    // are not available in the OpenAPI schema, using mock validation\n    \n    // Mock compatibility check since actual fields are not available\n    if (pemModel.includes('legacy')) {\n      issues.push('Legacy PEM devices may have compatibility issues');\n      recommendations.push('Consider upgrading to newer PEM model');\n    }\n\n    return {\n      compatible: issues.length === 0,\n      issues,\n      recommendations,\n    };\n  }\n\n  /**\n   * Check if firmware is outdated\n   * @deprecated This method is not used since firmware_version is not available in OpenAPI schema\n   */\n  // private static isOutdatedFirmware(_version: string): boolean {\n  //   // Simple version comparison\n  //   const currentVersion = '3.2.0';\n  //   return _version < currentVersion;\n  // }\n\n  /**\n   * Generate health report for multiple cash registers\n   */\n  static generateFleetHealthReport(registers: CashRegisterOutput[]): {\n    totalRegisters: number;\n    activeRegisters: number;\n    registersNeedingMaintenance: number;\n    averageUptime: number;\n    totalTransactionsToday: number;\n    totalRevenueToday: string;\n    statusBreakdown: Record<CashRegisterStatus, number>;\n    topPerformers: { id: string; name: string; todayRevenue: string }[];\n  } {\n    const report = {\n      totalRegisters: registers.length,\n      activeRegisters: 0,\n      registersNeedingMaintenance: 0,\n      averageUptime: 0,\n      totalTransactionsToday: 0,\n      totalRevenueToday: '0.00',\n      statusBreakdown: {} as Record<CashRegisterStatus, number>,\n      topPerformers: [] as { id: string; name: string; todayRevenue: string }[],\n    };\n\n    let totalUptime = 0;\n    let totalRevenue = 0;\n    const performanceData: { id: string; name: string; revenue: number }[] = [];\n\n    for (const register of registers) {\n      // status field not available in OpenAPI schema, using mock status\n      const status: CashRegisterStatus = 'active';\n      \n      // Update status breakdown\n      report.statusBreakdown[status] = (report.statusBreakdown[status] || 0) + 1;\n\n      // Count active registers\n      if (status === 'active') {\n        report.activeRegisters++;\n      }\n\n      // Check maintenance needs\n      if (['maintenance', 'error'].includes(status)) {\n        report.registersNeedingMaintenance++;\n      }\n\n      // Calculate statistics\n      const stats = this.calculateStatistics(register);\n      totalUptime += stats.uptime.percentage;\n      report.totalTransactionsToday += stats.transactionsToday;\n      \n      const todayRevenue = parseFloat(stats.amountToday);\n      totalRevenue += todayRevenue;\n\n      performanceData.push({\n        id: register.id,\n        name: register.name || `Register ${register.id}`,\n        revenue: todayRevenue,\n      });\n    }\n\n    report.averageUptime = registers.length > 0 ? Math.round(totalUptime / registers.length) : 0;\n    report.totalRevenueToday = totalRevenue.toFixed(2);\n\n    // Get top 5 performers\n    report.topPerformers = performanceData\n      .sort((a, b) => b.revenue - a.revenue)\n      .slice(0, 5)\n      .map(item => ({\n        id: item.id,\n        name: item.name,\n        todayRevenue: item.revenue.toFixed(2),\n      }));\n\n    return report;\n  }\n\n  /**\n   * Generate installation checklist\n   */\n  static generateInstallationChecklist(): {\n    preInstallation: string[];\n    installation: string[];\n    postInstallation: string[];\n    testing: string[];\n  } {\n    return {\n      preInstallation: [\n        'Verify power supply requirements',\n        'Check network connectivity',\n        'Prepare installation location',\n        'Gather serial numbers and documentation',\n        'Backup existing configuration (if upgrading)',\n      ],\n      installation: [\n        'Mount cash register securely',\n        'Connect power supply',\n        'Establish network connection',\n        'Install required software/drivers',\n        'Configure basic settings',\n      ],\n      postInstallation: [\n        'Test all basic functions',\n        'Configure PEM device integration',\n        'Set up receipt printer',\n        'Configure tax settings',\n        'Train staff on operation',\n      ],\n      testing: [\n        'Process test transaction',\n        'Verify receipt printing',\n        'Test network connectivity',\n        'Validate tax calculations',\n        'Check integration with fiscal system',\n      ],\n    };\n  }\n}\n\n// Re-export for convenience\nexport { CashRegistersResource as CashRegisters };","/**\n * Merchants Resource - OpenAPI Implementation\n * Type-safe implementation for business entity management\n * \n * Features:\n * - Complete merchant lifecycle management\n * - Italian VAT number validation and verification\n * - Business address management\n * - Merchant profile and settings\n * - Compliance and certification tracking\n */\n\nimport { BaseOpenAPIResource } from '@/resources/base-openapi';\nimport { MerchantEndpoints } from '@/generated/endpoints';\nimport type { HttpClient } from '@/http/client';\nimport type { MerchantId, FiscalId } from '@/types/branded';\nimport type { components } from '@/types/generated';\nimport { ValidationError } from '@/errors/index';\n\n// Extract types from OpenAPI generated types\ntype MerchantCreateInput = components['schemas']['A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantCreateInput'];\ntype MerchantUpdateInput = components['schemas']['A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantUpdateInput'];\ntype MerchantOutput = components['schemas']['A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantOutput'];\n\nexport interface MerchantValidationOptions {\n  validateVATNumber?: boolean;\n  checkBusinessRegistration?: boolean;\n  enforceAddressValidation?: boolean;\n  validateItalianPostalCodes?: boolean;\n}\n\nexport interface BusinessAnalytics {\n  registrationDate: string;\n  businessAge: number;\n  completenessScore: number;\n  missingFields: string[];\n  recommendations: string[];\n  complianceStatus: 'compliant' | 'pending' | 'non-compliant';\n}\n\nexport interface AddressValidationResult {\n  isValid: boolean;\n  errors: string[];\n  suggestions: string[];\n  formattedAddress?: string | undefined;\n}\n\nexport type BusinessType = 'individual' | 'partnership' | 'corporation' | 'cooperative' | 'other';\nexport type MerchantStatus = 'active' | 'pending' | 'suspended' | 'closed';\n\n/**\n * Merchants Resource Class - OpenAPI Based\n * Manages merchant business entities with full Italian compliance\n */\nexport class MerchantsResource extends BaseOpenAPIResource {\n  constructor(client: HttpClient) {\n    super({\n      client,\n      endpoints: {\n        list: MerchantEndpoints.LIST,\n        create: MerchantEndpoints.CREATE,\n        getByUuid: MerchantEndpoints.GET_BY_UUID,\n        update: MerchantEndpoints.UPDATE,\n      }\n    });\n  }\n\n  /**\n   * Get a list of merchants\n   * \n   * @returns Promise resolving to merchant list\n   */\n  async list(): Promise<MerchantOutput[]> {\n    return this.executeRequest<void, MerchantOutput[]>('list', undefined, {\n      metadata: {\n        operation: 'list_merchants',\n      }\n    });\n  }\n\n  /**\n   * Create a new merchant\n   * \n   * @param data - Merchant creation input data\n   * @param options - Validation options\n   * @returns Promise resolving to created merchant\n   */\n  async create(\n    data: MerchantCreateInput, \n    options: MerchantValidationOptions = {}\n  ): Promise<MerchantOutput> {\n    // Validate input with business rules\n    await this.validateMerchantCreateInput(data, options);\n\n    return this.executeRequest<MerchantCreateInput, MerchantOutput>('create', data, {\n      metadata: {\n        operation: 'create_merchant',\n        fiscalId: data.fiscal_id,\n        email: data.email,\n        businessName: data.name,\n      }\n    });\n  }\n\n  /**\n   * Get a merchant by UUID\n   * \n   * @param merchantId - Merchant UUID\n   * @returns Promise resolving to merchant details\n   */\n  async retrieve(merchantId: MerchantId | string): Promise<MerchantOutput> {\n    return this.executeRequest<void, MerchantOutput>('getByUuid', undefined, {\n      pathParams: { uuid: merchantId },\n      metadata: {\n        operation: 'get_merchant',\n        merchantId,\n      }\n    });\n  }\n\n  /**\n   * Update a merchant's information\n   * \n   * @param merchantId - Merchant UUID\n   * @param data - Merchant update input data\n   * @param options - Validation options\n   * @returns Promise resolving to updated merchant\n   */\n  async update(\n    merchantId: MerchantId | string, \n    data: MerchantUpdateInput,\n    options: MerchantValidationOptions = {}\n  ): Promise<MerchantOutput> {\n    await this.validateMerchantUpdateInput(data, options);\n\n    return this.executeRequest<MerchantUpdateInput, MerchantOutput>('update', data, {\n      pathParams: { uuid: merchantId },\n      metadata: {\n        operation: 'update_merchant',\n        merchantId,\n        businessName: data.name,\n      }\n    });\n  }\n\n  /**\n   * Get merchant business analytics\n   * \n   * @param merchantId - Merchant UUID\n   * @returns Promise resolving to business analytics\n   */\n  async getAnalytics(merchantId: MerchantId | string): Promise<BusinessAnalytics> {\n    const merchant = await this.retrieve(merchantId);\n    return MerchantsResource.analyzeBusinessProfile(merchant);\n  }\n\n  /**\n   * Validate merchant address\n   * \n   * @param address - Address to validate\n   * @returns Address validation result\n   */\n  async validateAddress(address: components['schemas']['A-Cube_GOV-IT_PEL_Platform_Address']): Promise<AddressValidationResult> {\n    return MerchantsResource.validateItalianAddress(address);\n  }\n\n  // Validation methods\n\n  /**\n   * Comprehensive merchant creation input validation\n   */\n  private async validateMerchantCreateInput(\n    data: MerchantCreateInput, \n    options: MerchantValidationOptions = {}\n  ): Promise<void> {\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    // Required fields validation\n    if (!data.fiscal_id) {\n      errors.push({\n        field: 'fiscal_id',\n        message: 'Fiscal ID is required',\n        code: 'REQUIRED'\n      });\n    } else if (options.validateVATNumber) {\n      const vatValidation = await this.validateItalianVATNumber(data.fiscal_id);\n      if (!vatValidation.isValid) {\n        errors.push({\n          field: 'fiscal_id',\n          message: vatValidation.error || 'Invalid Italian VAT number',\n          code: 'INVALID_VAT_NUMBER'\n        });\n      }\n    }\n\n    if (!data.name || data.name.trim().length === 0) {\n      errors.push({\n        field: 'name',\n        message: 'Business name is required',\n        code: 'REQUIRED'\n      });\n    } else {\n      const nameValidation = this.validateBusinessName(data.name);\n      if (!nameValidation.isValid) {\n        errors.push({\n          field: 'name',\n          message: nameValidation.error || 'Invalid business name',\n          code: 'INVALID_BUSINESS_NAME'\n        });\n      }\n    }\n\n    if (!data.email) {\n      errors.push({\n        field: 'email',\n        message: 'Email is required',\n        code: 'REQUIRED'\n      });\n    } else if (!this.isValidEmail(data.email)) {\n      errors.push({\n        field: 'email',\n        message: 'Invalid email format',\n        code: 'INVALID_EMAIL'\n      });\n    }\n\n    if (!data.password) {\n      errors.push({\n        field: 'password',\n        message: 'Password is required',\n        code: 'REQUIRED'\n      });\n    } else {\n      const passwordValidation = this.validatePassword(data.password);\n      if (!passwordValidation.isValid) {\n        errors.push({\n          field: 'password',\n          message: passwordValidation.error || 'Password does not meet requirements',\n          code: 'WEAK_PASSWORD'\n        });\n      }\n    }\n\n    // Address validation if provided\n    if (data.address && options.enforceAddressValidation) {\n      const addressValidation = await MerchantsResource.validateItalianAddress(data.address);\n      if (!addressValidation.isValid) {\n        errors.push(...addressValidation.errors.map(error => ({\n          field: 'address',\n          message: error,\n          code: 'INVALID_ADDRESS'\n        })));\n      }\n    }\n\n    if (errors.length > 0) {\n      throw new ValidationError('Invalid merchant create input', 'create_merchant', errors);\n    }\n  }\n\n  /**\n   * Merchant update input validation\n   */\n  private async validateMerchantUpdateInput(\n    data: MerchantUpdateInput, \n    options: MerchantValidationOptions = {}\n  ): Promise<void> {\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    // Business name validation\n    if (!data.name || data.name.trim().length === 0) {\n      errors.push({\n        field: 'name',\n        message: 'Business name is required',\n        code: 'REQUIRED'\n      });\n    } else {\n      const nameValidation = this.validateBusinessName(data.name);\n      if (!nameValidation.isValid) {\n        errors.push({\n          field: 'name',\n          message: nameValidation.error || 'Invalid business name',\n          code: 'INVALID_BUSINESS_NAME'\n        });\n      }\n    }\n\n    // Address validation if provided\n    if (data.address && options.enforceAddressValidation) {\n      const addressValidation = await MerchantsResource.validateItalianAddress(data.address);\n      if (!addressValidation.isValid) {\n        errors.push(...addressValidation.errors.map(error => ({\n          field: 'address',\n          message: error,\n          code: 'INVALID_ADDRESS'\n        })));\n      }\n    }\n\n    if (errors.length > 0) {\n      throw new ValidationError('Invalid merchant update input', 'update_merchant', errors);\n    }\n  }\n\n  /**\n   * Validate Italian VAT number with checksum\n   */\n  private async validateItalianVATNumber(vatNumber: string): Promise<{ isValid: boolean; error?: string }> {\n    if (!MerchantsResource.isValidItalianVATNumber(vatNumber)) {\n      return { isValid: false, error: 'Invalid Italian VAT number format or checksum' };\n    }\n\n    // Additional online validation could be implemented here\n    // For now, we'll just check the format and checksum\n    return { isValid: true };\n  }\n\n  /**\n   * Validate business name\n   */\n  private validateBusinessName(name: string): { isValid: boolean; error?: string } {\n    if (name.length > 200) {\n      return { isValid: false, error: 'Business name cannot exceed 200 characters' };\n    }\n\n    if (!/^[\\w\\s&.,'()\\-]+$/u.test(name)) {\n      return { isValid: false, error: 'Business name contains invalid characters' };\n    }\n\n    // Check for suspicious patterns\n    if (/test|example|sample/i.test(name)) {\n      console.warn(`Potentially test business name detected: ${name}`);\n    }\n\n    return { isValid: true };\n  }\n\n  /**\n   * Validate password strength\n   */\n  private validatePassword(password: string): { isValid: boolean; error?: string } {\n    if (password.length < 8) {\n      return { isValid: false, error: 'Password must be at least 8 characters long' };\n    }\n\n    if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(password)) {\n      return { isValid: false, error: 'Password must contain uppercase, lowercase, and numeric characters' };\n    }\n\n    return { isValid: true };\n  }\n\n  /**\n   * Validate email format\n   */\n  private isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  // Static utility methods\n\n  /**\n   * Validate Italian VAT number (static utility)\n   */\n  static isValidItalianVATNumber(vatNumber: string): boolean {\n    // Must be exactly 11 digits\n    if (!/^\\d{11}$/.test(vatNumber)) {\n      return false;\n    }\n\n    // Calculate checksum for Italian VAT number\n    let sum = 0;\n    for (let i = 0; i < 10; i++) {\n      let digit = parseInt(vatNumber[i]!, 10);\n      if (i % 2 === 1) {\n        digit *= 2;\n        if (digit > 9) {\n          digit = Math.floor(digit / 10) + (digit % 10);\n        }\n      }\n      sum += digit;\n    }\n\n    const checkDigit = (10 - (sum % 10)) % 10;\n    return checkDigit === parseInt(vatNumber[10]!, 10);\n  }\n\n  /**\n   * Format fiscal ID for display\n   */\n  static formatFiscalId(fiscalId: FiscalId | string): string {\n    // Format as XXX XXX XXXXX for readability\n    return fiscalId.replace(/(\\d{3})(\\d{3})(\\d{5})/, '$1 $2 $3');\n  }\n\n  /**\n   * Validate Italian address\n   */\n  static async validateItalianAddress(address: components['schemas']['A-Cube_GOV-IT_PEL_Platform_Address']): Promise<AddressValidationResult> {\n    const errors: string[] = [];\n    const suggestions: string[] = [];\n\n    if (!address.street_address || address.street_address.trim().length === 0) {\n      errors.push('Street address is required');\n    }\n\n    if (!address.zip_code || !/^\\d{5}$/.test(address.zip_code)) {\n      errors.push('ZIP code must be exactly 5 digits');\n    } else {\n      // Basic Italian postal code validation\n      const zipCode = parseInt(address.zip_code, 10);\n      if (zipCode < 10000 || zipCode > 98168) {\n        errors.push('Invalid Italian postal code range');\n      }\n    }\n\n    if (!address.city || address.city.trim().length === 0) {\n      errors.push('City is required');\n    }\n\n    if (!address.province || address.province.length !== 2) {\n      errors.push('Province must be exactly 2 characters');\n    } else {\n      // Validate against Italian province codes\n      const validProvinces = [\n        'AG', 'AL', 'AN', 'AO', 'AQ', 'AR', 'AP', 'AT', 'AV', 'BA', 'BT', 'BL', 'BN', 'BG', 'BI', 'BO', 'BZ', 'BS', 'BR',\n        'CA', 'CL', 'CB', 'CI', 'CE', 'CT', 'CZ', 'CH', 'CO', 'CS', 'CR', 'KR', 'CN', 'EN', 'FM', 'FE', 'FI', 'FG', 'FC',\n        'FR', 'GE', 'GO', 'GR', 'IM', 'IS', 'SP', 'LT', 'LE', 'LC', 'LI', 'LO', 'LU', 'MC', 'MN', 'MS', 'MT', 'VS', 'ME',\n        'MI', 'MO', 'MB', 'NA', 'NO', 'NU', 'OG', 'OT', 'OR', 'PD', 'PA', 'PR', 'PV', 'PG', 'PU', 'PE', 'PC', 'PI', 'PT',\n        'PN', 'PZ', 'PO', 'RG', 'RA', 'RC', 'RE', 'RI', 'RN', 'RM', 'RO', 'SA', 'SS', 'SV', 'SI', 'SR', 'SO', 'TA', 'TE',\n        'TR', 'TO', 'TP', 'TN', 'TV', 'TS', 'UD', 'VA', 'VE', 'VB', 'VC', 'VR', 'VV', 'VI', 'VT'\n      ];\n      \n      if (!validProvinces.includes(address.province.toUpperCase())) {\n        errors.push('Invalid Italian province code');\n        suggestions.push('Please use a valid Italian province code (e.g., RM for Rome, MI for Milan)');\n      }\n    }\n\n    const isValid = errors.length === 0;\n    const formattedAddress = isValid ? \n      `${address.street_address}, ${address.zip_code} ${address.city} (${address.province.toUpperCase()})` : \n      undefined;\n\n    return {\n      isValid,\n      errors,\n      suggestions,\n      formattedAddress,\n    };\n  }\n\n  /**\n   * Analyze business profile completeness and compliance\n   */\n  static analyzeBusinessProfile(merchant: MerchantOutput): BusinessAnalytics {\n    const missingFields: string[] = [];\n    const recommendations: string[] = [];\n    let completenessScore = 0;\n    const totalFields = 6; // Total number of important fields\n\n    // Check required fields\n    if (merchant.fiscal_id) completenessScore++;\n    else missingFields.push('fiscal_id');\n\n    if (merchant.name) completenessScore++;\n    else missingFields.push('name');\n\n    if (merchant.email) completenessScore++;\n    else missingFields.push('email');\n\n    if (merchant.address) {\n      completenessScore++;\n      // Check address completeness\n      if (!merchant.address.street_address) {\n        missingFields.push('address.street_address');\n        recommendations.push('Add complete street address for legal compliance');\n      }\n      if (!merchant.address.zip_code) {\n        missingFields.push('address.zip_code');\n      }\n      if (!merchant.address.city) {\n        missingFields.push('address.city');\n      }\n      if (!merchant.address.province) {\n        missingFields.push('address.province');\n      }\n    } else {\n      missingFields.push('address');\n      recommendations.push('Add complete business address for legal compliance');\n    }\n\n    // Business age calculation (mock implementation)\n    // Note: created_at field not available in OpenAPI schema\n    const registrationDate = new Date().toISOString();\n    const businessAge = Math.floor((Date.now() - new Date(registrationDate).getTime()) / (1000 * 60 * 60 * 24));\n\n    // Generate recommendations\n    if (completenessScore < totalFields) {\n      recommendations.push('Complete all required business information');\n    }\n\n    // Note: phone and website fields not available in OpenAPI schema\n    // Using mock recommendations\n    recommendations.push('Add phone number for better customer communication');\n    recommendations.push('Add website URL to improve business presence');\n\n    // Determine compliance status\n    let complianceStatus: 'compliant' | 'pending' | 'non-compliant' = 'compliant';\n    if (missingFields.length > 0) {\n      complianceStatus = missingFields.length > 2 ? 'non-compliant' : 'pending';\n    }\n\n    return {\n      registrationDate,\n      businessAge,\n      completenessScore: Math.round((completenessScore / totalFields) * 100),\n      missingFields,\n      recommendations,\n      complianceStatus,\n    };\n  }\n\n  /**\n   * Generate business summary\n   */\n  static generateBusinessSummary(merchant: MerchantOutput): string {\n    const addressPart = merchant.address \n      ? ` - ${merchant.address.city}, ${merchant.address.province}`\n      : '';\n    \n    return `${merchant.name} (VAT: ${this.formatFiscalId(merchant.fiscal_id || '')})${addressPart}`;\n  }\n\n  /**\n   * Validate business name format (static utility)\n   */\n  static isValidBusinessName(name: string): boolean {\n    return typeof name === 'string' && \n           name.trim().length > 0 && \n           name.length <= 200 && \n           /^[\\w\\s&.,'()\\-]+$/u.test(name);\n  }\n\n  /**\n   * Normalize business name\n   */\n  static normalizeBusinessName(name: string): string {\n    return name\n      .trim()\n      .replace(/\\s+/g, ' ')\n      .replace(/^\\\\w/, c => c.toUpperCase());\n  }\n\n  /**\n   * Extract province code from address\n   */\n  static getProvinceCode(merchant: MerchantOutput): string | null {\n    return merchant.address?.province || null;\n  }\n\n  /**\n   * Check if merchant is based in specific region\n   */\n  static isInRegion(merchant: MerchantOutput, regionProvinces: string[]): boolean {\n    const province = this.getProvinceCode(merchant);\n    return province ? regionProvinces.includes(province.toUpperCase()) : false;\n  }\n\n  /**\n   * Get Italian business regions\n   */\n  static getItalianRegions(): Record<string, string[]> {\n    return {\n      'Northern Italy': ['AO', 'TO', 'CN', 'AT', 'AL', 'VC', 'BI', 'NO', 'VB', 'VA', 'CO', 'SO', 'MI', 'MB', 'BG', 'BS', 'PV', 'CR', 'MN', 'LO', 'LC', 'BZ', 'TN', 'VR', 'VI', 'BL', 'TV', 'VE', 'PD', 'RO', 'UD', 'PN', 'TS', 'GO', 'PC', 'PR', 'RE', 'MO', 'BO', 'FE', 'RA', 'FC', 'RN', 'GE', 'SV', 'IM', 'SP', 'MS'],\n      'Central Italy': ['LU', 'PT', 'FI', 'LI', 'PI', 'AR', 'SI', 'GR', 'PO', 'PG', 'TR', 'VT', 'RI', 'RM', 'LT', 'FR', 'AQ', 'TE', 'PE', 'CH', 'MC', 'AP', 'AN', 'PU', 'FM'],\n      'Southern Italy': ['CB', 'IS', 'CE', 'BN', 'NA', 'AV', 'SA', 'FG', 'BT', 'BA', 'BR', 'TA', 'MT', 'PZ', 'CS', 'CZ', 'VV', 'RC', 'KR'],\n      'Islands': ['PA', 'ME', 'AG', 'CL', 'EN', 'CT', 'RG', 'SR', 'TP', 'CA', 'CI', 'VS', 'NU', 'OG', 'OR', 'SS', 'OT']\n    };\n  }\n\n  /**\n   * Determine merchant region\n   */\n  static getMerchantRegion(merchant: MerchantOutput): string | null {\n    const province = this.getProvinceCode(merchant);\n    if (!province) return null;\n\n    const regions = this.getItalianRegions();\n    for (const [region, provinces] of Object.entries(regions)) {\n      if (provinces.includes(province.toUpperCase())) {\n        return region;\n      }\n    }\n\n    return null;\n  }\n}\n\n// Re-export for convenience\nexport { MerchantsResource as Merchants };\n\n// Export types for external use\nexport type {\n  MerchantCreateInput,\n  MerchantUpdateInput,\n  MerchantOutput,\n};","/**\n * PEMs Resource - OpenAPI Implementation\n * Type-safe implementation for Point of Sale Module certificate management\n * \n * Features:\n * - PEM certificate lifecycle management\n * - Point of Sale creation and configuration\n * - Certificate validation and renewal\n * - Compliance and audit tracking\n */\n\nimport { BaseOpenAPIResource } from '@/resources/base-openapi';\nimport { PEMEndpoints } from '@/generated/endpoints';\nimport type { HttpClient } from '@/http/client';\nimport type { PEMId } from '@/types/branded';\nimport type { components } from '@/types/generated';\nimport { ValidationError, FiscalError } from '@/errors/index';\n\n// Extract types from OpenAPI generated types\ntype PointOfSaleCreateInput = components['schemas']['A-Cube_GOV-IT_PEL_Platform_Pem.PemCreateInput'];\ntype PointOfSaleOutput = components['schemas']['A-Cube_GOV-IT_PEL_Platform_Pem.PemCreateOutput'];\ntype PEMCertificatesOutput = components['schemas']['A-Cube_GOV-IT_PEL_Platform_Pem.PemCertificatesOutput'];\n\nexport interface PEMValidationOptions {\n  validateCertificateChain?: boolean;\n  checkExpirationDate?: boolean;\n  enforceComplianceRules?: boolean;\n  validateSignatures?: boolean;\n}\n\nexport interface CertificateInfo {\n  id: string;\n  type: CertificateType;\n  status: CertificateStatus;\n  issuer: string;\n  subject: string;\n  validFrom: string;\n  validTo: string;\n  serialNumber: string;\n  fingerprint: string;\n  keyUsage: string[];\n  issuedFor: string;\n}\n\nexport interface CertificateChain {\n  root: CertificateInfo;\n  intermediate?: CertificateInfo[];\n  leaf: CertificateInfo;\n  validationResults: {\n    chainValid: boolean;\n    rootTrusted: boolean;\n    notExpired: boolean;\n    revocationChecked: boolean;\n    issues: string[];\n  };\n}\n\nexport interface PEMConfiguration {\n  pemId: PEMId;\n  deviceSerialNumber: string;\n  certificates: CertificateInfo[];\n  configuration: {\n    fiscalMemorySize: string;\n    supportedOperations: string[];\n    maxDailyTransactions: number;\n    complianceVersion: string;\n  };\n  status: PEMStatus;\n  lastAudit?: string;\n  nextCertificateRenewal?: string;\n}\n\nexport type CertificateType = 'root' | 'intermediate' | 'device' | 'signing' | 'encryption';\nexport type CertificateStatus = 'valid' | 'expired' | 'revoked' | 'pending' | 'invalid';\nexport type PEMStatus = 'active' | 'inactive' | 'maintenance' | 'compliance_check' | 'certificate_renewal';\nexport type ComplianceLevel = 'full' | 'partial' | 'non_compliant' | 'under_review';\n\n/**\n * PEMs Resource Class - OpenAPI Based\n * Manages PEM devices and certificates with full Italian compliance\n */\nexport class PEMsResource extends BaseOpenAPIResource {\n  constructor(client: HttpClient) {\n    super({\n      client,\n      endpoints: {\n        createPOS: PEMEndpoints.CREATE_POS,\n        getCertificates: PEMEndpoints.GET_CERTIFICATES,\n      }\n    });\n  }\n\n  /**\n   * Create a new Point of Sale\n   * \n   * @param data - Point of Sale creation input data\n   * @param options - Validation options\n   * @returns Promise resolving to created Point of Sale\n   */\n  async createPointOfSale(\n    data: PointOfSaleCreateInput, \n    options: PEMValidationOptions = {}\n  ): Promise<PointOfSaleOutput> {\n    // Validate input\n    await this.validatePointOfSaleInput(data, options);\n\n    return this.executeRequest<PointOfSaleCreateInput, PointOfSaleOutput>('createPOS', data, {\n      metadata: {\n        operation: 'create_point_of_sale',\n        merchantUuid: data.merchant_uuid,\n        addressProvided: !!data.address,\n      }\n    });\n  }\n\n  /**\n   * Get certificates for a Point of Sale\n   * \n   * @param posId - Point of Sale ID\n   * @returns Promise resolving to certificate information\n   */\n  async getCertificates(posId: PEMId | string): Promise<CertificateInfo[]> {\n    const response = await this.executeRequest<void, PEMCertificatesOutput>('getCertificates', undefined, {\n      pathParams: { id: posId },\n      metadata: {\n        operation: 'get_pem_certificates',\n        posId,\n      }\n    });\n\n    // Transform response to CertificateInfo format\n    return this.parseCertificateResponse(response);\n  }\n\n  /**\n   * Validate certificate chain for a PEM device\n   * \n   * @param posId - Point of Sale ID\n   * @returns Promise resolving to certificate chain validation\n   */\n  async validateCertificateChain(posId: PEMId | string): Promise<CertificateChain> {\n    const certificates = await this.getCertificates(posId);\n    return PEMsResource.buildCertificateChain(certificates);\n  }\n\n  /**\n   * Get PEM configuration and status\n   * \n   * @param posId - Point of Sale ID\n   * @returns Promise resolving to PEM configuration\n   */\n  async getConfiguration(posId: PEMId | string): Promise<PEMConfiguration> {\n    const certificates = await this.getCertificates(posId);\n    return PEMsResource.buildPEMConfiguration(posId, certificates);\n  }\n\n  /**\n   * Check compliance status for a PEM device\n   * \n   * @param posId - Point of Sale ID\n   * @returns Promise resolving to compliance assessment\n   */\n  async checkCompliance(posId: PEMId | string): Promise<{\n    level: ComplianceLevel;\n    score: number;\n    issues: string[];\n    recommendations: string[];\n    lastCheck: string;\n    nextCheck: string;\n  }> {\n    const config = await this.getConfiguration(posId);\n    return PEMsResource.assessCompliance(config);\n  }\n\n  /**\n   * Request certificate renewal for a PEM device\n   * \n   * @param posId - Point of Sale ID\n   * @param certificateType - Type of certificate to renew\n   * @returns Promise resolving when renewal is initiated\n   */\n  async requestCertificateRenewal(\n    _posId: PEMId | string, \n    _certificateType: CertificateType = 'device'\n  ): Promise<{ renewalId: string; estimatedCompletion: string }> {\n    // This would typically call a specific renewal endpoint\n    // For now, return a mock response\n    return {\n      renewalId: `renewal_${Date.now()}`,\n      estimatedCompletion: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n    };\n  }\n\n  // Validation methods\n\n  /**\n   * Validate Point of Sale input\n   */\n  private async validatePointOfSaleInput(\n    data: PointOfSaleCreateInput, \n    _options: PEMValidationOptions = {}\n  ): Promise<void> {\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    // Basic validation\n    if (!data.merchant_uuid || data.merchant_uuid.trim().length === 0) {\n      errors.push({\n        field: 'merchant_uuid',\n        message: 'Merchant UUID is required',\n        code: 'REQUIRED'\n      });\n    }\n\n    if (!data.address) {\n      errors.push({\n        field: 'address',\n        message: 'Address is required for PEM registration',\n        code: 'REQUIRED'\n      });\n    } else {\n      const addressErrors = this.validateAddress(data.address);\n      errors.push(...addressErrors);\n    }\n\n    // Certificate validation - certificates field not available in OpenAPI schema\n    // Commenting out until field is available\n    // if (data.certificates && options.validateCertificateChain) {\n    //   const certErrors = await this.validateCertificates(data.certificates);\n    //   errors.push(...certErrors);\n    // }\n\n    if (errors.length > 0) {\n      throw new ValidationError('Invalid Point of Sale input', 'create_point_of_sale', errors);\n    }\n  }\n\n  /**\n   * Validate address information\n   */\n  private validateAddress(address: components['schemas']['A-Cube_GOV-IT_PEL_Platform_Address']): Array<{ field: string; message: string; code: string }> {\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    if (!address.street_address) {\n      errors.push({\n        field: 'address.street_address',\n        message: 'Street address is required',\n        code: 'REQUIRED'\n      });\n    }\n\n    if (!address.city) {\n      errors.push({\n        field: 'address.city',\n        message: 'City is required',\n        code: 'REQUIRED'\n      });\n    }\n\n    if (!address.zip_code || !/^\\d{5}$/.test(address.zip_code)) {\n      errors.push({\n        field: 'address.zip_code',\n        message: 'Valid 5-digit ZIP code is required',\n        code: 'INVALID_FORMAT'\n      });\n    }\n\n    if (!address.province || address.province.length !== 2) {\n      errors.push({\n        field: 'address.province',\n        message: 'Valid 2-character province code is required',\n        code: 'INVALID_FORMAT'\n      });\n    }\n\n    return errors;\n  }\n\n  /**\n   * Validate certificates\n   * @deprecated This method is not used since certificates field is not available in OpenAPI schema\n   */\n  // private async validateCertificates(certificates: CertificateInfo[]): Promise<Array<{ field: string; message: string; code: string }>> {\n  //   const errors: Array<{ field: string; message: string; code: string }> = [];\n\n  //   for (let i = 0; i < certificates.length; i++) {\n  //     const cert = certificates[i];\n  //     if (!cert) continue;\n      \n  //     if (!cert.type || !['root', 'intermediate', 'device', 'signing', 'encryption'].includes(cert.type)) {\n  //       errors.push({\n  //         field: `certificates[${i}].type`,\n  //         message: 'Invalid certificate type',\n  //         code: 'INVALID_CERTIFICATE_TYPE'\n  //       });\n  //     }\n\n  //     if (!cert.validTo || new Date(cert.validTo) <= new Date()) {\n  //       errors.push({\n  //         field: `certificates[${i}].validTo`,\n  //         message: 'Certificate is expired or expiring soon',\n  //         code: 'CERTIFICATE_EXPIRED'\n  //       });\n  //     }\n  //   }\n\n  //   return errors;\n  // }\n\n  /**\n   * Parse certificate response from API\n   */\n  private parseCertificateResponse(response: PEMCertificatesOutput): CertificateInfo[] {\n    // Transform API response to CertificateInfo format\n    if (!response) {\n      return [];\n    }\n\n    const certificates: CertificateInfo[] = [];\n    \n    // Parse the MTLS certificate if available\n    if (response.mtls_certificate) {\n      certificates.push({\n        id: 'mtls_cert',\n        type: 'device',\n        status: 'valid',\n        issuer: 'Italian Tax Agency',\n        subject: 'PEM Device',\n        validFrom: new Date().toISOString(),\n        validTo: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(),\n        serialNumber: 'MTLS001',\n        fingerprint: response.mtls_certificate.substring(0, 40),\n        keyUsage: ['digitalSignature', 'keyEncipherment'],\n        issuedFor: 'PEM Device',\n      });\n    }\n\n    return certificates;\n  }\n\n  // Static utility methods\n\n  /**\n   * Build certificate chain from individual certificates\n   */\n  static buildCertificateChain(certificates: CertificateInfo[]): CertificateChain {\n    const root = certificates.find(cert => cert.type === 'root');\n    const intermediate = certificates.filter(cert => cert.type === 'intermediate');\n    const leaf = certificates.find(cert => cert.type === 'device') || certificates[0];\n\n    if (!root || !leaf) {\n      throw new FiscalError('Invalid certificate chain: missing root or leaf certificate', 'build_certificate_chain');\n    }\n\n    const validationResults = this.validateCertificateChain(certificates);\n\n    return {\n      root,\n      intermediate,\n      leaf,\n      validationResults,\n    };\n  }\n\n  /**\n   * Validate certificate chain integrity\n   */\n  private static validateCertificateChain(certificates: CertificateInfo[]): {\n    chainValid: boolean;\n    rootTrusted: boolean;\n    notExpired: boolean;\n    revocationChecked: boolean;\n    issues: string[];\n  } {\n    const issues: string[] = [];\n    const now = new Date();\n\n    // Check for expired certificates\n    const expiredCerts = certificates.filter(cert => new Date(cert.validTo) <= now);\n    if (expiredCerts.length > 0) {\n      issues.push(`${expiredCerts.length} certificate(s) are expired`);\n    }\n\n    // Check for revoked certificates\n    const revokedCerts = certificates.filter(cert => cert.status === 'revoked');\n    if (revokedCerts.length > 0) {\n      issues.push(`${revokedCerts.length} certificate(s) are revoked`);\n    }\n\n    // Check chain completeness\n    const hasRoot = certificates.some(cert => cert.type === 'root');\n    const hasLeaf = certificates.some(cert => cert.type === 'device');\n    if (!hasRoot) issues.push('Missing root certificate');\n    if (!hasLeaf) issues.push('Missing device certificate');\n\n    return {\n      chainValid: hasRoot && hasLeaf && issues.length === 0,\n      rootTrusted: hasRoot,\n      notExpired: expiredCerts.length === 0,\n      revocationChecked: true, // Mock implementation\n      issues,\n    };\n  }\n\n  /**\n   * Build PEM configuration from certificates\n   */\n  static buildPEMConfiguration(posId: PEMId | string, certificates: CertificateInfo[]): PEMConfiguration {\n    const deviceCert = certificates.find(cert => cert.type === 'device');\n    const now = new Date();\n\n    return {\n      pemId: posId as PEMId,\n      deviceSerialNumber: deviceCert?.serialNumber || 'unknown',\n      certificates,\n      configuration: {\n        fiscalMemorySize: '32MB',\n        supportedOperations: ['sale', 'return', 'void', 'daily_close'],\n        maxDailyTransactions: 1000,\n        complianceVersion: '2.1.0',\n      },\n      status: this.determinePEMStatus(certificates),\n      lastAudit: new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n      nextCertificateRenewal: this.calculateNextRenewal(certificates),\n    };\n  }\n\n  /**\n   * Determine PEM status based on certificates\n   */\n  private static determinePEMStatus(certificates: CertificateInfo[]): PEMStatus {\n    const now = new Date();\n    const thirtyDaysFromNow = new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000);\n\n    // Check for expired certificates\n    const hasExpired = certificates.some(cert => new Date(cert.validTo) <= now);\n    if (hasExpired) return 'maintenance';\n\n    // Check for certificates expiring soon\n    const hasExpiringSoon = certificates.some(cert => new Date(cert.validTo) <= thirtyDaysFromNow);\n    if (hasExpiringSoon) return 'certificate_renewal';\n\n    // Check for revoked certificates\n    const hasRevoked = certificates.some(cert => cert.status === 'revoked');\n    if (hasRevoked) return 'compliance_check';\n\n    return 'active';\n  }\n\n  /**\n   * Calculate next certificate renewal date\n   */\n  private static calculateNextRenewal(certificates: CertificateInfo[]): string {\n    if (certificates.length === 0) return new Date().toISOString();\n\n    const earliestExpiry = certificates\n      .map(cert => new Date(cert.validTo))\n      .sort((a, b) => a.getTime() - b.getTime())[0];\n\n    if (!earliestExpiry) {\n      return new Date().toISOString();\n    }\n\n    // Schedule renewal 60 days before expiry\n    const renewalDate = new Date(earliestExpiry.getTime() - 60 * 24 * 60 * 60 * 1000);\n    return renewalDate.toISOString();\n  }\n\n  /**\n   * Assess compliance level\n   */\n  static assessCompliance(config: PEMConfiguration): {\n    level: ComplianceLevel;\n    score: number;\n    issues: string[];\n    recommendations: string[];\n    lastCheck: string;\n    nextCheck: string;\n  } {\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n    let score = 100;\n\n    // Check certificate status\n    const expiredCerts = config.certificates.filter(cert => new Date(cert.validTo) <= new Date());\n    if (expiredCerts.length > 0) {\n      score -= 30;\n      issues.push(`${expiredCerts.length} expired certificate(s)`);\n      recommendations.push('Renew expired certificates immediately');\n    }\n\n    const expiringSoon = config.certificates.filter(cert => {\n      const expiryDate = new Date(cert.validTo);\n      const thirtyDaysFromNow = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);\n      return expiryDate <= thirtyDaysFromNow && expiryDate > new Date();\n    });\n\n    if (expiringSoon.length > 0) {\n      score -= 15;\n      issues.push(`${expiringSoon.length} certificate(s) expiring within 30 days`);\n      recommendations.push('Schedule certificate renewal');\n    }\n\n    // Check audit compliance\n    if (config.lastAudit) {\n      const lastAuditDate = new Date(config.lastAudit);\n      const sixMonthsAgo = new Date(Date.now() - 180 * 24 * 60 * 60 * 1000);\n      \n      if (lastAuditDate < sixMonthsAgo) {\n        score -= 20;\n        issues.push('Audit overdue (last audit more than 6 months ago)');\n        recommendations.push('Schedule compliance audit');\n      }\n    } else {\n      score -= 25;\n      issues.push('No audit history found');\n      recommendations.push('Conduct initial compliance audit');\n    }\n\n    // Determine compliance level\n    let level: ComplianceLevel = 'full';\n    if (score < 70) level = 'non_compliant';\n    else if (score < 85) level = 'partial';\n    else if (issues.length > 0) level = 'under_review';\n\n    const now = new Date();\n    return {\n      level,\n      score: Math.max(0, score),\n      issues,\n      recommendations,\n      lastCheck: now.toISOString(),\n      nextCheck: new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n    };\n  }\n\n  /**\n   * Format certificate for display\n   */\n  static formatCertificateForDisplay(cert: CertificateInfo): {\n    displayName: string;\n    statusBadge: string;\n    validity: string;\n    issuerShort: string;\n    expiresIn: string;\n  } {\n    const now = new Date();\n    const expiryDate = new Date(cert.validTo);\n    const daysUntilExpiry = Math.ceil((expiryDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n\n    return {\n      displayName: `${cert.type.toUpperCase()} Certificate`,\n      statusBadge: cert.status.toUpperCase(),\n      validity: `${cert.validFrom.split('T')[0]} to ${cert.validTo.split('T')[0]}`,\n      issuerShort: cert.issuer.split(',')[0] || cert.issuer,\n      expiresIn: daysUntilExpiry > 0 ? `${daysUntilExpiry} days` : 'Expired',\n    };\n  }\n\n  /**\n   * Generate certificate summary report\n   */\n  static generateCertificateSummary(certificates: CertificateInfo[]): {\n    totalCertificates: number;\n    validCertificates: number;\n    expiredCertificates: number;\n    expiringSoon: number;\n    revokedCertificates: number;\n    typeBreakdown: Record<CertificateType, number>;\n    nextExpiry: string | null;\n  } {\n    const now = new Date();\n    const thirtyDaysFromNow = new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000);\n\n    const summary = {\n      totalCertificates: certificates.length,\n      validCertificates: 0,\n      expiredCertificates: 0,\n      expiringSoon: 0,\n      revokedCertificates: 0,\n      typeBreakdown: {} as Record<CertificateType, number>,\n      nextExpiry: null as string | null,\n    };\n\n    let earliestExpiry: Date | null = null;\n\n    for (const cert of certificates) {\n      const expiryDate = new Date(cert.validTo);\n\n      // Count by status\n      if (cert.status === 'revoked') {\n        summary.revokedCertificates++;\n      } else if (expiryDate <= now) {\n        summary.expiredCertificates++;\n      } else if (expiryDate <= thirtyDaysFromNow) {\n        summary.expiringSoon++;\n      } else {\n        summary.validCertificates++;\n      }\n\n      // Count by type\n      summary.typeBreakdown[cert.type] = (summary.typeBreakdown[cert.type] || 0) + 1;\n\n      // Track earliest expiry\n      if (!earliestExpiry || expiryDate < earliestExpiry) {\n        earliestExpiry = expiryDate;\n      }\n    }\n\n    summary.nextExpiry = earliestExpiry ? earliestExpiry.toISOString().split('T')[0] || null : null;\n\n    return summary;\n  }\n\n  /**\n   * Validate certificate signature (placeholder implementation)\n   */\n  static validateCertificateSignature(cert: CertificateInfo, issuerCert?: CertificateInfo): {\n    valid: boolean;\n    error?: string;\n  } {\n    // This would implement actual cryptographic signature validation\n    // For now, return a mock validation\n    if (!issuerCert && cert.type !== 'root') {\n      return {\n        valid: false,\n        error: 'Cannot validate signature without issuer certificate',\n      };\n    }\n\n    // Mock validation logic\n    const isValid = cert.fingerprint && cert.fingerprint !== 'unknown';\n    \n    return {\n      valid: !!isValid,\n      ...(isValid ? {} : { error: 'Invalid certificate signature' }),\n    };\n  }\n\n  /**\n   * Generate certificate renewal request\n   */\n  static generateRenewalRequest(cert: CertificateInfo): {\n    certificateId: string;\n    currentExpiry: string;\n    requestedValidityPeriod: number;\n    justification: string;\n    urgency: 'low' | 'medium' | 'high' | 'critical';\n  } {\n    const now = new Date();\n    const expiryDate = new Date(cert.validTo);\n    const daysUntilExpiry = Math.ceil((expiryDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n\n    let urgency: 'low' | 'medium' | 'high' | 'critical' = 'low';\n    if (daysUntilExpiry <= 0) urgency = 'critical';\n    else if (daysUntilExpiry <= 7) urgency = 'high';\n    else if (daysUntilExpiry <= 30) urgency = 'medium';\n\n    return {\n      certificateId: cert.id,\n      currentExpiry: cert.validTo,\n      requestedValidityPeriod: 365, // Days\n      justification: daysUntilExpiry <= 30 ? 'Certificate expiring soon' : 'Routine renewal',\n      urgency,\n    };\n  }\n}\n\n// Re-export for convenience\nexport { PEMsResource as PEMs };\n\n// Export types for external use\nexport type {\n  PointOfSaleCreateInput,\n  PointOfSaleOutput,\n};","/**\n * Circuit Breaker Pattern Implementation\n * Prevents cascading failures by monitoring service health\n */\n\nimport { CircuitBreakerError } from '../errors';\n\nexport type CircuitBreakerState = 'CLOSED' | 'OPEN' | 'HALF_OPEN';\n\nexport interface CircuitBreakerConfig {\n  failureThreshold: number;\n  successThreshold: number;\n  timeout: number;\n  resetTimeout: number;\n  healthCheckInterval?: number;\n  name?: string;\n}\n\nexport interface CircuitBreakerMetrics {\n  totalRequests: number;\n  successfulRequests: number;\n  failedRequests: number;\n  consecutiveFailures: number;\n  consecutiveSuccesses: number;\n  lastFailureTime: number | null;\n  lastSuccessTime: number | null;\n  stateChanges: Array<{\n    from: CircuitBreakerState;\n    to: CircuitBreakerState;\n    timestamp: number;\n    reason: string;\n  }>;\n}\n\nexport class CircuitBreaker {\n  private state: CircuitBreakerState = 'CLOSED';\n  private metrics: CircuitBreakerMetrics = {\n    totalRequests: 0,\n    successfulRequests: 0,\n    failedRequests: 0,\n    consecutiveFailures: 0,\n    consecutiveSuccesses: 0,\n    lastFailureTime: null,\n    lastSuccessTime: null,\n    stateChanges: [],\n  };\n  private nextAttemptTime = 0;\n  private healthCheckTimer: NodeJS.Timeout | null = null;\n\n  constructor(private config: CircuitBreakerConfig) {\n    if (config.healthCheckInterval) {\n      this.startHealthCheck();\n    }\n  }\n\n  async execute<T>(\n    operation: () => Promise<T>,\n    operationName = 'unknown'\n  ): Promise<T> {\n    if (this.shouldRejectRequest()) {\n      throw new CircuitBreakerError(\n        `Circuit breaker is ${this.state} for operation: ${operationName}`,\n        operationName,\n        this.state as 'OPEN' | 'HALF_OPEN'\n      );\n    }\n\n    this.metrics.totalRequests++;\n\n    try {\n      const result = await this.executeWithTimeout(operation);\n      this.onSuccess();\n      return result;\n    } catch (error) {\n      this.onFailure();\n      throw error;\n    }\n  }\n\n  private async executeWithTimeout<T>(\n    operation: () => Promise<T>\n  ): Promise<T> {\n    const timeoutPromise = new Promise<never>((_, reject) => {\n      setTimeout(() => {\n        reject(new Error(`Operation timeout after ${this.config.timeout}ms`));\n      }, this.config.timeout);\n    });\n\n    return Promise.race([operation(), timeoutPromise]);\n  }\n\n  private shouldRejectRequest(): boolean {\n    switch (this.state) {\n      case 'CLOSED':\n        return false;\n      case 'OPEN':\n        return Date.now() < this.nextAttemptTime;\n      case 'HALF_OPEN':\n        return false;\n      default:\n        return false;\n    }\n  }\n\n  private onSuccess(): void {\n    this.metrics.successfulRequests++;\n    this.metrics.consecutiveSuccesses++;\n    this.metrics.consecutiveFailures = 0;\n    this.metrics.lastSuccessTime = Date.now();\n\n    switch (this.state) {\n      case 'HALF_OPEN':\n        if (this.metrics.consecutiveSuccesses >= this.config.successThreshold) {\n          this.transitionTo('CLOSED', 'Success threshold reached');\n        }\n        break;\n      case 'OPEN':\n        this.transitionTo('HALF_OPEN', 'First success after opening');\n        break;\n    }\n  }\n\n  private onFailure(): void {\n    this.metrics.failedRequests++;\n    this.metrics.consecutiveFailures++;\n    this.metrics.consecutiveSuccesses = 0;\n    this.metrics.lastFailureTime = Date.now();\n\n    switch (this.state) {\n      case 'CLOSED':\n        if (this.metrics.consecutiveFailures >= this.config.failureThreshold) {\n          this.transitionTo('OPEN', 'Failure threshold reached');\n        }\n        break;\n      case 'HALF_OPEN':\n        this.transitionTo('OPEN', 'Failed during half-open state');\n        break;\n    }\n  }\n\n  private transitionTo(newState: CircuitBreakerState, reason: string): void {\n    const oldState = this.state;\n    this.state = newState;\n\n    this.metrics.stateChanges.push({\n      from: oldState,\n      to: newState,\n      timestamp: Date.now(),\n      reason,\n    });\n\n    // Keep only last 100 state changes\n    if (this.metrics.stateChanges.length > 100) {\n      this.metrics.stateChanges.shift();\n    }\n\n    if (newState === 'OPEN') {\n      this.nextAttemptTime = Date.now() + this.config.resetTimeout;\n    }\n\n    console.log(`Circuit breaker ${this.config.name || 'unnamed'} transitioned from ${oldState} to ${newState}: ${reason}`);\n  }\n\n  private startHealthCheck(): void {\n    if (this.config.healthCheckInterval) {\n      this.healthCheckTimer = setInterval(() => {\n        this.performHealthCheck();\n      }, this.config.healthCheckInterval);\n    }\n  }\n\n  private performHealthCheck(): void {\n    if (this.state === 'OPEN' && Date.now() >= this.nextAttemptTime) {\n      this.transitionTo('HALF_OPEN', 'Health check triggered state change');\n    }\n  }\n\n  public getState(): CircuitBreakerState {\n    return this.state;\n  }\n\n  public getMetrics(): Readonly<CircuitBreakerMetrics> {\n    return { ...this.metrics };\n  }\n\n  public reset(): void {\n    this.state = 'CLOSED';\n    this.metrics = {\n      totalRequests: 0,\n      successfulRequests: 0,\n      failedRequests: 0,\n      consecutiveFailures: 0,\n      consecutiveSuccesses: 0,\n      lastFailureTime: null,\n      lastSuccessTime: null,\n      stateChanges: [],\n    };\n    this.nextAttemptTime = 0;\n  }\n\n  public destroy(): void {\n    if (this.healthCheckTimer) {\n      clearInterval(this.healthCheckTimer);\n      this.healthCheckTimer = null;\n    }\n  }\n\n  public getHealthStatus(): {\n    isHealthy: boolean;\n    failureRate: number;\n    avgResponseTime?: number;\n    uptime: number;\n  } {\n    const now = Date.now();\n    const uptime = this.metrics.lastSuccessTime \n      ? now - this.metrics.lastSuccessTime \n      : 0;\n    \n    const failureRate = this.metrics.totalRequests > 0 \n      ? this.metrics.failedRequests / this.metrics.totalRequests \n      : 0;\n\n    return {\n      isHealthy: this.state === 'CLOSED' && failureRate < 0.5,\n      failureRate,\n      uptime,\n    };\n  }\n}","/**\n * Advanced Retry Logic with Exponential Backoff and Jitter\n * Prevents thundering herd problem and provides intelligent retry policies\n */\n\nimport { ACubeSDKError } from '../errors';\n\nexport interface RetryConfig {\n  maxAttempts: number;\n  baseDelay: number;\n  maxDelay: number;\n  backoffMultiplier: number;\n  jitterType: 'none' | 'full' | 'equal' | 'decorrelated';\n  retryableStatusCodes: number[];\n  retryableErrors: string[];\n  timeout?: number;\n}\n\nexport interface RetryAttempt {\n  attempt: number;\n  delay: number;\n  error: Error;\n  timestamp: number;\n}\n\nexport interface RetryMetrics {\n  totalAttempts: number;\n  successfulRetries: number;\n  failedRetries: number;\n  averageDelay: number;\n  attempts: RetryAttempt[];\n}\n\nexport class RetryHandler {\n  private metrics: RetryMetrics = {\n    totalAttempts: 0,\n    successfulRetries: 0,\n    failedRetries: 0,\n    averageDelay: 0,\n    attempts: [],\n  };\n\n  constructor(private config: RetryConfig) {}\n\n  async execute<T>(\n    operation: () => Promise<T>,\n    operationName = 'unknown'\n  ): Promise<T> {\n    let lastError: Error | null = null;\n    let nextDelay = this.config.baseDelay;\n\n    for (let attempt = 1; attempt <= this.config.maxAttempts; attempt++) {\n      this.metrics.totalAttempts++;\n\n      try {\n        const result = await this.executeWithTimeout(operation);\n        \n        if (attempt > 1) {\n          this.metrics.successfulRetries++;\n        }\n        \n        return result;\n      } catch (error) {\n        lastError = error as Error;\n        \n        const retryAttempt: RetryAttempt = {\n          attempt,\n          delay: nextDelay,\n          error: lastError,\n          timestamp: Date.now(),\n        };\n        \n        this.metrics.attempts.push(retryAttempt);\n        \n        // Keep only last 100 attempts\n        if (this.metrics.attempts.length > 100) {\n          this.metrics.attempts.shift();\n        }\n\n        // Check if we should retry\n        if (attempt === this.config.maxAttempts || !this.shouldRetry(lastError)) {\n          this.metrics.failedRetries++;\n          break;\n        }\n\n        // Calculate delay with jitter\n        const delay = this.calculateDelay(attempt, nextDelay);\n        \n        console.log(\n          `Retrying ${operationName} (attempt ${attempt}/${this.config.maxAttempts}) after ${delay}ms delay. Error: ${lastError.message}`\n        );\n\n        await this.sleep(delay);\n        \n        // Update delay for next iteration\n        nextDelay = Math.min(\n          nextDelay * this.config.backoffMultiplier,\n          this.config.maxDelay\n        );\n      }\n    }\n\n    // All retries exhausted\n    throw lastError || new Error('Unknown error during retry execution');\n  }\n\n  private async executeWithTimeout<T>(\n    operation: () => Promise<T>\n  ): Promise<T> {\n    if (!this.config.timeout) {\n      return operation();\n    }\n\n    const timeoutPromise = new Promise<never>((_, reject) => {\n      setTimeout(() => {\n        reject(new Error(`Operation timeout after ${this.config.timeout}ms`));\n      }, this.config.timeout);\n    });\n\n    return Promise.race([operation(), timeoutPromise]);\n  }\n\n  private shouldRetry(error: Error): boolean {\n    // Check if error is explicitly marked as retryable\n    if (error instanceof ACubeSDKError) {\n      return error.retryable;\n    }\n\n    // Check HTTP status codes\n    const statusCode = this.extractStatusCode(error);\n    if (statusCode && this.config.retryableStatusCodes.includes(statusCode)) {\n      return true;\n    }\n\n    // Check error types/codes\n    const errorCode = this.extractErrorCode(error);\n    if (errorCode && this.config.retryableErrors.includes(errorCode)) {\n      return true;\n    }\n\n    // Network errors are generally retryable\n    if (this.isNetworkError(error)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private calculateDelay(_attempt: number, baseDelay: number): number {\n    switch (this.config.jitterType) {\n      case 'none':\n        return baseDelay;\n      \n      case 'full':\n        return Math.random() * baseDelay;\n      \n      case 'equal':\n        return baseDelay / 2 + Math.random() * (baseDelay / 2);\n      \n      case 'decorrelated':\n        // Decorrelated jitter: sleep = random_between(base_delay, previous_sleep * 3)\n        return Math.random() * (Math.min(this.config.maxDelay, baseDelay * 3) - this.config.baseDelay) + this.config.baseDelay;\n      \n      default:\n        return baseDelay;\n    }\n  }\n\n  private extractStatusCode(error: Error): number | null {\n    // Try different ways to extract status code\n    const err = error as any;\n    return err.statusCode || err.status || err.response?.status || null;\n  }\n\n  private extractErrorCode(error: Error): string | null {\n    const err = error as any;\n    return err.code || err.errno || error.name || null;\n  }\n\n  private isNetworkError(error: Error): boolean {\n    const networkErrorCodes = [\n      'ECONNRESET',\n      'ECONNREFUSED',\n      'ETIMEDOUT',\n      'ENOTFOUND',\n      'ENETUNREACH',\n      'EAI_AGAIN',\n      'ECONNABORTED',\n    ];\n\n    const errorCode = this.extractErrorCode(error);\n    return errorCode ? networkErrorCodes.includes(errorCode) : false;\n  }\n\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  public getMetrics(): Readonly<RetryMetrics> {\n    const totalDelay = this.metrics.attempts.reduce((sum, attempt) => sum + attempt.delay, 0);\n    \n    return {\n      ...this.metrics,\n      averageDelay: this.metrics.attempts.length > 0 ? totalDelay / this.metrics.attempts.length : 0,\n    };\n  }\n\n  public reset(): void {\n    this.metrics = {\n      totalAttempts: 0,\n      successfulRetries: 0,\n      failedRetries: 0,\n      averageDelay: 0,\n      attempts: [],\n    };\n  }\n}\n\n// Predefined retry configurations\nexport const DEFAULT_RETRY_CONFIG: RetryConfig = {\n  maxAttempts: 3,\n  baseDelay: 1000,\n  maxDelay: 30000,\n  backoffMultiplier: 2,\n  jitterType: 'equal',\n  retryableStatusCodes: [500, 502, 503, 504, 429],\n  retryableErrors: [\n    'ECONNRESET',\n    'ECONNREFUSED',\n    'ETIMEDOUT',\n    'ENOTFOUND',\n    'ENETUNREACH',\n    'NETWORK_ERROR',\n    'RATE_LIMIT_ERROR',\n  ],\n  timeout: 30000,\n};\n\nexport const AGGRESSIVE_RETRY_CONFIG: RetryConfig = {\n  maxAttempts: 5,\n  baseDelay: 500,\n  maxDelay: 60000,\n  backoffMultiplier: 2.5,\n  jitterType: 'decorrelated',\n  retryableStatusCodes: [500, 502, 503, 504, 429, 408],\n  retryableErrors: [\n    'ECONNRESET',\n    'ECONNREFUSED',\n    'ETIMEDOUT',\n    'ENOTFOUND',\n    'ENETUNREACH',\n    'NETWORK_ERROR',\n    'RATE_LIMIT_ERROR',\n    'CIRCUIT_BREAKER_ERROR',\n  ],\n  timeout: 45000,\n};\n\nexport const CONSERVATIVE_RETRY_CONFIG: RetryConfig = {\n  maxAttempts: 2,\n  baseDelay: 2000,\n  maxDelay: 10000,\n  backoffMultiplier: 1.5,\n  jitterType: 'full',\n  retryableStatusCodes: [500, 502, 503, 504],\n  retryableErrors: ['NETWORK_ERROR'],\n  timeout: 15000,\n};","/**\n * Middleware Stack for HTTP Client\n * Allows for request/response interception and modification\n */\n\nexport interface RequestContext {\n  url: string;\n  method: string;\n  headers: Record<string, string>;\n  body?: unknown;\n  metadata: Record<string, unknown>;\n  startTime: number;\n  requestId: string;\n}\n\nexport interface ResponseContext {\n  status: number;\n  statusText: string;\n  headers: Record<string, string>;\n  data: unknown;\n  metadata: Record<string, unknown>;\n  endTime: number;\n  duration: number;\n}\n\nexport interface Middleware {\n  name: string;\n  priority: number;\n  \n  beforeRequest?(context: RequestContext): Promise<RequestContext> | RequestContext;\n  afterResponse?(\n    context: RequestContext,\n    response: ResponseContext\n  ): Promise<ResponseContext> | ResponseContext;\n  onError?(\n    context: RequestContext,\n    error: Error\n  ): Promise<Error | void> | Error | void;\n}\n\nexport class MiddlewareStack {\n  private middlewares: Middleware[] = [];\n\n  add(middleware: Middleware): this {\n    this.middlewares.push(middleware);\n    // Sort by priority (higher priority first)\n    this.middlewares.sort((a, b) => b.priority - a.priority);\n    return this;\n  }\n\n  remove(name: string): this {\n    this.middlewares = this.middlewares.filter(m => m.name !== name);\n    return this;\n  }\n\n  async executeBeforeRequest(context: RequestContext): Promise<RequestContext> {\n    let currentContext = context;\n    \n    for (const middleware of this.middlewares) {\n      if (middleware.beforeRequest) {\n        try {\n          currentContext = await middleware.beforeRequest(currentContext);\n        } catch (error) {\n          console.warn(`Middleware ${middleware.name} failed in beforeRequest:`, error);\n          // Continue with other middlewares\n        }\n      }\n    }\n    \n    return currentContext;\n  }\n\n  async executeAfterResponse(\n    context: RequestContext,\n    response: ResponseContext\n  ): Promise<ResponseContext> {\n    let currentResponse = response;\n    \n    // Execute in reverse order for response middlewares\n    for (const middleware of [...this.middlewares].reverse()) {\n      if (middleware.afterResponse) {\n        try {\n          currentResponse = await middleware.afterResponse(context, currentResponse);\n        } catch (error) {\n          console.warn(`Middleware ${middleware.name} failed in afterResponse:`, error);\n          // Continue with other middlewares\n        }\n      }\n    }\n    \n    return currentResponse;\n  }\n\n  async executeOnError(\n    context: RequestContext,\n    error: Error\n  ): Promise<Error> {\n    let currentError = error;\n    \n    for (const middleware of this.middlewares) {\n      if (middleware.onError) {\n        try {\n          const result = await middleware.onError(context, currentError);\n          if (result instanceof Error) {\n            currentError = result;\n          }\n          // If void is returned, keep the current error\n        } catch (middlewareError) {\n          console.warn(`Middleware ${middleware.name} failed in onError:`, middlewareError);\n          // Continue with other middlewares\n        }\n      }\n    }\n    \n    return currentError;\n  }\n\n  getMiddlewares(): Readonly<Middleware[]> {\n    return [...this.middlewares];\n  }\n\n  clear(): this {\n    this.middlewares = [];\n    return this;\n  }\n}\n\n// Built-in middlewares\n\n// Authentication middleware\nexport class AuthenticationMiddleware implements Middleware {\n  name = 'authentication';\n  priority = 100;\n\n  constructor(private getToken: () => Promise<string | null>) {}\n\n  async beforeRequest(context: RequestContext): Promise<RequestContext> {\n    const token = await this.getToken();\n    if (token) {\n      context.headers.Authorization = `Bearer ${token}`;\n    }\n    return context;\n  }\n}\n\n// Request ID middleware\nexport class RequestIdMiddleware implements Middleware {\n  name = 'request-id';\n  priority = 90;\n\n  beforeRequest(context: RequestContext): RequestContext {\n    if (!context.headers['X-Request-ID']) {\n      context.headers['X-Request-ID'] = context.requestId;\n    }\n    return context;\n  }\n}\n\n// User Agent middleware\nexport class UserAgentMiddleware implements Middleware {\n  name = 'user-agent';\n  priority = 80;\n\n  constructor(private userAgent: string) {}\n\n  beforeRequest(context: RequestContext): RequestContext {\n    if (!context.headers['User-Agent']) {\n      context.headers['User-Agent'] = this.userAgent;\n    }\n    return context;\n  }\n}\n\n// Content Type middleware\nexport class ContentTypeMiddleware implements Middleware {\n  name = 'content-type';\n  priority = 70;\n\n  beforeRequest(context: RequestContext): RequestContext {\n    if (context.body && !context.headers['Content-Type']) {\n      context.headers['Content-Type'] = 'application/json';\n    }\n    return context;\n  }\n}\n\n// Request/Response logging middleware\nexport class LoggingMiddleware implements Middleware {\n  name = 'logging';\n  priority = 10;\n\n  constructor(\n    private logger: {\n      debug: (message: string, meta?: unknown) => void;\n      warn: (message: string, meta?: unknown) => void;\n      error: (message: string, meta?: unknown) => void;\n    },\n    private options: {\n      logRequests: boolean;\n      logResponses: boolean;\n      logHeaders: boolean;\n      logBody: boolean;\n      sanitizeHeaders?: string[];\n    } = {\n      logRequests: true,\n      logResponses: true,\n      logHeaders: false,\n      logBody: false,\n      sanitizeHeaders: ['authorization', 'cookie', 'x-api-key'],\n    }\n  ) {}\n\n  beforeRequest(context: RequestContext): RequestContext {\n    if (this.options.logRequests) {\n      const logData: Record<string, unknown> = {\n        requestId: context.requestId,\n        method: context.method,\n        url: context.url,\n      };\n\n      if (this.options.logHeaders) {\n        logData.headers = this.sanitizeHeaders(context.headers);\n      }\n\n      if (this.options.logBody && context.body) {\n        logData.body = this.sanitizeBody(context.body);\n      }\n\n      this.logger.debug('HTTP Request', logData);\n    }\n    return context;\n  }\n\n  afterResponse(\n    context: RequestContext,\n    response: ResponseContext\n  ): ResponseContext {\n    if (this.options.logResponses) {\n      const logData: Record<string, unknown> = {\n        requestId: context.requestId,\n        status: response.status,\n        statusText: response.statusText,\n        duration: response.duration,\n      };\n\n      if (this.options.logHeaders) {\n        logData.headers = this.sanitizeHeaders(response.headers);\n      }\n\n      if (this.options.logBody && response.data) {\n        logData.body = this.sanitizeBody(response.data);\n      }\n\n      const logLevel = response.status >= 400 ? 'error' : 'debug';\n      this.logger[logLevel]('HTTP Response', logData);\n    }\n    return response;\n  }\n\n  onError(context: RequestContext, error: Error): Error {\n    this.logger.error('HTTP Error', {\n      requestId: context.requestId,\n      method: context.method,\n      url: context.url,\n      error: error.message,\n      stack: error.stack,\n    });\n    return error;\n  }\n\n  private sanitizeHeaders(headers: Record<string, string>): Record<string, string> {\n    const sanitized = { ...headers };\n    \n    this.options.sanitizeHeaders?.forEach(header => {\n      const key = Object.keys(sanitized).find(k => \n        k.toLowerCase() === header.toLowerCase()\n      );\n      if (key) {\n        sanitized[key] = '[REDACTED]';\n      }\n    });\n    \n    return sanitized;\n  }\n\n  private sanitizeBody(body: unknown): unknown {\n    if (typeof body !== 'object' || body === null) {\n      return body;\n    }\n\n    const sensitiveFields = ['password', 'token', 'secret', 'key', 'auth'];\n    const sanitized = { ...body as Record<string, unknown> };\n    \n    Object.keys(sanitized).forEach(key => {\n      if (sensitiveFields.some(field => key.toLowerCase().includes(field))) {\n        sanitized[key] = '[REDACTED]';\n      }\n    });\n    \n    return sanitized;\n  }\n}\n\n// Rate limiting middleware\nexport class RateLimitingMiddleware implements Middleware {\n  name = 'rate-limiting';\n  priority = 50;\n\n  private requests: Map<string, number[]> = new Map();\n\n  constructor(\n    private config: {\n      requestsPerMinute: number;\n      keyGenerator?: (context: RequestContext) => string;\n    }\n  ) {}\n\n  async beforeRequest(context: RequestContext): Promise<RequestContext> {\n    const key = this.config.keyGenerator?.(context) || 'default';\n    const now = Date.now();\n    const windowStart = now - 60000; // 1 minute window\n\n    // Get existing requests for this key\n    const requests = this.requests.get(key) || [];\n    \n    // Remove requests outside the window\n    const recentRequests = requests.filter(time => time > windowStart);\n    \n    // Check if we're over the limit\n    if (recentRequests.length >= this.config.requestsPerMinute) {\n      throw new Error(`Rate limit exceeded: ${this.config.requestsPerMinute} requests per minute`);\n    }\n    \n    // Add current request\n    recentRequests.push(now);\n    this.requests.set(key, recentRequests);\n    \n    return context;\n  }\n}\n\n// Performance monitoring middleware\nexport class PerformanceMiddleware implements Middleware {\n  name = 'performance';\n  priority = 5;\n\n  private metrics: Map<string, {\n    count: number;\n    totalDuration: number;\n    minDuration: number;\n    maxDuration: number;\n  }> = new Map();\n\n  afterResponse(\n    context: RequestContext,\n    response: ResponseContext\n  ): ResponseContext {\n    const endpoint = `${context.method} ${context.url}`;\n    const duration = response.duration;\n    \n    const existing = this.metrics.get(endpoint) || {\n      count: 0,\n      totalDuration: 0,\n      minDuration: Infinity,\n      maxDuration: 0,\n    };\n    \n    this.metrics.set(endpoint, {\n      count: existing.count + 1,\n      totalDuration: existing.totalDuration + duration,\n      minDuration: Math.min(existing.minDuration, duration),\n      maxDuration: Math.max(existing.maxDuration, duration),\n    });\n    \n    return response;\n  }\n\n  getMetrics(): Record<string, {\n    count: number;\n    averageDuration: number;\n    minDuration: number;\n    maxDuration: number;\n  }> {\n    const result: Record<string, any> = {};\n    \n    this.metrics.forEach((value, key) => {\n      result[key] = {\n        count: value.count,\n        averageDuration: value.totalDuration / value.count,\n        minDuration: value.minDuration === Infinity ? 0 : value.minDuration,\n        maxDuration: value.maxDuration,\n      };\n    });\n    \n    return result;\n  }\n\n  reset(): void {\n    this.metrics.clear();\n  }\n}","/**\n * Enterprise HTTP Client with Advanced Features\n * Integrates circuit breaker, retry logic, middleware, and comprehensive error handling\n */\n\nimport { EventEmitter } from 'eventemitter3';\nimport { CircuitBreaker, type CircuitBreakerConfig } from './circuit-breaker';\nimport { RetryHandler, type RetryConfig, DEFAULT_RETRY_CONFIG } from './retry';\nimport { \n  MiddlewareStack, \n  type RequestContext, \n  type ResponseContext,\n  AuthenticationMiddleware,\n  RequestIdMiddleware,\n  UserAgentMiddleware,\n  ContentTypeMiddleware,\n  LoggingMiddleware,\n  type Middleware,\n} from './middleware.js';\nimport { createErrorFromResponse, ACubeSDKError } from '../errors/index.js';\n\nexport interface HttpClientConfig {\n  baseUrl: string;\n  timeout: number;\n  retryConfig: RetryConfig;\n  circuitBreakerConfig: CircuitBreakerConfig;\n  headers: Record<string, string>;\n  enableCircuitBreaker: boolean;\n  enableRetry: boolean;\n  enableLogging: boolean;\n  userAgent: string;\n  getAuthToken?: () => Promise<string | null>;\n}\n\nexport interface RequestOptions {\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  url: string;\n  params?: Record<string, unknown>;\n  data?: unknown;\n  headers?: Record<string, string>;\n  timeout?: number;\n  metadata?: Record<string, unknown>;\n  skipRetry?: boolean;\n  skipCircuitBreaker?: boolean;\n}\n\nexport interface HttpResponse<T = unknown> {\n  data: T;\n  status: number;\n  statusText: string;\n  headers: Record<string, string>;\n  requestId: string;\n  duration: number;\n}\n\nexport class HttpClient extends EventEmitter {\n  private middlewareStack: MiddlewareStack;\n  private circuitBreaker: CircuitBreaker;\n  private retryHandler: RetryHandler;\n  private requestCounter = 0;\n\n  constructor(private config: HttpClientConfig) {\n    super();\n    \n    this.middlewareStack = new MiddlewareStack();\n    this.circuitBreaker = new CircuitBreaker(config.circuitBreakerConfig);\n    this.retryHandler = new RetryHandler(config.retryConfig);\n    \n    this.setupDefaultMiddlewares();\n  }\n\n  private setupDefaultMiddlewares(): void {\n    // Authentication middleware (if token provider available)\n    if (this.config.getAuthToken) {\n      this.middlewareStack.add(new AuthenticationMiddleware(this.config.getAuthToken));\n    }\n\n    // Request ID middleware\n    this.middlewareStack.add(new RequestIdMiddleware());\n\n    // User Agent middleware\n    this.middlewareStack.add(new UserAgentMiddleware(this.config.userAgent));\n\n    // Content Type middleware\n    this.middlewareStack.add(new ContentTypeMiddleware());\n\n    // Logging middleware (if enabled)\n    if (this.config.enableLogging) {\n      this.middlewareStack.add(new LoggingMiddleware(\n        {\n          debug: (msg, meta) => this.emit('debug', msg, meta),\n          warn: (msg, meta) => this.emit('warn', msg, meta),\n          error: (msg, meta) => this.emit('error', msg, meta),\n        },\n        {\n          logRequests: true,\n          logResponses: true,\n          logHeaders: false,\n          logBody: false,\n        }\n      ));\n    }\n  }\n\n  async request<T = unknown>(options: RequestOptions): Promise<HttpResponse<T>> {\n    const requestId = this.generateRequestId();\n    const startTime = Date.now();\n\n    // Create request context\n    const context: RequestContext = {\n      url: this.buildUrl(options.url, options.params),\n      method: options.method,\n      headers: {\n        ...this.config.headers,\n        ...options.headers,\n      },\n      body: options.data,\n      metadata: options.metadata || {},\n      startTime,\n      requestId,\n    };\n\n    const executeRequest = async (): Promise<HttpResponse<T>> => {\n      try {\n        // Execute before request middlewares\n        const processedContext = await this.middlewareStack.executeBeforeRequest(context);\n        \n        // Make the actual HTTP request\n        const response = await this.makeHttpRequest(processedContext, options.timeout);\n        \n        // Execute after response middlewares\n        const processedResponse = await this.middlewareStack.executeAfterResponse(\n          processedContext,\n          response\n        );\n        \n        return {\n          data: processedResponse.data as T,\n          status: processedResponse.status,\n          statusText: processedResponse.statusText,\n          headers: processedResponse.headers,\n          requestId,\n          duration: processedResponse.duration,\n        };\n      } catch (error) {\n        // Execute error middlewares\n        const processedError = await this.middlewareStack.executeOnError(\n          context,\n          error as Error\n        );\n        throw processedError;\n      }\n    };\n\n    try {\n      // Apply circuit breaker if enabled\n      if (this.config.enableCircuitBreaker && !options.skipCircuitBreaker) {\n        if (this.config.enableRetry && !options.skipRetry) {\n          // Both circuit breaker and retry\n          return await this.circuitBreaker.execute(\n            () => this.retryHandler.execute(() => executeRequest(), `${options.method} ${options.url}`),\n            `${options.method} ${options.url}`\n          );\n        } else {\n          // Circuit breaker only\n          return await this.circuitBreaker.execute(\n            executeRequest,\n            `${options.method} ${options.url}`\n          );\n        }\n      } else if (this.config.enableRetry && !options.skipRetry) {\n        // Retry only\n        return await this.retryHandler.execute(\n          executeRequest,\n          `${options.method} ${options.url}`\n        );\n      } else {\n        // No circuit breaker or retry\n        return await executeRequest();\n      }\n    } catch (error) {\n      // Emit error event for monitoring\n      this.emit('requestError', {\n        requestId,\n        method: options.method,\n        url: options.url,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        duration: Date.now() - startTime,\n      });\n      \n      throw error;\n    }\n  }\n\n  private async makeHttpRequest(\n    context: RequestContext,\n    timeoutOverride?: number\n  ): Promise<ResponseContext> {\n    const timeout = timeoutOverride || this.config.timeout;\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n    try {\n      const fetchOptions: RequestInit = {\n        method: context.method,\n        headers: context.headers,\n        signal: controller.signal,\n      };\n\n      if (context.body && context.method !== 'GET') {\n        fetchOptions.body = typeof context.body === 'string' \n          ? context.body \n          : JSON.stringify(context.body);\n      }\n\n      const response = await fetch(context.url, fetchOptions);\n      clearTimeout(timeoutId);\n\n      const endTime = Date.now();\n      const duration = endTime - context.startTime;\n\n      // Parse response data\n      let data: unknown;\n      const contentType = response.headers.get('content-type') || '';\n      \n      if (contentType.includes('application/json')) {\n        data = await response.json();\n      } else if (contentType.includes('application/pdf')) {\n        data = await response.blob();\n      } else if (contentType.includes('text/')) {\n        data = await response.text();\n      } else {\n        data = await response.arrayBuffer();\n      }\n\n      // Convert headers to plain object\n      const headers: Record<string, string> = {};\n      response.headers.forEach((value, key) => {\n        headers[key] = value;\n      });\n\n      const responseContext: ResponseContext = {\n        status: response.status,\n        statusText: response.statusText,\n        headers,\n        data,\n        metadata: {},\n        endTime,\n        duration,\n      };\n\n      // Check for HTTP errors\n      if (!response.ok) {\n        const error = createErrorFromResponse(\n          {\n            status: response.status,\n            statusText: response.statusText,\n            data,\n          },\n          `${context.method} ${context.url}`,\n          context.requestId\n        );\n        throw error;\n      }\n\n      // Emit success event\n      this.emit('requestSuccess', {\n        requestId: context.requestId,\n        method: context.method,\n        url: context.url,\n        status: response.status,\n        duration,\n      });\n\n      return responseContext;\n    } catch (error) {\n      clearTimeout(timeoutId);\n      \n      if (error instanceof ACubeSDKError) {\n        throw error;\n      }\n\n      // Handle network/fetch errors\n      if (error instanceof Error) {\n        if (error.name === 'AbortError') {\n          throw createErrorFromResponse(\n            {\n              status: 408,\n              statusText: 'Request Timeout',\n              data: { message: 'Request timeout' },\n            },\n            `${context.method} ${context.url}`,\n            context.requestId\n          );\n        }\n        \n        throw createErrorFromResponse(\n          {\n            status: 0,\n            statusText: 'Network Error',\n            data: { message: error.message },\n          },\n          `${context.method} ${context.url}`,\n          context.requestId\n        );\n      }\n      \n      throw error;\n    }\n  }\n\n  private buildUrl(path: string, params?: Record<string, unknown>): string {\n    const url = new URL(path, this.config.baseUrl);\n    \n    if (params) {\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          url.searchParams.append(key, String(value));\n        }\n      });\n    }\n    \n    return url.toString();\n  }\n\n  private generateRequestId(): string {\n    return `req_${Date.now()}_${++this.requestCounter}_${Math.random().toString(36).substring(2, 8)}`;\n  }\n\n  // Convenience methods\n  async get<T = unknown>(\n    url: string, \n    options: Omit<RequestOptions, 'method' | 'url'> = {}\n  ): Promise<HttpResponse<T>> {\n    return this.request<T>({ ...options, method: 'GET', url });\n  }\n\n  async post<T = unknown>(\n    url: string,\n    data?: unknown,\n    options: Omit<RequestOptions, 'method' | 'url' | 'data'> = {}\n  ): Promise<HttpResponse<T>> {\n    return this.request<T>({ ...options, method: 'POST', url, data });\n  }\n\n  async put<T = unknown>(\n    url: string,\n    data?: unknown,\n    options: Omit<RequestOptions, 'method' | 'url' | 'data'> = {}\n  ): Promise<HttpResponse<T>> {\n    return this.request<T>({ ...options, method: 'PUT', url, data });\n  }\n\n  async delete<T = unknown>(\n    url: string,\n    options: Omit<RequestOptions, 'method' | 'url'> = {}\n  ): Promise<HttpResponse<T>> {\n    return this.request<T>({ ...options, method: 'DELETE', url });\n  }\n\n  async patch<T = unknown>(\n    url: string,\n    data?: unknown,\n    options: Omit<RequestOptions, 'method' | 'url' | 'data'> = {}\n  ): Promise<HttpResponse<T>> {\n    return this.request<T>({ ...options, method: 'PATCH', url, data });\n  }\n\n  // Middleware management\n  addMiddleware(middleware: Middleware): this {\n    this.middlewareStack.add(middleware);\n    return this;\n  }\n\n  removeMiddleware(name: string): this {\n    this.middlewareStack.remove(name);\n    return this;\n  }\n\n  // Health and metrics\n  getCircuitBreakerMetrics() {\n    return this.circuitBreaker.getMetrics();\n  }\n\n  getRetryMetrics() {\n    return this.retryHandler.getMetrics();\n  }\n\n  getHealthStatus() {\n    return {\n      circuitBreaker: this.circuitBreaker.getHealthStatus(),\n      retry: this.retryHandler.getMetrics(),\n    };\n  }\n\n  // Configuration updates\n  updateConfig(updates: Partial<HttpClientConfig>): void {\n    Object.assign(this.config, updates);\n  }\n\n  // Cleanup\n  destroy(): void {\n    this.circuitBreaker.destroy();\n    this.retryHandler.reset();\n    this.middlewareStack.clear();\n    this.removeAllListeners();\n  }\n}\n\n// Default configurations\nexport const DEFAULT_HTTP_CONFIG: HttpClientConfig = {\n  baseUrl: 'https://ereceipts-it-sandbox.acubeapi.com',\n  timeout: 30000,\n  retryConfig: DEFAULT_RETRY_CONFIG,\n  circuitBreakerConfig: {\n    failureThreshold: 5,\n    successThreshold: 2,\n    timeout: 30000,\n    resetTimeout: 60000,\n    name: 'acube-http-client',\n  },\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n  },\n  enableCircuitBreaker: true,\n  enableRetry: true,\n  enableLogging: true,\n  userAgent: 'ACube-SDK/2.0.0',\n};\n\nexport const AUTH_HTTP_CONFIG: HttpClientConfig = {\n  ...DEFAULT_HTTP_CONFIG,\n  baseUrl: 'https://common-sandbox.api.acubeapi.com',\n  circuitBreakerConfig: {\n    ...DEFAULT_HTTP_CONFIG.circuitBreakerConfig,\n    name: 'acube-auth-client',\n  },\n};","/**\n * Core ACube SDK - Stripe-style Resource-Based Architecture\n * Main entry point with lazy resource loading and configuration management\n */\n\nimport { EventEmitter } from 'eventemitter3';\nimport { HttpClient, type HttpClientConfig, DEFAULT_HTTP_CONFIG, AUTH_HTTP_CONFIG } from '@/http/client';\nimport type { EventTypeMap } from '@/types/events';\n\n// Resource imports (lazy loaded)\nimport type { CashiersResource } from '@/resources/cashiers';\nimport type { ReceiptsResource } from '@/resources/receipts';\nimport type { PointOfSalesResource } from '@/resources/point-of-sales';\nimport type { CashRegistersResource } from '@/resources/cash-registers';\nimport type { MerchantsResource } from '@/resources/merchants';\nimport type { PEMsResource } from '@/resources/pems';\n\nexport interface ACubeSDKConfig {\n  /**\n   * API environment\n   */\n  environment: 'sandbox' | 'production' | 'development';\n  \n  /**\n   * API key for authentication\n   */\n  apiKey?: string;\n  \n  /**\n   * Custom base URLs for different environments\n   */\n  baseUrls?: {\n    api?: string;\n    auth?: string;\n  };\n  \n  /**\n   * HTTP client configuration\n   */\n  httpConfig?: Partial<HttpClientConfig>;\n  \n  /**\n   * Authentication configuration\n   */\n  auth?: {\n    getToken?: () => Promise<string | null>;\n    onTokenExpired?: () => Promise<void>;\n    autoRefresh?: boolean;\n  };\n  \n  /**\n   * Logging configuration\n   */\n  logging?: {\n    enabled: boolean;\n    level: 'debug' | 'info' | 'warn' | 'error';\n    sanitize: boolean;\n  };\n  \n  /**\n   * Feature flags\n   */\n  features?: {\n    enableRetry?: boolean;\n    enableCircuitBreaker?: boolean;\n    enableMetrics?: boolean;\n    enableOfflineQueue?: boolean;\n  };\n  \n  /**\n   * Development options\n   */\n  dev?: {\n    enableMocking?: boolean;\n    mockDelay?: number;\n  };\n}\n\nconst DEFAULT_SDK_CONFIG: Required<ACubeSDKConfig> = {\n  environment: 'sandbox',\n  apiKey: '',\n  baseUrls: {},\n  httpConfig: {},\n  auth: {\n    autoRefresh: true,\n  },\n  logging: {\n    enabled: true,\n    level: 'warn',\n    sanitize: true,\n  },\n  features: {\n    enableRetry: true,\n    enableCircuitBreaker: true,\n    enableMetrics: true,\n    enableOfflineQueue: false,\n  },\n  dev: {\n    enableMocking: false,\n    mockDelay: 0,\n  },\n};\n\nexport class ACubeSDK extends EventEmitter<EventTypeMap> {\n  private config: Required<ACubeSDKConfig>;\n  private apiClient: HttpClient;\n  private authClient: HttpClient;\n  private isInitialized = false;\n  \n  // Lazy-loaded resources\n  private _cashiers?: CashiersResource;\n  private _receipts?: ReceiptsResource;\n  private _pointOfSales?: PointOfSalesResource;\n  private _cashRegisters?: CashRegistersResource;\n  private _merchants?: MerchantsResource;\n  private _pems?: PEMsResource;\n\n  constructor(config: ACubeSDKConfig) {\n    super();\n    \n    this.config = this.mergeConfig(config);\n    \n    // Initialize HTTP clients\n    this.apiClient = this.createHttpClient('api');\n    this.authClient = this.createHttpClient('auth');\n    \n    this.setupEventHandlers();\n  }\n\n  private mergeConfig(userConfig: ACubeSDKConfig): Required<ACubeSDKConfig> {\n    return {\n      ...DEFAULT_SDK_CONFIG,\n      ...userConfig,\n      baseUrls: {\n        ...DEFAULT_SDK_CONFIG.baseUrls,\n        ...userConfig.baseUrls,\n      },\n      httpConfig: {\n        ...DEFAULT_SDK_CONFIG.httpConfig,\n        ...userConfig.httpConfig,\n      },\n      auth: {\n        ...DEFAULT_SDK_CONFIG.auth,\n        ...userConfig.auth,\n      },\n      logging: {\n        ...DEFAULT_SDK_CONFIG.logging,\n        ...userConfig.logging,\n      },\n      features: {\n        ...DEFAULT_SDK_CONFIG.features,\n        ...userConfig.features,\n      },\n      dev: {\n        ...DEFAULT_SDK_CONFIG.dev,\n        ...userConfig.dev,\n      },\n    };\n  }\n\n  private createHttpClient(type: 'api' | 'auth'): HttpClient {\n    const baseConfig = type === 'api' ? DEFAULT_HTTP_CONFIG : AUTH_HTTP_CONFIG;\n    \n    // Determine base URL\n    let baseUrl: string;\n    if (type === 'api') {\n      baseUrl = this.config.baseUrls.api || this.getDefaultApiUrl();\n    } else {\n      baseUrl = this.config.baseUrls.auth || this.getDefaultAuthUrl();\n    }\n    \n    const config: HttpClientConfig = {\n      ...baseConfig,\n      ...this.config.httpConfig,\n      baseUrl,\n      enableRetry: this.config.features.enableRetry ?? true,\n      enableCircuitBreaker: this.config.features.enableCircuitBreaker ?? true,\n      enableLogging: this.config.logging.enabled,\n      ...(this.config.auth.getToken && { getAuthToken: this.config.auth.getToken }),\n      userAgent: `ACube-SDK/2.0.0 (${this.config.environment})`,\n    };\n    \n    return new HttpClient(config);\n  }\n\n  private getDefaultApiUrl(): string {\n    switch (this.config.environment) {\n      case 'production':\n        return 'https://ereceipts-it.acubeapi.com';\n      case 'development':\n        return 'https://ereceipts-it.dev.acubeapi.com';\n      case 'sandbox':\n      default:\n        return 'https://ereceipts-it-sandbox.acubeapi.com';\n    }\n  }\n\n  private getDefaultAuthUrl(): string {\n    switch (this.config.environment) {\n      case 'production':\n        return 'https://common.api.acubeapi.com';\n      case 'development':\n      case 'sandbox':\n      default:\n        return 'https://common-sandbox.api.acubeapi.com';\n    }\n  }\n\n  private setupEventHandlers(): void {\n    // Forward HTTP client events\n    this.apiClient.on('requestError', (event) => {\n      this.emit('error', {\n        type: 'error',\n        timestamp: new Date(),\n        requestId: event.requestId,\n        data: {\n          errorCode: 'HTTP_REQUEST_FAILED',\n          errorMessage: event.error,\n          operation: `${event.method} ${event.url}`,\n          retry: false,\n          context: { client: 'api', ...event },\n        },\n      });\n    });\n\n    this.authClient.on('requestError', (event) => {\n      this.emit('error', {\n        type: 'error',\n        timestamp: new Date(),\n        requestId: event.requestId,\n        data: {\n          errorCode: 'AUTH_REQUEST_FAILED',\n          errorMessage: event.error,\n          operation: `${event.method} ${event.url}`,\n          retry: false,\n          context: { client: 'auth', ...event },\n        },\n      });\n    });\n\n    // Handle authentication events\n    if (this.config.auth.onTokenExpired) {\n      this.on('auth.expired', this.config.auth.onTokenExpired);\n    }\n  }\n\n  /**\n   * Initialize the SDK (optional - resources are lazy loaded)\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      return;\n    }\n\n    try {\n      // Validate configuration\n      this.validateConfig();\n      \n      // Test connectivity (optional health check)\n      if (this.config.features.enableMetrics) {\n        await this.performHealthCheck();\n      }\n      \n      this.isInitialized = true;\n      \n      this.emit('error', {\n        type: 'error',\n        timestamp: new Date(),\n        requestId: `init_success_${Date.now()}`,\n        data: {\n          errorCode: 'SDK_INITIALIZED',\n          errorMessage: 'SDK initialized successfully',\n          operation: 'initialize',\n          retry: false,\n          context: {\n            environment: this.config.environment,\n            features: this.config.features,\n          },\n        },\n      });\n    } catch (error) {\n      this.emit('error', {\n        type: 'error',\n        timestamp: new Date(),\n        requestId: `init_${Date.now()}`,\n        data: {\n          errorCode: 'SDK_INITIALIZATION_FAILED',\n          errorMessage: error instanceof Error ? error.message : 'Unknown error',\n          operation: 'initialize',\n          retry: false,\n        },\n      });\n      throw error;\n    }\n  }\n\n  private validateConfig(): void {\n    // Validate environment\n    if (!['sandbox', 'production', 'development'].includes(this.config.environment)) {\n      throw new Error(`Invalid environment: ${this.config.environment}`);\n    }\n\n    // Validate auth configuration if provided\n    if (this.config.auth.getToken && typeof this.config.auth.getToken !== 'function') {\n      throw new Error('auth.getToken must be a function');\n    }\n  }\n\n  private async performHealthCheck(): Promise<void> {\n    // Simple health check - can be expanded\n    try {\n      const healthStatus = this.apiClient.getHealthStatus();\n      this.emit('error', {\n        type: 'error',\n        timestamp: new Date(),\n        requestId: `health_${Date.now()}`,\n        data: {\n          errorCode: 'HEALTH_CHECK_COMPLETED',\n          errorMessage: 'Health check completed',\n          operation: 'health-check',\n          retry: false,\n          context: { healthStatus },\n        },\n      });\n    } catch (error) {\n      this.emit('error', {\n        type: 'error',\n        timestamp: new Date(),\n        requestId: `health_failed_${Date.now()}`,\n        data: {\n          errorCode: 'HEALTH_CHECK_FAILED',\n          errorMessage: 'Health check failed',\n          operation: 'health-check',\n          retry: false,\n          context: { error },\n        },\n      });\n      // Don't throw - health check failure shouldn't prevent initialization\n    }\n  }\n\n  // Lazy-loaded resource getters (Stripe-style)\n  \n  /**\n   * Cashiers resource - user management\n   */\n  get cashiers(): CashiersResource {\n    if (!this._cashiers) {\n      const { CashiersResource } = require('@/resources/cashiers');\n      this._cashiers = new CashiersResource(this.apiClient);\n    }\n    return this._cashiers!;\n  }\n\n  /**\n   * Receipts resource - e-receipt management\n   */\n  get receipts(): ReceiptsResource {\n    if (!this._receipts) {\n      const { ReceiptsResource } = require('@/resources/receipts');\n      this._receipts = new ReceiptsResource(this.apiClient);\n    }\n    return this._receipts!;\n  }\n\n  /**\n   * Point of Sales resource - POS device management\n   */\n  get pointOfSales(): PointOfSalesResource {\n    if (!this._pointOfSales) {\n      const { PointOfSalesResource } = require('@/resources/point-of-sales');\n      this._pointOfSales = new PointOfSalesResource(this.apiClient);\n    }\n    return this._pointOfSales!;\n  }\n\n  /**\n   * Cash Registers resource - device registration\n   */\n  get cashRegisters(): CashRegistersResource {\n    if (!this._cashRegisters) {\n      const { CashRegistersResource } = require('@/resources/cash-registers');\n      this._cashRegisters = new CashRegistersResource(this.apiClient);\n    }\n    return this._cashRegisters!;\n  }\n\n  /**\n   * Merchants resource - business entity management\n   */\n  get merchants(): MerchantsResource {\n    if (!this._merchants) {\n      const { MerchantsResource } = require('@/resources/merchants');\n      this._merchants = new MerchantsResource(this.apiClient);\n    }\n    return this._merchants!;\n  }\n\n  /**\n   * PEMs resource - electronic memorization device management\n   */\n  get pems(): PEMsResource {\n    if (!this._pems) {\n      const { PEMsResource } = require('@/resources/pems');\n      this._pems = new PEMsResource(this.apiClient);\n    }\n    return this._pems!;\n  }\n\n  // Configuration and management methods\n\n  /**\n   * Update SDK configuration\n   */\n  updateConfig(updates: Partial<ACubeSDKConfig>): void {\n    const newConfig = this.mergeConfig({ ...this.config, ...updates });\n    \n    // Update HTTP clients if necessary\n    if (updates.httpConfig || updates.baseUrls || updates.environment) {\n      this.apiClient.updateConfig(this.createHttpClient('api')['config']);\n      this.authClient.updateConfig(this.createHttpClient('auth')['config']);\n    }\n    \n    this.config = newConfig;\n    \n    this.emit('error', {\n      type: 'error',\n      timestamp: new Date(),\n      requestId: `config_${Date.now()}`,\n      data: {\n        errorCode: 'CONFIG_UPDATED',\n        errorMessage: 'Configuration updated',\n        operation: 'update-config',\n        retry: false,\n        context: { updates },\n      },\n    });\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): Readonly<Required<ACubeSDKConfig>> {\n    return { ...this.config };\n  }\n\n  /**\n   * Get SDK metrics and health status\n   */\n  getMetrics() {\n    return {\n      api: this.apiClient.getHealthStatus(),\n      auth: this.authClient.getHealthStatus(),\n      isInitialized: this.isInitialized,\n      environment: this.config.environment,\n    };\n  }\n\n  /**\n   * Get HTTP clients (for advanced usage)\n   */\n  getClients() {\n    return {\n      api: this.apiClient,\n      auth: this.authClient,\n    };\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    this.apiClient.destroy();\n    this.authClient.destroy();\n    this.removeAllListeners();\n    this.isInitialized = false;\n    \n    this.emit('error', {\n      type: 'error',\n      timestamp: new Date(),\n      requestId: `destroy_${Date.now()}`,\n      data: {\n        errorCode: 'SDK_DESTROYED',\n        errorMessage: 'SDK destroyed',\n        operation: 'destroy',\n        retry: false,\n      },\n    });\n  }\n}\n\n// Export convenience function for creating SDK instances\nexport function createACubeSDK(config: ACubeSDKConfig): ACubeSDK {\n  return new ACubeSDK(config);\n}\n\n// Export default configuration\nexport { DEFAULT_SDK_CONFIG };","/**\n * A-Cube E-Receipts SDK - Main Entry Point\n * Enterprise-grade TypeScript SDK for A-Cube e-receipt system integration\n */\n\n// Core SDK\nexport { ACubeSDK, createACubeSDK, type ACubeSDKConfig, DEFAULT_SDK_CONFIG } from './core/sdk.js';\nimport { ACubeSDK, createACubeSDK, type ACubeSDKConfig } from './core/sdk.js';\n\n// HTTP Client and Configuration\nexport { \n  HttpClient, \n  type HttpClientConfig, \n  type RequestOptions, \n  type HttpResponse,\n  DEFAULT_HTTP_CONFIG,\n  AUTH_HTTP_CONFIG \n} from './http/client.js';\n\n\n// OpenAPI Endpoints\nexport { \n  CashierEndpoints,\n  ReceiptEndpoints,\n  CashRegisterEndpoints,\n  MerchantEndpoints,\n  PEMEndpoints,\n  PointOfSalesEndpoints,\n  type EndpointDefinition,\n} from './generated/endpoints.js';\n\n// OpenAPI Resources\nexport {\n  CashiersResource,\n  Cashiers,\n} from './resources/cashiers.js';\n\nexport {\n  ReceiptsResource,\n  Receipts,\n} from './resources/receipts.js';\n\nexport {\n  CashRegistersResource,\n  CashRegisters,\n} from './resources/cash-registers.js';\n\nexport {\n  MerchantsResource,\n  Merchants,\n} from './resources/merchants.js';\n\nexport {\n  PEMsResource,\n  PEMs,\n} from './resources/pems.js';\n\nexport {\n  PointOfSalesResource,\n  PointOfSales,\n} from './resources/point-of-sales.js';\n\n// Base OpenAPI Resource\nexport {\n  BaseOpenAPIResource,\n  type BaseResourceConfig,\n  type RequestOptions as OpenAPIRequestOptions,\n  type ValidationContext,\n} from './resources/base-openapi.js';\n\n// Types\nexport * from './types/branded.js';\nexport * from './types/events.js';\n\n\n// Error Handling\nexport {\n  ACubeSDKError,\n  NetworkError,\n  AuthenticationError,\n  AuthorizationError,\n  ValidationError,\n  FiscalError,\n  RateLimitError,\n  ConfigurationError,\n  NotFoundError,\n  CircuitBreakerError,\n  createErrorFromResponse,\n  type AuditInfo,\n  type ValidationViolation,\n} from './errors/index.js';\n\n// Circuit Breaker\nexport {\n  CircuitBreaker,\n  type CircuitBreakerConfig,\n  type CircuitBreakerState,\n  type CircuitBreakerMetrics,\n} from './http/circuit-breaker.js';\n\n// Retry Handler\nexport {\n  RetryHandler,\n  type RetryConfig,\n  type RetryAttempt,\n  type RetryMetrics,\n  DEFAULT_RETRY_CONFIG,\n  AGGRESSIVE_RETRY_CONFIG,\n  CONSERVATIVE_RETRY_CONFIG,\n} from './http/retry.js';\n\n// Middleware\nexport {\n  MiddlewareStack,\n  type Middleware,\n  type RequestContext,\n  type ResponseContext,\n  AuthenticationMiddleware,\n  RequestIdMiddleware,\n  UserAgentMiddleware,\n  ContentTypeMiddleware,\n  LoggingMiddleware,\n  RateLimitingMiddleware,\n  PerformanceMiddleware,\n} from './http/middleware.js';\n\n// Convenience functions for quick setup\n\n/**\n * Initialize SDK with sandbox configuration\n */\nexport function initializeSandboxSDK(config: Partial<ACubeSDKConfig> = {}): ACubeSDK {\n  return createACubeSDK({\n    environment: 'sandbox',\n    ...config,\n  });\n}\n\n/**\n * Initialize SDK with production configuration\n */\nexport function initializeProductionSDK(config: Partial<ACubeSDKConfig> = {}): ACubeSDK {\n  return createACubeSDK({\n    environment: 'production',\n    ...config,\n  });\n}\n\n/**\n * Initialize SDK with development configuration\n */\nexport function initializeDevelopmentSDK(config: Partial<ACubeSDKConfig> = {}): ACubeSDK {\n  return createACubeSDK({\n    environment: 'development',\n    ...config,\n  });\n}\n\n// Version information\nexport const SDK_VERSION = '2.0.0';\nexport const API_VERSION = '1.0.0';\n\n// Default export\nexport default ACubeSDK;","/**\n * Branded types for type-safe IDs and values\n * Prevents mixing different types of IDs at compile time\n */\n\n// Base branded type utility\ndeclare const __brand: unique symbol;\ntype Brand<T, TBrand> = T & { [__brand]: TBrand };\n\n// ID Types\nexport type ReceiptId = Brand<string, 'ReceiptId'>;\nexport type CashierId = Brand<number, 'CashierId'>;\nexport type PEMId = Brand<string, 'PEMId'>;\nexport type MerchantId = Brand<string, 'MerchantId'>;\nexport type CashRegisterId = Brand<string, 'CashRegisterId'>;\nexport type SerialNumber = Brand<string, 'SerialNumber'>;\nexport type FiscalId = Brand<string, 'FiscalId'>;\nexport type DocumentNumber = Brand<string, 'DocumentNumber'>;\n\n// Value Types\nexport type Amount = Brand<string, 'Amount'>;\nexport type VATRate = Brand<string, 'VATRate'>;\nexport type Quantity = Brand<string, 'Quantity'>;\n\n// Utility functions to create branded types\nexport const createReceiptId = (id: string): ReceiptId => id as ReceiptId;\nexport const createCashierId = (id: number): CashierId => id as CashierId;\nexport const createPEMId = (id: string): PEMId => id as PEMId;\nexport const createMerchantId = (id: string): MerchantId => id as MerchantId;\nexport const createCashRegisterId = (id: string): CashRegisterId => id as CashRegisterId;\nexport const createSerialNumber = (sn: string): SerialNumber => sn as SerialNumber;\nexport const createFiscalId = (id: string): FiscalId => id as FiscalId;\nexport const createDocumentNumber = (dn: string): DocumentNumber => dn as DocumentNumber;\n\nexport const createAmount = (amount: string): Amount => amount as Amount;\nexport const createVATRate = (rate: string): VATRate => rate as VATRate;\nexport const createQuantity = (qty: string): Quantity => qty as Quantity;\n\n// Type guards\nexport const isReceiptId = (value: unknown): value is ReceiptId => \n  typeof value === 'string' && value.length > 0;\n\nexport const isCashierId = (value: unknown): value is CashierId => \n  typeof value === 'number' && value > 0;\n\nexport const isFiscalId = (value: unknown): value is FiscalId => \n  typeof value === 'string' && /^\\d{11}$/.test(value);\n\nexport const isAmount = (value: unknown): value is Amount => \n  typeof value === 'string' && /^\\d+\\.\\d{2,8}$/.test(value);"]}