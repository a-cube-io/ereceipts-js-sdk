{"version":3,"file":"index.cjs.js","sources":["../src/core/types.ts","../src/core/config.ts","../src/core/auth-manager.ts","../src/core/platform-detector.ts","../src/core/adapter-loader.ts","../src/core/api/http-client.ts","../src/core/api/receipts.ts","../src/core/api/cashiers.ts","../src/core/api/point-of-sales.ts","../src/core/api/cash-registers.ts","../src/core/api/merchants.ts","../src/core/api/pems.ts","../src/core/api/api-client.ts","../src/offline/queue.ts","../src/offline/sync-manager.ts","../src/offline/offline-manager.ts","../src/acube-sdk.ts","../src/platforms/web/storage.ts","../src/platforms/web/network.ts","../src/platforms/react-native/storage.ts","../src/platforms/react-native/network.ts","../src/platforms/node/storage.ts","../src/platforms/node/network.ts"],"sourcesContent":["/**\n * Core SDK types\n */\n\nexport type Environment = 'production' | 'development' | 'sandbox';\n\n/**\n * SDK Configuration\n */\nexport interface SDKConfig {\n  environment: Environment;\n  apiUrl?: string;\n  authUrl?: string;\n  timeout?: number;\n  retryAttempts?: number;\n  debug?: boolean;\n  customHeaders?: Record<string, string>;\n}\n\n/**\n * Authentication credentials\n */\nexport interface AuthCredentials {\n  email: string;\n  password: string;\n}\n\n/**\n * Token response from auth server\n */\nexport interface TokenResponse {\n  token: string;\n}\n\n/**\n * JWT Token payload structure\n */\nexport interface JWTPayload {\n  iat: number;\n  exp: number;\n  roles: Record<string, string[]>;\n  username: string;\n  uid: number;\n  fid: string;\n  pid: string | null;\n}\n\n/**\n * Stored token data\n */\nexport interface StoredTokenData {\n  accessToken: string;\n  expiresAt: number;\n}\n\n/**\n * User information\n */\nexport interface User {\n  id: string;\n  email: string;\n  username: string;\n  roles: Record<string, string[]>;\n  fid: string;\n  pid: string | null;\n}\n\n/**\n * API Error response\n */\nexport interface APIError {\n  type: string;\n  title: string;\n  status: number;\n  detail: string;\n  instance?: string;\n}\n\n/**\n * SDK Error types\n */\nexport type SDKError = \n  | 'NETWORK_ERROR'\n  | 'AUTH_ERROR'\n  | 'VALIDATION_ERROR'\n  | 'NOT_FOUND_ERROR'\n  | 'FORBIDDEN_ERROR'\n  | 'UNKNOWN_ERROR';\n\n/**\n * SDK Exception class\n */\nexport class ACubeSDKError extends Error {\n  constructor(\n    public type: SDKError,\n    message: string,\n    public originalError?: any,\n    public statusCode?: number\n  ) {\n    super(message);\n    this.name = 'ACubeSDKError';\n  }\n}","import { SDKConfig, Environment } from './types';\n\n/**\n * Default SDK configuration\n */\nconst DEFAULT_CONFIG: Required<SDKConfig> = {\n  environment: 'sandbox',\n  apiUrl: '',\n  authUrl: '',\n  timeout: 30000,\n  retryAttempts: 3,\n  debug: false,\n  customHeaders: {},\n};\n\n/**\n * SDK Configuration manager\n */\nexport class ConfigManager {\n  private config: Required<SDKConfig>;\n\n  constructor(userConfig: SDKConfig) {\n    this.config = this.mergeConfig(userConfig);\n  }\n\n  private mergeConfig(userConfig: SDKConfig): Required<SDKConfig> {\n    const baseConfig = {\n      ...DEFAULT_CONFIG,\n      ...userConfig,\n      apiUrl: userConfig.apiUrl || this.getDefaultApiUrl(userConfig.environment),\n      authUrl: userConfig.authUrl || this.getDefaultAuthUrl(userConfig.environment),\n    };\n\n    return baseConfig;\n  }\n\n  private getDefaultApiUrl(environment: Environment): string {\n    switch (environment) {\n      case 'production':\n        return 'https://ereceipts-it.acubeapi.com';\n      case 'development':\n        return 'https://ereceipts-it.dev.acubeapi.com';\n      case 'sandbox':\n      default:\n        return 'https://ereceipts-it-sandbox.acubeapi.com';\n    }\n  }\n\n  private getDefaultAuthUrl(environment: Environment): string {\n    switch (environment) {\n      case 'production':\n        return 'https://common.api.acubeapi.com';\n      case 'development':\n      case 'sandbox':\n      default:\n        return 'https://common-sandbox.api.acubeapi.com';\n    }\n  }\n\n  /**\n   * Get the current configuration\n   */\n  getConfig(): Required<SDKConfig> {\n    return { ...this.config };\n  }\n\n  /**\n   * Get API URL\n   */\n  getApiUrl(): string {\n    return this.config.apiUrl;\n  }\n\n  /**\n   * Get Auth URL\n   */\n  getAuthUrl(): string {\n    return this.config.authUrl;\n  }\n\n  /**\n   * Get environment\n   */\n  getEnvironment(): Environment {\n    return this.config.environment;\n  }\n\n  /**\n   * Check if debug mode is enabled\n   */\n  isDebugEnabled(): boolean {\n    return this.config.debug;\n  }\n\n  /**\n   * Get timeout in milliseconds\n   */\n  getTimeout(): number {\n    return this.config.timeout;\n  }\n\n  /**\n   * Get retry attempts\n   */\n  getRetryAttempts(): number {\n    return this.config.retryAttempts;\n  }\n\n  /**\n   * Get custom headers\n   */\n  getCustomHeaders(): Record<string, string> {\n    return { ...this.config.customHeaders };\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(updates: Partial<SDKConfig>): void {\n    this.config = this.mergeConfig({ ...this.config, ...updates });\n  }\n}","import axios, { AxiosInstance, AxiosError } from 'axios';\nimport { ISecureStorage } from '../adapters';\nimport { ConfigManager } from './config';\nimport { \n  AuthCredentials, \n  TokenResponse, \n  StoredTokenData, \n  User,\n  ACubeSDKError,\n  JWTPayload \n} from './types';\n\n/**\n * Authentication events\n */\nexport interface AuthEvents {\n  onAuthError?: (error: ACubeSDKError) => void;\n  onUserChanged?: (user: User | null) => void;\n}\n\n/**\n * JWT Authentication Manager\n */\nexport class AuthManager {\n  private static readonly TOKEN_KEY = 'acube_tokens';\n  private static readonly USER_KEY = 'acube_user';\n  \n  private httpClient: AxiosInstance;\n  private currentUser: User | null = null;\n\n  constructor(\n    private config: ConfigManager,\n    private secureStorage: ISecureStorage,\n    private events: AuthEvents = {}\n  ) {\n    this.httpClient = this.createHttpClient();\n    this.setupInterceptors();\n  }\n\n  private createHttpClient(): AxiosInstance {\n    return axios.create({\n      baseURL: this.config.getAuthUrl(),\n      timeout: this.config.getTimeout(),\n      headers: {\n        'Content-Type': 'application/json',\n        ...this.config.getCustomHeaders(),\n      },\n    });\n  }\n\n  private setupInterceptors(): void {\n    // Request interceptor to add auth header\n    this.httpClient.interceptors.request.use(\n      async (config) => {\n        const tokenData = await this.getStoredTokens();\n        if (tokenData?.accessToken) {\n          config.headers.Authorization = `Bearer ${tokenData.accessToken}`;\n        }\n        return config;\n      },\n      (error) => Promise.reject(error)\n    );\n\n    // Response interceptor for 401 errors\n    this.httpClient.interceptors.response.use(\n      (response) => response,\n      async (error: AxiosError) => {\n        if (error.response?.status === 401) {\n          // Token expired, clear tokens and notify\n          await this.clearTokens();\n          const authError = new ACubeSDKError('AUTH_ERROR', 'Session expired');\n          this.events.onAuthError?.(authError);\n        }\n        \n        throw this.transformError(error);\n      }\n    );\n  }\n\n  /**\n   * Login with email and password\n   */\n  async login(credentials: AuthCredentials): Promise<User> {\n    try {\n      const response = await this.httpClient.post<TokenResponse>('/login', {\n        email: credentials.email,\n        password: credentials.password,\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      // Parse JWT token to extract expiration\n      const jwtPayload = this.parseJWTToken(response.data.token);\n      \n      const tokenData: StoredTokenData = {\n        accessToken: response.data.token,\n        expiresAt: jwtPayload.exp * 1000, // Convert to milliseconds\n      };\n\n      await this.storeTokens(tokenData);\n      \n      // Create user from JWT payload\n      const user: User = {\n        id: jwtPayload.uid.toString(),\n        email: jwtPayload.username,\n        username: jwtPayload.username,\n        roles: jwtPayload.roles,\n        fid: jwtPayload.fid,\n        pid: jwtPayload.pid,\n      };\n      \n      this.currentUser = user;\n      \n      // Store user for future use\n      await this.secureStorage.set(AuthManager.USER_KEY, JSON.stringify(user));\n      \n      this.events.onUserChanged?.(user);\n\n      return user;\n    } catch (error) {\n      throw this.transformError(error);\n    }\n  }\n\n  /**\n   * Parse JWT token to extract payload\n   */\n  private parseJWTToken(token: string): JWTPayload {\n    try {\n      // JWT tokens have three parts separated by dots: header.payload.signature\n      const parts = token.split('.');\n      if (parts.length !== 3) {\n        throw new Error('Invalid JWT token format');\n      }\n\n      // Decode the payload (second part)\n      const payload = parts[1];\n      if (!payload) {\n        throw new Error('JWT token missing payload');\n      }\n      \n      // Add padding if needed for base64 decoding\n      const paddedPayload = payload + '==='.slice(0, (4 - (payload.length % 4)) % 4);\n      \n      // Decode from base64\n      const decodedPayload = atob(paddedPayload);\n      \n      // Parse JSON\n      return JSON.parse(decodedPayload) as JWTPayload;\n    } catch (error) {\n      throw new ACubeSDKError('AUTH_ERROR', 'Failed to parse JWT token', error);\n    }\n  }\n\n  /**\n   * Logout and clear tokens\n   */\n  async logout(): Promise<void> {\n    await this.clearTokens();\n    this.currentUser = null;\n    this.events.onUserChanged?.(null);\n  }\n\n  /**\n   * Get current user information\n   */\n  async getCurrentUser(): Promise<User> {\n    if (this.currentUser) {\n      return this.currentUser;\n    }\n\n    // Try to get from storage first\n    try {\n      const userJson = await this.secureStorage.get(AuthManager.USER_KEY);\n      if (userJson) {\n        this.currentUser = JSON.parse(userJson);\n        return this.currentUser!;\n      }\n    } catch {\n      // Ignore storage errors\n    }\n\n    // If no user in storage and no current user, check if we have a valid token\n    const tokenData = await this.getStoredTokens();\n    if (tokenData && !this.isTokenExpired(tokenData)) {\n      // Parse user info from JWT token\n      const jwtPayload = this.parseJWTToken(tokenData.accessToken);\n      \n      const user: User = {\n        id: jwtPayload.uid.toString(),\n        email: jwtPayload.username,\n        username: jwtPayload.username,\n        roles: jwtPayload.roles,\n        fid: jwtPayload.fid,\n        pid: jwtPayload.pid,\n      };\n      \n      this.currentUser = user;\n      \n      // Store for future use\n      await this.secureStorage.set(AuthManager.USER_KEY, JSON.stringify(user));\n      \n      return user;\n    }\n\n    throw new ACubeSDKError('AUTH_ERROR', 'No valid authentication found');\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  async isAuthenticated(): Promise<boolean> {\n    const tokenData = await this.getStoredTokens();\n    return tokenData !== null && !this.isTokenExpired(tokenData);\n  }\n\n  /**\n   * Get access token for API calls\n   */\n  async getAccessToken(): Promise<string | null> {\n    const tokenData = await this.getStoredTokens();\n    \n    if (!tokenData) {\n      return null;\n    }\n\n    if (this.isTokenExpired(tokenData)) {\n      // Token expired, clear it\n      await this.clearTokens();\n      return null;\n    }\n\n    return tokenData.accessToken;\n  }\n\n\n  /**\n   * Store tokens securely\n   */\n  private async storeTokens(tokenData: StoredTokenData): Promise<void> {\n    await this.secureStorage.set(AuthManager.TOKEN_KEY, JSON.stringify(tokenData));\n  }\n\n  /**\n   * Get stored tokens\n   */\n  private async getStoredTokens(): Promise<StoredTokenData | null> {\n    try {\n      const tokenJson = await this.secureStorage.get(AuthManager.TOKEN_KEY);\n      return tokenJson ? JSON.parse(tokenJson) : null;\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Clear stored tokens\n   */\n  private async clearTokens(): Promise<void> {\n    await Promise.all([\n      this.secureStorage.remove(AuthManager.TOKEN_KEY),\n      this.secureStorage.remove(AuthManager.USER_KEY),\n    ]);\n  }\n\n  /**\n   * Check if token is expired\n   */\n  private isTokenExpired(tokenData: StoredTokenData): boolean {\n    // Add 5 minute buffer\n    return Date.now() >= (tokenData.expiresAt - 300000);\n  }\n\n  /**\n   * Transform API errors to SDK errors\n   */\n  private transformError(error: any): ACubeSDKError {\n    if (error instanceof ACubeSDKError) {\n      return error;\n    }\n\n    if (axios.isAxiosError(error)) {\n      const response = error.response;\n      \n      if (!response) {\n        return new ACubeSDKError('NETWORK_ERROR', 'Network error occurred', error);\n      }\n\n      switch (response.status) {\n        case 401:\n          return new ACubeSDKError('AUTH_ERROR', 'Authentication failed', error, 401);\n        case 403:\n          return new ACubeSDKError('FORBIDDEN_ERROR', 'Access forbidden', error, 403);\n        case 404:\n          return new ACubeSDKError('NOT_FOUND_ERROR', 'Resource not found', error, 404);\n        case 422:\n          return new ACubeSDKError('VALIDATION_ERROR', 'Validation error', error, 422);\n        default:\n          return new ACubeSDKError('UNKNOWN_ERROR', 'Unknown error occurred', error, response.status);\n      }\n    }\n\n    return new ACubeSDKError('UNKNOWN_ERROR', 'Unknown error occurred', error);\n  }\n}\n\n","/**\n * Platform detection utilities\n */\n\nexport type Platform = 'web' | 'react-native' | 'node' | 'unknown';\n\nexport interface PlatformInfo {\n  platform: Platform;\n  isReactNative: boolean;\n  isWeb: boolean;\n  isNode: boolean;\n  isExpo: boolean;\n}\n\n// Type declarations for global variables that may not be available\ndeclare const global: any;\ndeclare const process: any;\ndeclare const window: any;\n\n/**\n * Detect the current platform\n */\nexport function detectPlatform(): PlatformInfo {\n  // Check for React Native\n  if (\n    typeof global !== 'undefined' &&\n    global.__DEV__ !== undefined &&\n    typeof global.navigator !== 'undefined' &&\n    global.navigator.product === 'ReactNative'\n  ) {\n    return {\n      platform: 'react-native',\n      isReactNative: true,\n      isWeb: false,\n      isNode: false,\n      isExpo: checkExpo(),\n    };\n  }\n\n  // Check for Web/Browser\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.document !== 'undefined' &&\n    typeof window.navigator !== 'undefined'\n  ) {\n    return {\n      platform: 'web',\n      isReactNative: false,\n      isWeb: true,\n      isNode: false,\n      isExpo: false,\n    };\n  }\n\n  // Check for Node.js\n  if (\n    typeof process !== 'undefined' &&\n    process.versions &&\n    process.versions.node\n  ) {\n    return {\n      platform: 'node',\n      isReactNative: false,\n      isWeb: false,\n      isNode: true,\n      isExpo: false,\n    };\n  }\n\n  // Unknown platform\n  return {\n    platform: 'unknown',\n    isReactNative: false,\n    isWeb: false,\n    isNode: false,\n    isExpo: false,\n  };\n}\n\n/**\n * Check if running in Expo\n */\nfunction checkExpo(): boolean {\n  try {\n    return typeof global !== 'undefined' && \n           (typeof global.Expo !== 'undefined' || typeof global.expo !== 'undefined');\n  } catch {\n    return false;\n  }\n}","import { PlatformAdapters } from '../adapters';\nimport { detectPlatform } from './platform-detector';\n\n/**\n * Dynamically load platform-specific adapters\n */\nexport async function loadPlatformAdapters(): Promise<PlatformAdapters> {\n  const { platform } = detectPlatform();\n\n  console.log({platform})\n  \n  switch (platform) {\n    case 'web':\n      return loadWebAdapters();\n    case 'react-native':\n      return loadReactNativeAdapters();\n    case 'node':\n      return loadNodeAdapters();\n    default:\n      // Fallback to memory adapters\n      return loadMemoryAdapters();\n  }\n}\n\nasync function loadWebAdapters(): Promise<PlatformAdapters> {\n  const [storage, network] = await Promise.all([\n    import('../platforms/web/storage'),\n    import('../platforms/web/network'),\n  ]);\n  \n  return {\n    storage: new storage.WebStorageAdapter(),\n    secureStorage: new storage.WebSecureStorageAdapter(),\n    networkMonitor: new network.WebNetworkMonitor(),\n  };\n}\n\nasync function loadReactNativeAdapters(): Promise<PlatformAdapters> {\n  const [storage, network] = await Promise.all([\n    import('../platforms/react-native/storage'),\n    import('../platforms/react-native/network'),\n  ]);\n  \n  return {\n    storage: new storage.ReactNativeStorageAdapter(),\n    secureStorage: new storage.ReactNativeSecureStorageAdapter(),\n    networkMonitor: new network.ReactNativeNetworkMonitor(),\n  };\n}\n\nasync function loadNodeAdapters(): Promise<PlatformAdapters> {\n  const [storage, network] = await Promise.all([\n    import('../platforms/node/storage'),\n    import('../platforms/node/network'),\n  ]);\n  \n  return {\n    storage: new storage.NodeStorageAdapter(),\n    secureStorage: new storage.NodeSecureStorageAdapter(),\n    networkMonitor: new network.NodeNetworkMonitor(),\n  };\n}\n\nasync function loadMemoryAdapters(): Promise<PlatformAdapters> {\n  const storage = await import('../platforms/node/storage');\n  const network = await import('../platforms/node/network');\n  \n  // Use memory adapters as fallback\n  return {\n    storage: new storage.NodeStorageAdapter(),\n    secureStorage: new storage.NodeSecureStorageAdapter(),\n    networkMonitor: new network.NodeNetworkMonitor(),\n  };\n}","import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { ConfigManager } from '../config';\nimport { ACubeSDKError } from '../types';\n\n/**\n * HTTP client for API requests\n */\nexport class HttpClient {\n  private client: AxiosInstance;\n\n  constructor(private config: ConfigManager) {\n    this.client = this.createClient();\n  }\n\n  private createClient(): AxiosInstance {\n    const client = axios.create({\n      baseURL: this.config.getApiUrl(),\n      timeout: this.config.getTimeout(),\n      headers: {\n        'Content-Type': 'application/json',\n        ...this.config.getCustomHeaders(),\n      },\n    });\n\n    // Add request interceptor for debugging\n    if (this.config.isDebugEnabled()) {\n      client.interceptors.request.use(\n        (config) => {\n          console.log('API Request:', {\n            method: config.method?.toUpperCase(),\n            url: config.url,\n            baseURL: config.baseURL,\n            headers: config.headers,\n            data: config.data,\n          });\n          return config;\n        },\n        (error) => {\n          console.error('API Request Error:', error);\n          return Promise.reject(error);\n        }\n      );\n\n      client.interceptors.response.use(\n        (response) => {\n          console.log('API Response:', {\n            status: response.status,\n            statusText: response.statusText,\n            headers: response.headers,\n            data: response.data,\n          });\n          return response;\n        },\n        (error) => {\n          console.error('API Response Error:', {\n            status: error.response?.status,\n            statusText: error.response?.statusText,\n            data: error.response?.data,\n            message: error.message,\n          });\n          return Promise.reject(error);\n        }\n      );\n    }\n\n    return client;\n  }\n\n  /**\n   * Set authorization header\n   */\n  setAuthorizationHeader(token: string): void {\n    this.client.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  }\n\n  /**\n   * Remove authorization header\n   */\n  removeAuthorizationHeader(): void {\n    delete this.client.defaults.headers.common['Authorization'];\n  }\n\n  /**\n   * GET request\n   */\n  async get<T>(url: string, config?: AxiosRequestConfig): Promise<T> {\n    try {\n      const response: AxiosResponse<T> = await this.client.get(url, config);\n      return response.data;\n    } catch (error) {\n      throw this.transformError(error);\n    }\n  }\n\n  /**\n   * POST request\n   */\n  async post<T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> {\n    try {\n      const response: AxiosResponse<T> = await this.client.post(url, data, config);\n      return response.data;\n    } catch (error) {\n      throw this.transformError(error);\n    }\n  }\n\n  /**\n   * PUT request\n   */\n  async put<T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> {\n    try {\n      const response: AxiosResponse<T> = await this.client.put(url, data, config);\n      return response.data;\n    } catch (error) {\n      throw this.transformError(error);\n    }\n  }\n\n  /**\n   * DELETE request\n   */\n  async delete<T>(url: string, config?: AxiosRequestConfig): Promise<T> {\n    try {\n      const response: AxiosResponse<T> = await this.client.delete(url, config);\n      return response.data;\n    } catch (error) {\n      throw this.transformError(error);\n    }\n  }\n\n  /**\n   * PATCH request\n   */\n  async patch<T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> {\n    try {\n      const response: AxiosResponse<T> = await this.client.patch(url, data, config);\n      return response.data;\n    } catch (error) {\n      throw this.transformError(error);\n    }\n  }\n\n  /**\n   * Download file (binary response)\n   */\n  async download(url: string, config?: AxiosRequestConfig): Promise<Blob> {\n    try {\n      const response: AxiosResponse<Blob> = await this.client.get(url, {\n        ...config,\n        responseType: 'blob',\n      });\n      return response.data;\n    } catch (error) {\n      throw this.transformError(error);\n    }\n  }\n\n  /**\n   * Transform axios errors to SDK errors\n   */\n  private transformError(error: any): ACubeSDKError {\n    if (axios.isAxiosError(error)) {\n      const response = error.response;\n      \n      if (!response) {\n        return new ACubeSDKError('NETWORK_ERROR', 'Network error occurred', error);\n      }\n\n      const status = response.status;\n      const data = response.data;\n      \n      // Try to extract error message from response\n      let message = 'Unknown error occurred';\n      if (data?.detail) {\n        message = data.detail;\n      } else if (data?.title) {\n        message = data.title;\n      } else if (error.message) {\n        message = error.message;\n      }\n\n      switch (status) {\n        case 400:\n          return new ACubeSDKError('VALIDATION_ERROR', message, error, status);\n        case 401:\n          return new ACubeSDKError('AUTH_ERROR', message, error, status);\n        case 403:\n          return new ACubeSDKError('FORBIDDEN_ERROR', message, error, status);\n        case 404:\n          return new ACubeSDKError('NOT_FOUND_ERROR', message, error, status);\n        case 422:\n          return new ACubeSDKError('VALIDATION_ERROR', message, error, status);\n        default:\n          return new ACubeSDKError('UNKNOWN_ERROR', message, error, status);\n      }\n    }\n\n    return new ACubeSDKError('UNKNOWN_ERROR', 'Unknown error occurred', error);\n  }\n\n  /**\n   * Get the underlying axios instance for advanced use cases\n   */\n  getAxiosInstance(): AxiosInstance {\n    return this.client;\n  }\n}","import { HttpClient } from './http-client';\nimport { \n  ReceiptInput, \n  ReceiptOutput, \n  ReceiptDetailsOutput,\n  ReceiptReturnOrVoidViaPEMInput,\n  ReceiptReturnOrVoidWithProofInput,\n  Page \n} from './types';\n\n/**\n * Receipts API manager\n */\nexport class ReceiptsAPI {\n  constructor(private httpClient: HttpClient) {}\n\n  /**\n   * Create a new electronic receipt\n   */\n  async create(receiptData: ReceiptInput): Promise<ReceiptOutput> {\n    return this.httpClient.post<ReceiptOutput>('/mf1/receipts', receiptData);\n  }\n\n  /**\n   * Get a list of electronic receipts\n   */\n  async list(params: { page?: number; size?: number } = {}): Promise<Page<ReceiptOutput>> {\n    const searchParams = new URLSearchParams();\n    \n    if (params.page) {\n      searchParams.append('page', params.page.toString());\n    }\n    if (params.size) {\n      searchParams.append('size', params.size.toString());\n    }\n\n    const query = searchParams.toString();\n    const url = query ? `/mf1/receipts?${query}` : '/mf1/receipts';\n    \n    return this.httpClient.get<Page<ReceiptOutput>>(url);\n  }\n\n  /**\n   * Get an electronic receipt by UUID\n   */\n  async get(receiptUuid: string): Promise<ReceiptOutput> {\n    return this.httpClient.get<ReceiptOutput>(`/mf1/receipts/${receiptUuid}`);\n  }\n\n  /**\n   * Get receipt details (JSON or PDF)\n   */\n  async getDetails(\n    receiptUuid: string, \n    format: 'json' | 'pdf' = 'json'\n  ): Promise<ReceiptDetailsOutput | Blob> {\n    const headers: Record<string, string> = {};\n    \n    if (format === 'pdf') {\n      headers['Accept'] = 'application/pdf';\n      return this.httpClient.download(`/mf1/receipts/${receiptUuid}/details`, { headers });\n    } else {\n      headers['Accept'] = 'application/json';\n      return this.httpClient.get<ReceiptDetailsOutput>(`/mf1/receipts/${receiptUuid}/details`, { headers });\n    }\n  }\n\n  /**\n   * Void an electronic receipt\n   */\n  async void(voidData: ReceiptReturnOrVoidViaPEMInput): Promise<void> {\n    await this.httpClient.delete('/mf1/receipts', {\n      data: voidData,\n    });\n  }\n\n  /**\n   * Void an electronic receipt identified by proof of purchase\n   */\n  async voidWithProof(voidData: ReceiptReturnOrVoidWithProofInput): Promise<void> {\n    await this.httpClient.delete('/mf1/receipts/void-with-proof', {\n      data: voidData,\n    });\n  }\n\n  /**\n   * Return items from an electronic receipt\n   */\n  async return(returnData: ReceiptReturnOrVoidViaPEMInput): Promise<ReceiptOutput> {\n    return this.httpClient.post<ReceiptOutput>('/mf1/receipts/return', returnData);\n  }\n\n  /**\n   * Return items from an electronic receipt identified by proof of purchase\n   */\n  async returnWithProof(returnData: ReceiptReturnOrVoidWithProofInput): Promise<ReceiptOutput> {\n    return this.httpClient.post<ReceiptOutput>('/mf1/receipts/return-with-proof', returnData);\n  }\n}","import { HttpClient } from './http-client';\nimport { CashierCreateInput, CashierOutput, Page } from './types';\n\n/**\n * Cashiers API manager\n */\nexport class CashiersAPI {\n  constructor(private httpClient: HttpClient) {}\n\n  /**\n   * Read cashiers with pagination\n   */\n  async list(params: { page?: number; size?: number } = {}): Promise<Page<CashierOutput>> {\n    const searchParams = new URLSearchParams();\n    \n    if (params.page) {\n      searchParams.append('page', params.page.toString());\n    }\n    if (params.size) {\n      searchParams.append('size', params.size.toString());\n    }\n\n    const query = searchParams.toString();\n    const url = query ? `/mf1/cashiers?${query}` : '/mf1/cashiers';\n    \n    return this.httpClient.get<Page<CashierOutput>>(url);\n  }\n\n  /**\n   * Create a new cashier\n   */\n  async create(cashierData: CashierCreateInput): Promise<CashierOutput> {\n    return this.httpClient.post<CashierOutput>('/mf1/cashiers', cashierData);\n  }\n\n  /**\n   * Read currently authenticated cashier's information\n   */\n  async me(): Promise<CashierOutput> {\n    return this.httpClient.get<CashierOutput>('/mf1/cashiers/me');\n  }\n\n  /**\n   * Get a specific cashier by ID\n   */\n  async get(cashierId: number): Promise<CashierOutput> {\n    return this.httpClient.get<CashierOutput>(`/mf1/cashiers/${cashierId}`);\n  }\n\n  /**\n   * Delete a cashier\n   */\n  async delete(cashierId: number): Promise<void> {\n    await this.httpClient.delete(`/mf1/cashiers/${cashierId}`);\n  }\n}","import { HttpClient } from './http-client';\nimport { \n  PointOfSaleOutput, \n  PointOfSaleDetailedOutput,\n  ActivationRequest,\n  PEMStatusOfflineRequest,\n  PEMStatus,\n  Page \n} from './types';\n\n/**\n * Point of Sales API manager\n */\nexport class PointOfSalesAPI {\n  constructor(private httpClient: HttpClient) {}\n\n  /**\n   * Retrieve Point of Sales (PEMs)\n   */\n  async list(params: { \n    status?: PEMStatus; \n    page?: number; \n    size?: number;\n  } = {}): Promise<Page<PointOfSaleOutput>> {\n    const searchParams = new URLSearchParams();\n    \n    if (params.status) {\n      searchParams.append('status', params.status);\n    }\n    if (params.page) {\n      searchParams.append('page', params.page.toString());\n    }\n    if (params.size) {\n      searchParams.append('size', params.size.toString());\n    }\n\n    const query = searchParams.toString();\n    const url = query ? `/mf1/point-of-sales?${query}` : '/mf1/point-of-sales';\n    \n    return this.httpClient.get<Page<PointOfSaleOutput>>(url);\n  }\n\n  /**\n   * Get a specific Point of Sale by serial number\n   */\n  async get(serialNumber: string): Promise<PointOfSaleDetailedOutput> {\n    return this.httpClient.get<PointOfSaleDetailedOutput>(`/mf1/point-of-sales/${serialNumber}`);\n  }\n\n  /**\n   * Close journal\n   */\n  async closeJournal(): Promise<any> {\n    return this.httpClient.post('/mf1/point-of-sales/close');\n  }\n\n  /**\n   * Trigger the activation process of a Point of Sale\n   */\n  async activate(serialNumber: string, activationData: ActivationRequest): Promise<any> {\n    return this.httpClient.post(`/mf1/point-of-sales/${serialNumber}/activation`, activationData);\n  }\n\n  /**\n   * Create a new inactivity period\n   */\n  async createInactivityPeriod(serialNumber: string): Promise<any> {\n    return this.httpClient.post(`/mf1/point-of-sales/${serialNumber}/inactivity`);\n  }\n\n  /**\n   * Change the state of the Point of Sale to 'offline'\n   */\n  async setOffline(serialNumber: string, offlineData: PEMStatusOfflineRequest): Promise<any> {\n    return this.httpClient.post(`/mf1/point-of-sales/${serialNumber}/status/offline`, offlineData);\n  }\n}","import { HttpClient } from './http-client';\nimport { \n  CashRegisterCreate, \n  CashRegisterBasicOutput, \n  CashRegisterDetailedOutput,\n  Page \n} from './types';\n\n/**\n * Cash Registers API manager\n */\nexport class CashRegistersAPI {\n  constructor(private httpClient: HttpClient) {}\n\n  /**\n   * Create a new cash register (point of sale)\n   */\n  async create(cashRegisterData: CashRegisterCreate): Promise<CashRegisterDetailedOutput> {\n    return this.httpClient.post<CashRegisterDetailedOutput>('/mf1/cash-register', cashRegisterData);\n  }\n\n  /**\n   * Get all cash registers for the current merchant\n   */\n  async list(params: { page?: number; size?: number } = {}): Promise<Page<CashRegisterBasicOutput>> {\n    const searchParams = new URLSearchParams();\n    \n    if (params.page) {\n      searchParams.append('page', params.page.toString());\n    }\n    if (params.size) {\n      searchParams.append('size', params.size.toString());\n    }\n\n    const query = searchParams.toString();\n    const url = query ? `/mf1/cash-register?${query}` : '/mf1/cash-register';\n    \n    return this.httpClient.get<Page<CashRegisterBasicOutput>>(url);\n  }\n\n  /**\n   * Get a cash register by ID\n   */\n  async get(id: string): Promise<CashRegisterBasicOutput> {\n    return this.httpClient.get<CashRegisterBasicOutput>(`/mf1/cash-register/${id}`);\n  }\n}","import { HttpClient } from './http-client';\nimport { \n  MerchantOutput, \n  MerchantCreateInput, \n  MerchantUpdateInput \n} from './types';\n\n/**\n * Merchants API manager (MF2)\n */\nexport class MerchantsAPI {\n  constructor(private httpClient: HttpClient) {}\n\n  /**\n   * Retrieve the collection of Merchant resources\n   */\n  async list(params: { page?: number } = {}): Promise<MerchantOutput[]> {\n    const searchParams = new URLSearchParams();\n    \n    if (params.page) {\n      searchParams.append('page', params.page.toString());\n    }\n\n    const query = searchParams.toString();\n    const url = query ? `/mf2/merchants?${query}` : '/mf2/merchants';\n    \n    return this.httpClient.get<MerchantOutput[]>(url);\n  }\n\n  /**\n   * Create a Merchant resource\n   */\n  async create(merchantData: MerchantCreateInput): Promise<MerchantOutput> {\n    return this.httpClient.post<MerchantOutput>('/mf2/merchants', merchantData);\n  }\n\n  /**\n   * Retrieve a Merchant resource by UUID\n   */\n  async get(uuid: string): Promise<MerchantOutput> {\n    return this.httpClient.get<MerchantOutput>(`/mf2/merchants/${uuid}`);\n  }\n\n  /**\n   * Replace the Merchant resource\n   */\n  async update(uuid: string, merchantData: MerchantUpdateInput): Promise<MerchantOutput> {\n    return this.httpClient.put<MerchantOutput>(`/mf2/merchants/${uuid}`, merchantData);\n  }\n}","import { HttpClient } from './http-client';\nimport { \n  PemCreateInput, \n  PemCreateOutput, \n  PemCertificatesOutput \n} from './types';\n\n/**\n * PEMs API manager (MF2)\n */\nexport class PemsAPI {\n  constructor(private httpClient: HttpClient) {}\n\n  /**\n   * Create a new PEM\n   */\n  async create(pemData: PemCreateInput): Promise<PemCreateOutput> {\n    return this.httpClient.post<PemCreateOutput>('/mf2/point-of-sales', pemData);\n  }\n\n  /**\n   * Get mTLS and signing certificates for a PEM\n   */\n  async getCertificates(id: string): Promise<PemCertificatesOutput> {\n    return this.httpClient.get<PemCertificatesOutput>(`/mf2/point-of-sales/${id}/certificates`);\n  }\n}","import { ConfigManager } from '../config';\nimport { HttpClient } from './http-client';\nimport { ReceiptsAPI } from './receipts';\nimport { CashiersAPI } from './cashiers';\nimport { PointOfSalesAPI } from './point-of-sales';\nimport { CashRegistersAPI } from './cash-registers';\nimport { MerchantsAPI } from './merchants';\nimport { PemsAPI } from './pems';\n\n/**\n * Main API client that combines all resource managers\n */\nexport class APIClient {\n  private httpClient: HttpClient;\n\n  // Resource managers\n  public readonly receipts: ReceiptsAPI;\n  public readonly cashiers: CashiersAPI;\n  public readonly pointOfSales: PointOfSalesAPI;\n  public readonly cashRegisters: CashRegistersAPI;\n  public readonly merchants: MerchantsAPI;\n  public readonly pems: PemsAPI;\n\n  constructor(config: ConfigManager) {\n    this.httpClient = new HttpClient(config);\n\n    // Initialize resource managers\n    this.receipts = new ReceiptsAPI(this.httpClient);\n    this.cashiers = new CashiersAPI(this.httpClient);\n    this.pointOfSales = new PointOfSalesAPI(this.httpClient);\n    this.cashRegisters = new CashRegistersAPI(this.httpClient);\n    this.merchants = new MerchantsAPI(this.httpClient);\n    this.pems = new PemsAPI(this.httpClient);\n  }\n\n  /**\n   * Set authorization header for all requests\n   */\n  setAuthorizationHeader(token: string): void {\n    this.httpClient.setAuthorizationHeader(token);\n  }\n\n  /**\n   * Remove authorization header\n   */\n  removeAuthorizationHeader(): void {\n    this.httpClient.removeAuthorizationHeader();\n  }\n\n  /**\n   * Get the underlying HTTP client for advanced use cases\n   */\n  getHttpClient(): HttpClient {\n    return this.httpClient;\n  }\n}","import { IStorage } from '../adapters';\nimport { \n  QueuedOperation, \n  OperationType, \n  ResourceType, \n  QueueConfig, \n  QueueEvents \n} from './types';\n\n/**\n * Default queue configuration\n */\nconst DEFAULT_CONFIG: QueueConfig = {\n  maxRetries: 3,\n  retryDelay: 1000, // 1 second\n  maxRetryDelay: 30000, // 30 seconds\n  backoffMultiplier: 2,\n  maxQueueSize: 1000,\n  batchSize: 10,\n  syncInterval: 0, // Disabled by default\n};\n\n/**\n * Operation queue manager for offline functionality\n */\nexport class OperationQueue {\n  private static readonly QUEUE_KEY = 'acube_operation_queue';\n  \n  private queue: QueuedOperation[] = [];\n  private isProcessing = false;\n  private syncIntervalId?: NodeJS.Timeout;\n\n  constructor(\n    private storage: IStorage,\n    private config: QueueConfig = DEFAULT_CONFIG,\n    private events: QueueEvents = {}\n  ) {\n    this.config = { ...DEFAULT_CONFIG, ...config };\n    this.loadQueue();\n    \n    if (this.config.syncInterval > 0) {\n      this.startAutoSync();\n    }\n  }\n\n  /**\n   * Add an operation to the queue\n   */\n  async addOperation(\n    type: OperationType,\n    resource: ResourceType,\n    endpoint: string,\n    method: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE',\n    data?: any,\n    priority: number = 1\n  ): Promise<string> {\n    // Check queue size limit\n    if (this.queue.length >= this.config.maxQueueSize) {\n      // Remove oldest low-priority operation\n      const lowPriorityIndex = this.queue.findIndex(op => op.priority === 1);\n      if (lowPriorityIndex !== -1) {\n        this.queue.splice(lowPriorityIndex, 1);\n      } else {\n        throw new Error('Queue is full and cannot add new operations');\n      }\n    }\n\n    const operation: QueuedOperation = {\n      id: this.generateId(),\n      type,\n      resource,\n      endpoint,\n      method,\n      data,\n      status: 'pending',\n      createdAt: Date.now(),\n      updatedAt: Date.now(),\n      retryCount: 0,\n      maxRetries: this.config.maxRetries,\n      priority,\n    };\n\n    // Insert operation based on priority (higher priority first)\n    const insertIndex = this.queue.findIndex(op => op.priority < priority);\n    if (insertIndex === -1) {\n      this.queue.push(operation);\n    } else {\n      this.queue.splice(insertIndex, 0, operation);\n    }\n\n    await this.saveQueue();\n    this.events.onOperationAdded?.(operation);\n\n    return operation.id;\n  }\n\n  /**\n   * Get all pending operations\n   */\n  getPendingOperations(): QueuedOperation[] {\n    return this.queue.filter(op => op.status === 'pending' || op.status === 'failed');\n  }\n\n  /**\n   * Get operation by ID\n   */\n  getOperation(id: string): QueuedOperation | undefined {\n    return this.queue.find(op => op.id === id);\n  }\n\n  /**\n   * Remove operation from queue\n   */\n  async removeOperation(id: string): Promise<boolean> {\n    const index = this.queue.findIndex(op => op.id === id);\n    if (index === -1) {\n      return false;\n    }\n\n    this.queue.splice(index, 1);\n    await this.saveQueue();\n    return true;\n  }\n\n  /**\n   * Update operation status\n   */\n  async updateOperation(id: string, updates: Partial<QueuedOperation>): Promise<boolean> {\n    const operation = this.queue.find(op => op.id === id);\n    if (!operation) {\n      return false;\n    }\n\n    Object.assign(operation, {\n      ...updates,\n      updatedAt: Date.now(),\n    });\n\n    await this.saveQueue();\n    return true;\n  }\n\n  /**\n   * Get queue statistics\n   */\n  getStats(): {\n    total: number;\n    pending: number;\n    processing: number;\n    completed: number;\n    failed: number;\n  } {\n    return {\n      total: this.queue.length,\n      pending: this.queue.filter(op => op.status === 'pending').length,\n      processing: this.queue.filter(op => op.status === 'processing').length,\n      completed: this.queue.filter(op => op.status === 'completed').length,\n      failed: this.queue.filter(op => op.status === 'failed').length,\n    };\n  }\n\n  /**\n   * Clear all operations from queue\n   */\n  async clearQueue(): Promise<void> {\n    this.queue = [];\n    await this.saveQueue();\n  }\n\n  /**\n   * Clear completed operations\n   */\n  async clearCompleted(): Promise<void> {\n    this.queue = this.queue.filter(op => op.status !== 'completed');\n    await this.saveQueue();\n  }\n\n  /**\n   * Clear failed operations\n   */\n  async clearFailed(): Promise<void> {\n    this.queue = this.queue.filter(op => op.status !== 'failed');\n    await this.saveQueue();\n  }\n\n  /**\n   * Retry failed operations\n   */\n  async retryFailed(): Promise<void> {\n    const failedOperations = this.queue.filter(op => op.status === 'failed');\n    \n    for (const operation of failedOperations) {\n      if (operation.retryCount < operation.maxRetries) {\n        operation.status = 'pending';\n        operation.retryCount++;\n        operation.updatedAt = Date.now();\n        delete operation.error;\n      }\n    }\n\n    await this.saveQueue();\n  }\n\n  /**\n   * Get operations for batch processing\n   */\n  getNextBatch(): QueuedOperation[] {\n    return this.queue\n      .filter(op => op.status === 'pending')\n      .sort((a, b) => b.priority - a.priority || a.createdAt - b.createdAt)\n      .slice(0, this.config.batchSize);\n  }\n\n  /**\n   * Check if queue is empty (no pending operations)\n   */\n  isEmpty(): boolean {\n    return this.getPendingOperations().length === 0;\n  }\n\n  /**\n   * Start auto-sync timer\n   */\n  startAutoSync(): void {\n    if (this.syncIntervalId) {\n      return;\n    }\n\n    this.syncIntervalId = setInterval(() => {\n      if (!this.isEmpty() && !this.isProcessing) {\n        // Trigger sync through event\n        this.events.onQueueEmpty?.();\n      }\n    }, this.config.syncInterval);\n  }\n\n  /**\n   * Stop auto-sync timer\n   */\n  stopAutoSync(): void {\n    if (this.syncIntervalId) {\n      clearInterval(this.syncIntervalId);\n      this.syncIntervalId = undefined;\n    }\n  }\n\n  /**\n   * Set processing state\n   */\n  setProcessing(processing: boolean): void {\n    this.isProcessing = processing;\n  }\n\n  /**\n   * Check if currently processing\n   */\n  isCurrentlyProcessing(): boolean {\n    return this.isProcessing;\n  }\n\n  /**\n   * Load queue from storage\n   */\n  private async loadQueue(): Promise<void> {\n    try {\n      const queueData = await this.storage.get(OperationQueue.QUEUE_KEY);\n      if (queueData) {\n        this.queue = JSON.parse(queueData);\n        \n        // Reset processing status on load (in case app crashed while processing)\n        this.queue.forEach(op => {\n          if (op.status === 'processing') {\n            op.status = 'pending';\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Failed to load queue from storage:', error);\n      this.queue = [];\n    }\n  }\n\n  /**\n   * Save queue to storage\n   */\n  private async saveQueue(): Promise<void> {\n    try {\n      await this.storage.set(OperationQueue.QUEUE_KEY, JSON.stringify(this.queue));\n    } catch (error) {\n      console.error('Failed to save queue to storage:', error);\n      this.events.onError?.(new Error(`Failed to save queue: ${error}`));\n    }\n  }\n\n  /**\n   * Generate unique ID for operations\n   */\n  private generateId(): string {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    this.stopAutoSync();\n  }\n}","import { INetworkMonitor } from '../adapters';\nimport { HttpClient } from '../core/api';\nimport { OperationQueue } from './queue';\nimport { \n  QueuedOperation, \n  SyncResult, \n  BatchSyncResult, \n  QueueConfig, \n  QueueEvents \n} from './types';\n\n/**\n * Sync manager for handling offline operations\n */\nexport class SyncManager {\n  private isOnline = true;\n  private networkUnsubscribe?: () => void;\n  private syncTimeout?: NodeJS.Timeout;\n\n  constructor(\n    private queue: OperationQueue,\n    private httpClient: HttpClient,\n    private networkMonitor: INetworkMonitor,\n    private config: QueueConfig,\n    private events: QueueEvents = {}\n  ) {\n    this.isOnline = networkMonitor.isOnline();\n    this.setupNetworkMonitoring();\n  }\n\n  /**\n   * Setup network monitoring and auto-sync\n   */\n  private setupNetworkMonitoring(): void {\n    this.networkUnsubscribe = this.networkMonitor.onStatusChange((online) => {\n      const wasOffline = !this.isOnline;\n      this.isOnline = online;\n\n      if (online && wasOffline) {\n        // Back online - sync pending operations\n        this.syncPendingOperations();\n      }\n    });\n  }\n\n  /**\n   * Sync all pending operations\n   */\n  async syncPendingOperations(): Promise<BatchSyncResult> {\n    if (!this.isOnline) {\n      throw new Error('Cannot sync while offline');\n    }\n\n    if (this.queue.isCurrentlyProcessing()) {\n      throw new Error('Sync already in progress');\n    }\n\n    this.queue.setProcessing(true);\n\n    try {\n      const results: SyncResult[] = [];\n      let successCount = 0;\n      let failureCount = 0;\n\n      while (!this.queue.isEmpty()) {\n        const batch = this.queue.getNextBatch();\n        if (batch.length === 0) break;\n\n        // Process batch in parallel\n        const batchPromises = batch.map(operation => \n          this.processOperation(operation)\n        );\n\n        const batchResults = await Promise.allSettled(batchPromises);\n        \n        batchResults.forEach((result, index) => {\n          const operation = batch[index];\n          if (!operation) return;\n          \n          if (result.status === 'fulfilled') {\n            const syncResult = result.value;\n            results.push(syncResult);\n            \n            if (syncResult.success) {\n              successCount++;\n              this.events.onOperationCompleted?.(syncResult);\n            } else {\n              failureCount++;\n              this.events.onOperationFailed?.(syncResult);\n            }\n          } else {\n            // Promise rejected\n            const syncResult: SyncResult = {\n              operation,\n              success: false,\n              error: result.reason?.message || 'Unknown error',\n            };\n            \n            results.push(syncResult);\n            failureCount++;\n            this.events.onOperationFailed?.(syncResult);\n            \n            // Update operation status\n            this.queue.updateOperation(operation.id, {\n              status: 'failed',\n              error: syncResult.error,\n            });\n          }\n        });\n\n        // Add delay between batches to avoid overwhelming the server\n        if (!this.queue.isEmpty()) {\n          await this.delay(500);\n        }\n      }\n\n      const batchResult: BatchSyncResult = {\n        totalOperations: results.length,\n        successCount,\n        failureCount,\n        results,\n      };\n\n      this.events.onBatchSyncCompleted?.(batchResult);\n      \n      if (this.queue.isEmpty()) {\n        this.events.onQueueEmpty?.();\n      }\n\n      return batchResult;\n    } finally {\n      this.queue.setProcessing(false);\n    }\n  }\n\n  /**\n   * Process a single operation\n   */\n  private async processOperation(operation: QueuedOperation): Promise<SyncResult> {\n    // Update operation status to processing\n    await this.queue.updateOperation(operation.id, {\n      status: 'processing',\n    });\n\n    try {\n      const response = await this.executeOperation(operation);\n      \n      // Operation successful\n      await this.queue.updateOperation(operation.id, {\n        status: 'completed',\n      });\n\n      return {\n        operation,\n        success: true,\n        response,\n      };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      \n      // Check if we should retry\n      if (operation.retryCount < operation.maxRetries && this.isRetryableError(error)) {\n        // Schedule retry with exponential backoff\n        const delay = this.calculateRetryDelay(operation.retryCount);\n        \n        await this.queue.updateOperation(operation.id, {\n          status: 'pending',\n          retryCount: operation.retryCount + 1,\n          error: errorMessage,\n        });\n\n        // Schedule retry\n        setTimeout(() => {\n          if (this.isOnline && !this.queue.isCurrentlyProcessing()) {\n            this.syncPendingOperations();\n          }\n        }, delay);\n\n        return {\n          operation,\n          success: false,\n          error: `Retrying: ${errorMessage}`,\n        };\n      } else {\n        // Max retries exceeded or non-retryable error\n        await this.queue.updateOperation(operation.id, {\n          status: 'failed',\n          error: errorMessage,\n        });\n\n        return {\n          operation,\n          success: false,\n          error: errorMessage,\n        };\n      }\n    }\n  }\n\n  /**\n   * Execute the actual HTTP operation\n   */\n  private async executeOperation(operation: QueuedOperation): Promise<any> {\n    const { method, endpoint, data, headers } = operation;\n    \n    const config = headers ? { headers } : undefined;\n\n    switch (method) {\n      case 'GET':\n        return await this.httpClient.get(endpoint, config);\n      case 'POST':\n        return await this.httpClient.post(endpoint, data, config);\n      case 'PUT':\n        return await this.httpClient.put(endpoint, data, config);\n      case 'PATCH':\n        return await this.httpClient.patch(endpoint, data, config);\n      case 'DELETE':\n        return await this.httpClient.delete(endpoint, config);\n      default:\n        throw new Error(`Unsupported HTTP method: ${method}`);\n    }\n  }\n\n  /**\n   * Check if an error is retryable\n   */\n  private isRetryableError(error: any): boolean {\n    // Network errors are retryable\n    if (error.code === 'NETWORK_ERROR') {\n      return true;\n    }\n\n    // Server errors (5xx) are retryable\n    if (error.statusCode && error.statusCode >= 500) {\n      return true;\n    }\n\n    // Rate limiting is retryable\n    if (error.statusCode === 429) {\n      return true;\n    }\n\n    // Timeout errors are retryable\n    if (error.code === 'ECONNABORTED' || error.message?.includes('timeout')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Calculate retry delay with exponential backoff\n   */\n  private calculateRetryDelay(retryCount: number): number {\n    const delay = this.config.retryDelay * Math.pow(this.config.backoffMultiplier, retryCount);\n    return Math.min(delay, this.config.maxRetryDelay);\n  }\n\n  /**\n   * Utility delay function\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Check if currently online\n   */\n  isCurrentlyOnline(): boolean {\n    return this.isOnline;\n  }\n\n  /**\n   * Manually trigger sync (if online)\n   */\n  async triggerSync(): Promise<BatchSyncResult | null> {\n    if (!this.isOnline) {\n      return null;\n    }\n\n    if (this.queue.isEmpty()) {\n      return {\n        totalOperations: 0,\n        successCount: 0,\n        failureCount: 0,\n        results: [],\n      };\n    }\n\n    return await this.syncPendingOperations();\n  }\n\n  /**\n   * Get sync status\n   */\n  getSyncStatus(): {\n    isOnline: boolean;\n    isProcessing: boolean;\n    queueStats: ReturnType<OperationQueue['getStats']>;\n  } {\n    return {\n      isOnline: this.isOnline,\n      isProcessing: this.queue.isCurrentlyProcessing(),\n      queueStats: this.queue.getStats(),\n    };\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    if (this.networkUnsubscribe) {\n      this.networkUnsubscribe();\n    }\n    \n    if (this.syncTimeout) {\n      clearTimeout(this.syncTimeout);\n    }\n  }\n}","import { IStorage, INetworkMonitor } from '../adapters';\nimport { HttpClient } from '../core/api';\nimport { OperationQueue } from './queue';\nimport { SyncManager } from './sync-manager';\nimport { \n  OperationType, \n  ResourceType, \n  QueueConfig, \n  QueueEvents, \n  BatchSyncResult \n} from './types';\n\n/**\n * Offline manager that combines queue and sync functionality\n */\nexport class OfflineManager {\n  private queue: OperationQueue;\n  private syncManager: SyncManager;\n\n  constructor(\n    storage: IStorage,\n    httpClient: HttpClient,\n    networkMonitor: INetworkMonitor,\n    config: Partial<QueueConfig> = {},\n    events: QueueEvents = {}\n  ) {\n    // Create default config\n    const defaultConfig: QueueConfig = {\n      maxRetries: 3,\n      retryDelay: 1000,\n      maxRetryDelay: 30000,\n      backoffMultiplier: 2,\n      maxQueueSize: 1000,\n      batchSize: 10,\n      syncInterval: 30000, // 30 seconds\n    };\n\n    const finalConfig = { ...defaultConfig, ...config };\n\n    // Initialize queue and sync manager\n    this.queue = new OperationQueue(storage, finalConfig, events);\n    this.syncManager = new SyncManager(\n      this.queue,\n      httpClient,\n      networkMonitor,\n      finalConfig,\n      events\n    );\n  }\n\n  /**\n   * Queue an operation for offline execution\n   */\n  async queueOperation(\n    type: OperationType,\n    resource: ResourceType,\n    endpoint: string,\n    method: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE',\n    data?: any,\n    priority: number = 1\n  ): Promise<string> {\n    return await this.queue.addOperation(type, resource, endpoint, method, data, priority);\n  }\n\n  /**\n   * Queue a receipt creation\n   */\n  async queueReceiptCreation(receiptData: any, priority: number = 2): Promise<string> {\n    return await this.queueOperation(\n      'CREATE',\n      'receipt',\n      '/mf1/receipts',\n      'POST',\n      receiptData,\n      priority\n    );\n  }\n\n  /**\n   * Queue a receipt void operation\n   */\n  async queueReceiptVoid(voidData: any, priority: number = 3): Promise<string> {\n    return await this.queueOperation(\n      'DELETE',\n      'receipt',\n      '/mf1/receipts',\n      'DELETE',\n      voidData,\n      priority\n    );\n  }\n\n  /**\n   * Queue a receipt return operation\n   */\n  async queueReceiptReturn(returnData: any, priority: number = 3): Promise<string> {\n    return await this.queueOperation(\n      'CREATE',\n      'receipt',\n      '/mf1/receipts/return',\n      'POST',\n      returnData,\n      priority\n    );\n  }\n\n  /**\n   * Queue a cashier creation\n   */\n  async queueCashierCreation(cashierData: any, priority: number = 1): Promise<string> {\n    return await this.queueOperation(\n      'CREATE',\n      'cashier',\n      '/mf1/cashiers',\n      'POST',\n      cashierData,\n      priority\n    );\n  }\n\n  /**\n   * Check if currently online\n   */\n  isOnline(): boolean {\n    return this.syncManager.isCurrentlyOnline();\n  }\n\n  /**\n   * Get sync status and queue statistics\n   */\n  getStatus() {\n    return this.syncManager.getSyncStatus();\n  }\n\n  /**\n   * Get pending operations count\n   */\n  getPendingCount(): number {\n    return this.queue.getPendingOperations().length;\n  }\n\n  /**\n   * Check if queue is empty\n   */\n  isEmpty(): boolean {\n    return this.queue.isEmpty();\n  }\n\n  /**\n   * Manually trigger sync (if online)\n   */\n  async sync(): Promise<BatchSyncResult | null> {\n    return await this.syncManager.triggerSync();\n  }\n\n  /**\n   * Retry failed operations\n   */\n  async retryFailed(): Promise<void> {\n    await this.queue.retryFailed();\n    \n    // Trigger sync if online\n    if (this.isOnline()) {\n      await this.sync();\n    }\n  }\n\n  /**\n   * Clear completed operations\n   */\n  async clearCompleted(): Promise<void> {\n    await this.queue.clearCompleted();\n  }\n\n  /**\n   * Clear failed operations\n   */\n  async clearFailed(): Promise<void> {\n    await this.queue.clearFailed();\n  }\n\n  /**\n   * Clear all operations\n   */\n  async clearAll(): Promise<void> {\n    await this.queue.clearQueue();\n  }\n\n  /**\n   * Get operation by ID\n   */\n  getOperation(id: string) {\n    return this.queue.getOperation(id);\n  }\n\n  /**\n   * Remove specific operation\n   */\n  async removeOperation(id: string): Promise<boolean> {\n    return await this.queue.removeOperation(id);\n  }\n\n  /**\n   * Get queue statistics\n   */\n  getQueueStats() {\n    return this.queue.getStats();\n  }\n\n  /**\n   * Start auto-sync (if not already started)\n   */\n  startAutoSync(): void {\n    this.queue.startAutoSync();\n  }\n\n  /**\n   * Stop auto-sync\n   */\n  stopAutoSync(): void {\n    this.queue.stopAutoSync();\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    this.queue.destroy();\n    this.syncManager.destroy();\n  }\n}","import { \n  SDKConfig, \n  ConfigManager, \n  AuthManager, \n  APIClient,\n  loadPlatformAdapters,\n  AuthCredentials,\n  User,\n  ACubeSDKError \n} from './core';\nimport { PlatformAdapters } from './adapters';\nimport { OfflineManager, QueueEvents } from './offline';\n\n/**\n * SDK Events interface\n */\nexport interface SDKEvents {\n  onUserChanged?: (user: User | null) => void;\n  onAuthError?: (error: ACubeSDKError) => void;\n  onNetworkStatusChanged?: (online: boolean) => void;\n  onOfflineOperationAdded?: (operationId: string) => void;\n  onOfflineOperationCompleted?: (operationId: string, success: boolean) => void;\n}\n\n/**\n * Main ACube SDK class\n */\nexport class ACubeSDK {\n  private config: ConfigManager;\n  private adapters?: PlatformAdapters;\n  private authManager?: AuthManager;\n  private offlineManager?: OfflineManager;\n  private isInitialized = false;\n\n  // Public API clients\n  public api?: APIClient;\n\n  constructor(\n    config: SDKConfig,\n    customAdapters?: PlatformAdapters,\n    private events: SDKEvents = {}\n  ) {\n    this.config = new ConfigManager(config);\n    \n    if (customAdapters) {\n      this.adapters = customAdapters;\n    }\n  }\n\n  /**\n   * Initialize the SDK\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      return;\n    }\n\n    try {\n      // Load platform adapters if not provided\n      if (!this.adapters) {\n        this.adapters = await loadPlatformAdapters();\n      }\n\n      // Initialize API client\n      this.api = new APIClient(this.config);\n\n      // Initialize auth manager\n      this.authManager = new AuthManager(\n        this.config,\n        this.adapters.secureStorage,\n        {\n          onUserChanged: this.events.onUserChanged,\n          onAuthError: this.events.onAuthError,\n        }\n      );\n\n      // Initialize offline manager\n      const queueEvents: QueueEvents = {\n        onOperationAdded: (operation) => {\n          this.events.onOfflineOperationAdded?.(operation.id);\n        },\n        onOperationCompleted: (result) => {\n          this.events.onOfflineOperationCompleted?.(result.operation.id, result.success);\n        },\n        onOperationFailed: (result) => {\n          this.events.onOfflineOperationCompleted?.(result.operation.id, false);\n        },\n      };\n\n      this.offlineManager = new OfflineManager(\n        this.adapters.storage,\n        this.api.getHttpClient(),\n        this.adapters.networkMonitor,\n        {\n          syncInterval: 30000, // 30 seconds\n        },\n        queueEvents\n      );\n\n      // Set up network monitoring\n      this.adapters.networkMonitor.onStatusChange((online) => {\n        this.events.onNetworkStatusChanged?.(online);\n        \n        if (online && this.offlineManager) {\n          // Auto-sync when back online\n          this.offlineManager.sync().catch(console.error);\n        }\n      });\n\n      // Check if user is already authenticated\n      if (await this.authManager.isAuthenticated()) {\n        const token = await this.authManager.getAccessToken();\n        if (token) {\n          this.api.setAuthorizationHeader(token);\n        }\n      }\n\n      this.isInitialized = true;\n    } catch (error) {\n      throw new ACubeSDKError(\n        'UNKNOWN_ERROR',\n        `Failed to initialize SDK: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        error\n      );\n    }\n  }\n\n  /**\n   * Login with email and password\n   */\n  async login(credentials: AuthCredentials): Promise<User> {\n    this.ensureInitialized();\n    \n    const user = await this.authManager!.login(credentials);\n    \n    // Set auth header for API calls\n    const token = await this.authManager!.getAccessToken();\n    if (token) {\n      this.api!.setAuthorizationHeader(token);\n    }\n\n    return user;\n  }\n\n  /**\n   * Logout current user\n   */\n  async logout(): Promise<void> {\n    this.ensureInitialized();\n    \n    await this.authManager!.logout();\n    this.api!.removeAuthorizationHeader();\n  }\n\n  /**\n   * Get current user\n   */\n  async getCurrentUser(): Promise<User | null> {\n    this.ensureInitialized();\n    \n    try {\n      return await this.authManager!.getCurrentUser();\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  async isAuthenticated(): Promise<boolean> {\n    this.ensureInitialized();\n    return await this.authManager!.isAuthenticated();\n  }\n\n  /**\n   * Get offline manager for manual queue operations\n   */\n  getOfflineManager(): OfflineManager {\n    this.ensureInitialized();\n    return this.offlineManager!;\n  }\n\n  /**\n   * Check if currently online\n   */\n  isOnline(): boolean {\n    this.ensureInitialized();\n    return this.adapters!.networkMonitor.isOnline();\n  }\n\n  /**\n   * Get SDK configuration\n   */\n  getConfig(): SDKConfig {\n    return this.config.getConfig();\n  }\n\n  /**\n   * Update SDK configuration\n   */\n  updateConfig(updates: Partial<SDKConfig>): void {\n    this.config.updateConfig(updates);\n  }\n\n  /**\n   * Get platform adapters (for advanced use cases)\n   */\n  getAdapters(): PlatformAdapters | undefined {\n    return this.adapters;\n  }\n\n  /**\n   * Destroy SDK and cleanup resources\n   */\n  destroy(): void {\n    this.offlineManager?.destroy();\n    this.isInitialized = false;\n  }\n\n  /**\n   * Ensure SDK is initialized\n   */\n  private ensureInitialized(): void {\n    if (!this.isInitialized) {\n      throw new ACubeSDKError(\n        'UNKNOWN_ERROR',\n        'SDK not initialized. Call initialize() first.'\n      );\n    }\n  }\n}\n\n/**\n * Create and initialize ACube SDK\n */\nexport async function createACubeSDK(\n  config: SDKConfig,\n  customAdapters?: PlatformAdapters,\n  events?: SDKEvents\n): Promise<ACubeSDK> {\n  const sdk = new ACubeSDK(config, customAdapters, events);\n  await sdk.initialize();\n  return sdk;\n}","import { IStorage, ISecureStorage } from '../../adapters';\n\n/**\n * Web storage adapter using localStorage\n */\nexport class WebStorageAdapter implements IStorage {\n  async get(key: string): Promise<string | null> {\n    try {\n      return localStorage.getItem(key);\n    } catch {\n      return null;\n    }\n  }\n\n  async set(key: string, value: string): Promise<void> {\n    try {\n      localStorage.setItem(key, value);\n    } catch (error) {\n      throw new Error(`Failed to store item: ${error}`);\n    }\n  }\n\n  async remove(key: string): Promise<void> {\n    try {\n      localStorage.removeItem(key);\n    } catch (error) {\n      throw new Error(`Failed to remove item: ${error}`);\n    }\n  }\n\n  async clear(): Promise<void> {\n    try {\n      localStorage.clear();\n    } catch (error) {\n      throw new Error(`Failed to clear storage: ${error}`);\n    }\n  }\n\n  async getAllKeys(): Promise<string[]> {\n    try {\n      return Object.keys(localStorage);\n    } catch {\n      return [];\n    }\n  }\n\n  async multiGet(keys: string[]): Promise<Record<string, string | null>> {\n    const result: Record<string, string | null> = {};\n    for (const key of keys) {\n      result[key] = await this.get(key);\n    }\n    return result;\n  }\n\n  async multiSet(items: Record<string, string>): Promise<void> {\n    for (const [key, value] of Object.entries(items)) {\n      await this.set(key, value);\n    }\n  }\n\n  async multiRemove(keys: string[]): Promise<void> {\n    for (const key of keys) {\n      await this.remove(key);\n    }\n  }\n}\n\n/**\n * Web secure storage adapter using encrypted localStorage\n */\nexport class WebSecureStorageAdapter implements ISecureStorage {\n  private static readonly ENCRYPTION_KEY = 'acube_secure_key';\n  private encryptionKey: string;\n\n  constructor() {\n    // Generate or retrieve encryption key\n    this.encryptionKey = this.getOrCreateEncryptionKey();\n  }\n\n  async get(key: string): Promise<string | null> {\n    try {\n      const encrypted = localStorage.getItem(this.getSecureKey(key));\n      if (!encrypted) return null;\n      \n      return this.decrypt(encrypted);\n    } catch {\n      return null;\n    }\n  }\n\n  async set(key: string, value: string): Promise<void> {\n    try {\n      const encrypted = this.encrypt(value);\n      localStorage.setItem(this.getSecureKey(key), encrypted);\n    } catch (error) {\n      throw new Error(`Failed to store secure item: ${error}`);\n    }\n  }\n\n  async remove(key: string): Promise<void> {\n    try {\n      localStorage.removeItem(this.getSecureKey(key));\n    } catch (error) {\n      throw new Error(`Failed to remove secure item: ${error}`);\n    }\n  }\n\n  async clear(): Promise<void> {\n    try {\n      const keys = Object.keys(localStorage);\n      const secureKeys = keys.filter(key => key.startsWith('secure_'));\n      secureKeys.forEach(key => localStorage.removeItem(key));\n    } catch (error) {\n      throw new Error(`Failed to clear secure storage: ${error}`);\n    }\n  }\n\n  async getAllKeys(): Promise<string[]> {\n    try {\n      const keys = Object.keys(localStorage);\n      return keys\n        .filter(key => key.startsWith('secure_'))\n        .map(key => key.replace('secure_', ''));\n    } catch {\n      return [];\n    }\n  }\n\n  async multiGet(keys: string[]): Promise<Record<string, string | null>> {\n    const result: Record<string, string | null> = {};\n    for (const key of keys) {\n      result[key] = await this.get(key);\n    }\n    return result;\n  }\n\n  async multiSet(items: Record<string, string>): Promise<void> {\n    for (const [key, value] of Object.entries(items)) {\n      await this.set(key, value);\n    }\n  }\n\n  async multiRemove(keys: string[]): Promise<void> {\n    for (const key of keys) {\n      await this.remove(key);\n    }\n  }\n\n  async isAvailable(): Promise<boolean> {\n    try {\n      const test = 'test';\n      localStorage.setItem(test, test);\n      localStorage.removeItem(test);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  async getSecurityLevel(): Promise<string> {\n    return 'Basic encryption using Web Crypto API';\n  }\n\n  private getSecureKey(key: string): string {\n    return `secure_${key}`;\n  }\n\n  private getOrCreateEncryptionKey(): string {\n    let key = localStorage.getItem(WebSecureStorageAdapter.ENCRYPTION_KEY);\n    if (!key) {\n      key = this.generateKey();\n      localStorage.setItem(WebSecureStorageAdapter.ENCRYPTION_KEY, key);\n    }\n    return key;\n  }\n\n  private generateKey(): string {\n    // Simple key generation - in production, use crypto.getRandomValues()\n    return Array.from(crypto.getRandomValues(new Uint8Array(32)))\n      .map(b => b.toString(16).padStart(2, '0'))\n      .join('');\n  }\n\n  private encrypt(text: string): string {\n    // Simple XOR encryption - in production, use Web Crypto API\n    let result = '';\n    for (let i = 0; i < text.length; i++) {\n      const keyChar = this.encryptionKey.charCodeAt(i % this.encryptionKey.length);\n      const textChar = text.charCodeAt(i);\n      result += String.fromCharCode(textChar ^ keyChar);\n    }\n    return btoa(result);\n  }\n\n  private decrypt(encrypted: string): string {\n    const text = atob(encrypted);\n    let result = '';\n    for (let i = 0; i < text.length; i++) {\n      const keyChar = this.encryptionKey.charCodeAt(i % this.encryptionKey.length);\n      const textChar = text.charCodeAt(i);\n      result += String.fromCharCode(textChar ^ keyChar);\n    }\n    return result;\n  }\n}","import { INetworkMonitor, NetworkInfo } from '../../adapters';\n\n/**\n * Web network monitor using navigator.onLine and Network Information API\n */\nexport class WebNetworkMonitor implements INetworkMonitor {\n  private listeners: Array<(online: boolean) => void> = [];\n\n  constructor() {\n    // Set up global event listeners\n    if (typeof window !== 'undefined') {\n      window.addEventListener('online', this.handleOnline);\n      window.addEventListener('offline', this.handleOffline);\n    }\n  }\n\n  isOnline(): boolean {\n    if (typeof navigator !== 'undefined' && 'onLine' in navigator) {\n      return navigator.onLine;\n    }\n    // Fallback to true if navigator is not available\n    return true;\n  }\n\n  onStatusChange(callback: (online: boolean) => void): () => void {\n    this.listeners.push(callback);\n    \n    // Return cleanup function\n    return () => {\n      const index = this.listeners.indexOf(callback);\n      if (index > -1) {\n        this.listeners.splice(index, 1);\n      }\n    };\n  }\n\n  async getNetworkInfo(): Promise<NetworkInfo | null> {\n    // Use Network Information API if available\n    if ('connection' in navigator) {\n      const connection = (navigator as any).connection;\n      \n      return {\n        type: this.mapConnectionType(connection.type),\n        effectiveType: connection.effectiveType,\n        downlink: connection.downlink,\n        rtt: connection.rtt,\n      };\n    }\n\n    // Fallback to basic info\n    return {\n      type: this.isOnline() ? 'unknown' : 'unknown',\n    };\n  }\n\n  private handleOnline = (): void => {\n    this.notifyListeners(true);\n  };\n\n  private handleOffline = (): void => {\n    this.notifyListeners(false);\n  };\n\n  private notifyListeners(online: boolean): void {\n    this.listeners.forEach(callback => {\n      try {\n        callback(online);\n      } catch (error) {\n        console.error('Error in network status callback:', error);\n      }\n    });\n  }\n\n  private mapConnectionType(type: string): 'wifi' | 'cellular' | 'ethernet' | 'unknown' {\n    switch (type) {\n      case 'wifi':\n        return 'wifi';\n      case 'cellular':\n      case '2g':\n      case '3g':\n      case '4g':\n      case '5g':\n        return 'cellular';\n      case 'ethernet':\n        return 'ethernet';\n      default:\n        return 'unknown';\n    }\n  }\n\n  /**\n   * Cleanup method to remove event listeners\n   */\n  destroy(): void {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('online', this.handleOnline);\n      window.removeEventListener('offline', this.handleOffline);\n    }\n    this.listeners = [];\n  }\n}","import { IStorage, ISecureStorage } from '../../adapters';\n\n/**\n * React Native storage adapter using AsyncStorage\n */\nexport class ReactNativeStorageAdapter implements IStorage {\n  private AsyncStorage: any;\n\n  constructor() {\n    this.initializeAsyncStorage();\n  }\n\n  private async initializeAsyncStorage() {\n    try {\n      // Try to import AsyncStorage\n      const AsyncStorageModule = await import('@react-native-async-storage/async-storage');\n      this.AsyncStorage = AsyncStorageModule.default;\n    } catch {\n      // Fallback to legacy AsyncStorage if available\n      try {\n        const { AsyncStorage } = await import('react-native');\n        this.AsyncStorage = AsyncStorage;\n      } catch {\n        throw new Error('AsyncStorage not available. Please install @react-native-async-storage/async-storage');\n      }\n    }\n  }\n\n  async get(key: string): Promise<string | null> {\n    if (!this.AsyncStorage) await this.initializeAsyncStorage();\n    \n    try {\n      return await this.AsyncStorage.getItem(key);\n    } catch (error) {\n      console.error('Failed to get item from AsyncStorage:', error);\n      return null;\n    }\n  }\n\n  async set(key: string, value: string): Promise<void> {\n    if (!this.AsyncStorage) await this.initializeAsyncStorage();\n    \n    try {\n      await this.AsyncStorage.setItem(key, value);\n    } catch (error) {\n      throw new Error(`Failed to store item: ${error}`);\n    }\n  }\n\n  async remove(key: string): Promise<void> {\n    if (!this.AsyncStorage) await this.initializeAsyncStorage();\n    \n    try {\n      await this.AsyncStorage.removeItem(key);\n    } catch (error) {\n      throw new Error(`Failed to remove item: ${error}`);\n    }\n  }\n\n  async clear(): Promise<void> {\n    if (!this.AsyncStorage) await this.initializeAsyncStorage();\n    \n    try {\n      await this.AsyncStorage.clear();\n    } catch (error) {\n      throw new Error(`Failed to clear storage: ${error}`);\n    }\n  }\n\n  async getAllKeys(): Promise<string[]> {\n    if (!this.AsyncStorage) await this.initializeAsyncStorage();\n    \n    try {\n      return await this.AsyncStorage.getAllKeys();\n    } catch (error) {\n      console.error('Failed to get all keys:', error);\n      return [];\n    }\n  }\n\n  async multiGet(keys: string[]): Promise<Record<string, string | null>> {\n    if (!this.AsyncStorage) await this.initializeAsyncStorage();\n    \n    try {\n      const pairs = await this.AsyncStorage.multiGet(keys);\n      const result: Record<string, string | null> = {};\n      pairs.forEach(([key, value]: [string, string | null]) => {\n        result[key] = value;\n      });\n      return result;\n    } catch (error) {\n      console.error('Failed to get multiple items:', error);\n      const result: Record<string, string | null> = {};\n      keys.forEach(key => {\n        result[key] = null;\n      });\n      return result;\n    }\n  }\n\n  async multiSet(items: Record<string, string>): Promise<void> {\n    if (!this.AsyncStorage) await this.initializeAsyncStorage();\n    \n    try {\n      const pairs = Object.entries(items);\n      await this.AsyncStorage.multiSet(pairs);\n    } catch (error) {\n      throw new Error(`Failed to store multiple items: ${error}`);\n    }\n  }\n\n  async multiRemove(keys: string[]): Promise<void> {\n    if (!this.AsyncStorage) await this.initializeAsyncStorage();\n    \n    try {\n      await this.AsyncStorage.multiRemove(keys);\n    } catch (error) {\n      throw new Error(`Failed to remove multiple items: ${error}`);\n    }\n  }\n}\n\n/**\n * React Native secure storage adapter using expo-secure-store or react-native-keychain\n */\nexport class ReactNativeSecureStorageAdapter implements ISecureStorage {\n  private secureStore: any;\n  private keychain: any;\n  private isExpo: boolean = false;\n\n  constructor() {\n    this.initializeSecureStorage();\n  }\n\n  private async initializeSecureStorage() {\n    // Check if we're in an Expo environment first\n    let hasExpoSecureStore = false;\n    \n    try {\n      // Try to require.resolve to check if module exists without importing\n      require.resolve('expo-secure-store');\n      hasExpoSecureStore = true;\n    } catch {\n      // expo-secure-store not available\n    }\n\n    if (hasExpoSecureStore) {\n      try {\n        const SecureStore = await import('expo-secure-store');\n        this.secureStore = SecureStore;\n        this.isExpo = true;\n        return;\n      } catch (error) {\n        console.error('Failed to load expo-secure-store:', error);\n      }\n    }\n\n    // Only try react-native-keychain if expo-secure-store is not available\n    let hasKeychain = false;\n    try {\n      require.resolve('react-native-keychain');\n      hasKeychain = true;\n    } catch {\n      // react-native-keychain not available\n    }\n\n    if (hasKeychain) {\n      try {\n        const Keychain = await import('react-native-keychain');\n        this.keychain = Keychain;\n        this.isExpo = false;\n        return;\n      } catch (error) {\n        console.error('Failed to load react-native-keychain:', error);\n      }\n    }\n\n    throw new Error('No secure storage available. Please install expo-secure-store or react-native-keychain');\n  }\n\n  async get(key: string): Promise<string | null> {\n    if (!this.secureStore && !this.keychain) {\n      await this.initializeSecureStorage();\n    }\n\n    try {\n      if (this.isExpo && this.secureStore) {\n        return await this.secureStore.getItemAsync(key);\n      } else if (this.keychain) {\n        const credentials = await this.keychain.getInternetCredentials(key);\n        return credentials ? credentials.password : null;\n      }\n    } catch (error) {\n      console.error('Failed to get secure item:', error);\n    }\n    \n    return null;\n  }\n\n  async set(key: string, value: string): Promise<void> {\n    if (!this.secureStore && !this.keychain) {\n      await this.initializeSecureStorage();\n    }\n\n    try {\n      if (this.isExpo && this.secureStore) {\n        await this.secureStore.setItemAsync(key, value);\n      } else if (this.keychain) {\n        await this.keychain.setInternetCredentials(key, key, value);\n      }\n    } catch (error) {\n      throw new Error(`Failed to store secure item: ${error}`);\n    }\n  }\n\n  async remove(key: string): Promise<void> {\n    if (!this.secureStore && !this.keychain) {\n      await this.initializeSecureStorage();\n    }\n\n    try {\n      if (this.isExpo && this.secureStore) {\n        await this.secureStore.deleteItemAsync(key);\n      } else if (this.keychain) {\n        await this.keychain.resetInternetCredentials(key);\n      }\n    } catch (error) {\n      throw new Error(`Failed to remove secure item: ${error}`);\n    }\n  }\n\n  async clear(): Promise<void> {\n    // Note: This is a simplified implementation\n    // In a real implementation, you'd need to track keys or use a different approach\n    console.warn('Clear all secure items not fully implemented for React Native');\n  }\n\n  async getAllKeys(): Promise<string[]> {\n    // Note: This is not easily implementable with current secure storage solutions\n    // You would need to maintain a separate index of keys\n    console.warn('Get all secure keys not implemented for React Native');\n    return [];\n  }\n\n  async multiGet(keys: string[]): Promise<Record<string, string | null>> {\n    const result: Record<string, string | null> = {};\n    for (const key of keys) {\n      result[key] = await this.get(key);\n    }\n    return result;\n  }\n\n  async multiSet(items: Record<string, string>): Promise<void> {\n    for (const [key, value] of Object.entries(items)) {\n      await this.set(key, value);\n    }\n  }\n\n  async multiRemove(keys: string[]): Promise<void> {\n    for (const key of keys) {\n      await this.remove(key);\n    }\n  }\n\n  async isAvailable(): Promise<boolean> {\n    try {\n      await this.initializeSecureStorage();\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  async getSecurityLevel(): Promise<string> {\n    if (this.isExpo) {\n      return 'Expo SecureStore (iOS Keychain / Android EncryptedSharedPreferences)';\n    } else {\n      return 'React Native Keychain (iOS Keychain / Android Keystore)';\n    }\n  }\n}","import { INetworkMonitor, NetworkInfo } from '../../adapters';\n\n/**\n * React Native network monitor using @react-native-community/netinfo\n */\nexport class ReactNativeNetworkMonitor implements INetworkMonitor {\n  private NetInfo: any;\n  private listeners: Array<(online: boolean) => void> = [];\n  private unsubscribe: (() => void) | null = null;\n  private currentState: boolean = true;\n\n  constructor() {\n    this.initializeNetInfo();\n  }\n\n  private async initializeNetInfo() {\n    try {\n      // Try to import NetInfo\n      const NetInfoModule = await import('@react-native-community/netinfo');\n      this.NetInfo = NetInfoModule.default;\n      \n      // Subscribe to network state changes\n      this.subscribeToNetworkState();\n    } catch (error) {\n      console.warn('NetInfo not available. Network monitoring will be limited:', error);\n    }\n  }\n\n  private subscribeToNetworkState() {\n    if (!this.NetInfo) return;\n\n    this.unsubscribe = this.NetInfo.addEventListener((state: any) => {\n      const isOnline = state.isConnected && state.isInternetReachable !== false;\n      \n      if (isOnline !== this.currentState) {\n        this.currentState = isOnline;\n        this.notifyListeners(isOnline);\n      }\n    });\n  }\n\n  isOnline(): boolean {\n    return this.currentState;\n  }\n\n  onStatusChange(callback: (online: boolean) => void): () => void {\n    this.listeners.push(callback);\n    \n    // Initialize NetInfo if not already done\n    if (!this.NetInfo) {\n      this.initializeNetInfo();\n    }\n    \n    // Return cleanup function\n    return () => {\n      const index = this.listeners.indexOf(callback);\n      if (index > -1) {\n        this.listeners.splice(index, 1);\n      }\n    };\n  }\n\n  async getNetworkInfo(): Promise<NetworkInfo | null> {\n    if (!this.NetInfo) {\n      await this.initializeNetInfo();\n    }\n\n    if (!this.NetInfo) {\n      return null;\n    }\n\n    try {\n      const state = await this.NetInfo.fetch();\n      \n      return {\n        type: this.mapConnectionType(state.type),\n        effectiveType: this.mapEffectiveType(state.details?.cellularGeneration),\n      };\n    } catch (error) {\n      console.error('Failed to get network info:', error);\n      return null;\n    }\n  }\n\n  private notifyListeners(online: boolean): void {\n    this.listeners.forEach(callback => {\n      try {\n        callback(online);\n      } catch (error) {\n        console.error('Error in network status callback:', error);\n      }\n    });\n  }\n\n  private mapConnectionType(type: string): 'wifi' | 'cellular' | 'ethernet' | 'unknown' {\n    switch (type) {\n      case 'wifi':\n        return 'wifi';\n      case 'cellular':\n        return 'cellular';\n      case 'ethernet':\n        return 'ethernet';\n      case 'none':\n      case 'unknown':\n      default:\n        return 'unknown';\n    }\n  }\n\n  private mapEffectiveType(generation: string): '2g' | '3g' | '4g' | '5g' | undefined {\n    switch (generation) {\n      case '2g':\n        return '2g';\n      case '3g':\n        return '3g';\n      case '4g':\n        return '4g';\n      case '5g':\n        return '5g';\n      default:\n        return undefined;\n    }\n  }\n\n  /**\n   * Cleanup method to remove listeners and unsubscribe\n   */\n  destroy(): void {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = null;\n    }\n    this.listeners = [];\n  }\n}","import { IStorage, ISecureStorage } from '../../adapters';\n\n/**\n * Node.js storage adapter using in-memory storage (for testing)\n */\nexport class NodeStorageAdapter implements IStorage {\n  private storage: Map<string, string> = new Map();\n\n  async get(key: string): Promise<string | null> {\n    return this.storage.get(key) || null;\n  }\n\n  async set(key: string, value: string): Promise<void> {\n    this.storage.set(key, value);\n  }\n\n  async remove(key: string): Promise<void> {\n    this.storage.delete(key);\n  }\n\n  async clear(): Promise<void> {\n    this.storage.clear();\n  }\n\n  async getAllKeys(): Promise<string[]> {\n    return Array.from(this.storage.keys());\n  }\n\n  async multiGet(keys: string[]): Promise<Record<string, string | null>> {\n    const result: Record<string, string | null> = {};\n    keys.forEach(key => {\n      result[key] = this.storage.get(key) || null;\n    });\n    return result;\n  }\n\n  async multiSet(items: Record<string, string>): Promise<void> {\n    Object.entries(items).forEach(([key, value]) => {\n      this.storage.set(key, value);\n    });\n  }\n\n  async multiRemove(keys: string[]): Promise<void> {\n    keys.forEach(key => {\n      this.storage.delete(key);\n    });\n  }\n}\n\n/**\n * Node.js secure storage adapter using in-memory storage (for testing)\n * In production, this should use OS-specific secure storage\n */\nexport class NodeSecureStorageAdapter implements ISecureStorage {\n  private secureStorage: Map<string, string> = new Map();\n\n  async get(key: string): Promise<string | null> {\n    return this.secureStorage.get(key) || null;\n  }\n\n  async set(key: string, value: string): Promise<void> {\n    this.secureStorage.set(key, value);\n  }\n\n  async remove(key: string): Promise<void> {\n    this.secureStorage.delete(key);\n  }\n\n  async clear(): Promise<void> {\n    this.secureStorage.clear();\n  }\n\n  async getAllKeys(): Promise<string[]> {\n    return Array.from(this.secureStorage.keys());\n  }\n\n  async multiGet(keys: string[]): Promise<Record<string, string | null>> {\n    const result: Record<string, string | null> = {};\n    keys.forEach(key => {\n      result[key] = this.secureStorage.get(key) || null;\n    });\n    return result;\n  }\n\n  async multiSet(items: Record<string, string>): Promise<void> {\n    Object.entries(items).forEach(([key, value]) => {\n      this.secureStorage.set(key, value);\n    });\n  }\n\n  async multiRemove(keys: string[]): Promise<void> {\n    keys.forEach(key => {\n      this.secureStorage.delete(key);\n    });\n  }\n\n  async isAvailable(): Promise<boolean> {\n    return true;\n  }\n\n  async getSecurityLevel(): Promise<string> {\n    return 'In-memory storage (testing only - not secure)';\n  }\n}","import { INetworkMonitor, NetworkInfo } from '../../adapters';\n\n/**\n * Node.js network monitor (basic implementation)\n */\nexport class NodeNetworkMonitor implements INetworkMonitor {\n  private listeners: Array<(online: boolean) => void> = [];\n  private isConnected: boolean = true;\n\n  isOnline(): boolean {\n    return this.isConnected;\n  }\n\n  onStatusChange(callback: (online: boolean) => void): () => void {\n    this.listeners.push(callback);\n    \n    // Return cleanup function\n    return () => {\n      const index = this.listeners.indexOf(callback);\n      if (index > -1) {\n        this.listeners.splice(index, 1);\n      }\n    };\n  }\n\n  async getNetworkInfo(): Promise<NetworkInfo | null> {\n    // Basic implementation - in production, could use system-specific APIs\n    return {\n      type: 'ethernet', // Assume ethernet for Node.js\n    };\n  }\n\n  /**\n   * Manually set network status (for testing)\n   */\n  setNetworkStatus(online: boolean): void {\n    if (online !== this.isConnected) {\n      this.isConnected = online;\n      this.notifyListeners(online);\n    }\n  }\n\n  private notifyListeners(online: boolean): void {\n    this.listeners.forEach(callback => {\n      try {\n        callback(online);\n      } catch (error) {\n        console.error('Error in network status callback:', error);\n      }\n    });\n  }\n\n  /**\n   * Cleanup method\n   */\n  destroy(): void {\n    this.listeners = [];\n  }\n}"],"names":["DEFAULT_CONFIG","storage","network"],"mappings":"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"}