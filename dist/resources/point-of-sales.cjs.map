{"version":3,"sources":["../../src/generated/endpoints.ts","../../src/errors/index.ts","../../src/resources/base-openapi.ts","../../src/resources/point-of-sales.ts"],"names":["CashierEndpoints","PointOfSalesEndpoints","ReceiptEndpoints","CashRegisterEndpoints","MerchantEndpoints","PEMEndpoints","EndpointUtils","resource","operationId","allClasses","endpointClass","endpoint","pathParams","url","key","value","statusCode","ACubeSDKError","message","code","options","generateRequestId","ValidationError","operation","violations","BaseOpenAPIResource","config","endpointKey","data","httpOptions","response","error","headers","successResponse","context","queryParams","errors","paramName","paramType","expectedType","_options","enhancedError","operationKey","_error","attempt","delay","jitter","PointOfSalesResource","_PointOfSalesResource","client","serialNumber","activationData","inactivityData","device","_serialNumber","date","serialValidation","keyValidation","serialStr","_device","lastSeenTime","minutesSinceLastSeen","status","lastSeen","hoursSinceLastSeen","uptimeHours","uptimePercentage","availabilityStatus","devices","report","totalUptime","uptime","_date","reasons","requirements","now","chars","result","group"],"mappings":"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","file":"point-of-sales.cjs","sourcesContent":["/**\n * Generated Endpoint Definitions from OpenAPI Specification\n * Comprehensive endpoint configurations for all API resources\n * \n * This file is auto-generated based on openapi.yaml\n * Do not edit manually - use regeneration scripts instead\n */\n\nexport type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n\nexport interface EndpointDefinition {\n  path: string;\n  method: HttpMethod;\n  operationId: string;\n  summary?: string;\n  description?: string;\n  tags: string[];\n  security?: Array<Record<string, string[]>>;\n  parameters?: {\n    path?: Record<string, string>;\n    query?: Record<string, string>;\n    header?: Record<string, string>;\n  };\n  requestBody?: {\n    required: boolean;\n    contentType: string;\n    schema: string;\n  };\n  responses: {\n    [statusCode: string]: {\n      description: string;\n      contentType?: string;\n      schema?: string;\n    };\n  };\n  metadata?: {\n    resource: string;\n    operation: string;\n    authRequired: boolean;\n    retryable: boolean;\n  };\n}\n\n/**\n * Cashier Endpoints - User account management for cashiers\n */\nexport class CashierEndpoints {\n  static readonly LIST: EndpointDefinition = {\n    path: '/mf1/cashiers',\n    method: 'GET',\n    operationId: 'read_cashiers_mf1_cashiers_get',\n    summary: 'Read Cashiers',\n    description: 'Get a paginated list of cashiers',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      query: {\n        page: 'integer',\n        size: 'integer'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_Page__T_Customized_CashierOutput_'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly CREATE: EndpointDefinition = {\n    path: '/mf1/cashiers',\n    method: 'POST',\n    operationId: 'create_cashier_mf1_cashiers_post',\n    summary: 'Create Cashier',\n    description: 'Create a new cashier account',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_CashierCreateInput'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashierOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'create',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly ME: EndpointDefinition = {\n    path: '/mf1/cashiers/me',\n    method: 'GET',\n    operationId: 'read_cashier_me_mf1_cashiers_me_get',\n    summary: 'Read Cashier Me',\n    description: 'Read currently authenticated cashier\\'s information',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashierOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'me',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly GET_BY_ID: EndpointDefinition = {\n    path: '/mf1/cashiers/{cashier_id}',\n    method: 'GET',\n    operationId: 'read_cashier_by_id_mf1_cashiers__cashier_id__get',\n    summary: 'Read Cashier By Id',\n    description: 'Get a specific user by id',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        cashier_id: 'integer'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashierOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly DELETE: EndpointDefinition = {\n    path: '/mf1/cashiers/{cashier_id}',\n    method: 'DELETE',\n    operationId: 'delete_cashier_mf1_cashiers__cashier_id__delete',\n    summary: 'Delete Cashier',\n    description: 'Delete a cashier',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        cashier_id: 'integer'\n      }\n    },\n    responses: {\n      '204': {\n        description: 'Successful Response'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'delete',\n      authRequired: true,\n      retryable: false\n    }\n  };\n}\n\n/**\n * Point of Sales Endpoints - PEM device management\n */\nexport class PointOfSalesEndpoints {\n  static readonly LIST: EndpointDefinition = {\n    path: '/mf1/point-of-sales',\n    method: 'GET',\n    operationId: 'read_point_of_sales_mf1_point_of_sales_get',\n    summary: 'Read Point Of Sales',\n    description: 'Retrieve PEMs',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_Page__T_Customized_PointOfSaleOutput_'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly GET_BY_SERIAL: EndpointDefinition = {\n    path: '/mf1/point-of-sales/{serial_number}',\n    method: 'GET',\n    operationId: 'read_point_of_sale_mf1_point_of_sales__serial_number__get',\n    summary: 'Read Point Of Sale',\n    description: 'Get a specific Point of Sale by serial number',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        serial_number: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_PointOfSaleOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly CLOSE_JOURNAL: EndpointDefinition = {\n    path: '/mf1/point-of-sales/close',\n    method: 'POST',\n    operationId: 'close_journal_mf1_point_of_sales_close_post',\n    summary: 'Close Journal',\n    description: 'Close the daily journal for Point of Sales',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_CloseJournalRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CloseJournalOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'close_journal',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly ACTIVATION: EndpointDefinition = {\n    path: '/mf1/point-of-sales/{serial_number}/activation',\n    method: 'POST',\n    operationId: 'post_activation_mf1_point_of_sales__serial_number__activation_post',\n    summary: 'Post Activation',\n    description: 'Trigger the activation process of a Point of Sale by requesting a certificate to the Italian Tax Agency',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        serial_number: 'string'\n      }\n    },\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_ActivationRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ActivationOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'activation',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly CREATE_INACTIVITY: EndpointDefinition = {\n    path: '/mf1/point-of-sales/{serial_number}/inactivity',\n    method: 'POST',\n    operationId: 'create_inactivity_period_mf1_point_of_sales__serial_number__inactivity_post',\n    summary: 'Create Inactivity Period',\n    description: 'Create a new inactivity period',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        serial_number: 'string'\n      }\n    },\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_InactivityRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'create_inactivity',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly SET_OFFLINE: EndpointDefinition = {\n    path: '/mf1/point-of-sales/{serial_number}/status/offline',\n    method: 'POST',\n    operationId: 'post_offline_mf1_point_of_sales__serial_number__status_offline_post',\n    summary: 'Post Offline',\n    description: 'Change the state of the Point of Sale to \\'offline\\'',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        serial_number: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'set_offline',\n      authRequired: true,\n      retryable: false\n    }\n  };\n}\n\n/**\n * Receipt Endpoints - Electronic receipt management\n */\nexport class ReceiptEndpoints {\n  static readonly LIST: EndpointDefinition = {\n    path: '/mf1/receipts',\n    method: 'GET',\n    operationId: 'get_receipts_mf1_receipts_get',\n    summary: 'Get Receipts',\n    description: 'Get a list of electronic receipts',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      query: {\n        page: 'integer',\n        size: 'integer',\n        start_date: 'string',\n        end_date: 'string',\n        serial_number: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_Page__T_Customized_ReceiptOutput_'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly CREATE: EndpointDefinition = {\n    path: '/mf1/receipts',\n    method: 'POST',\n    operationId: 'create_receipt_mf1_receipts_post',\n    summary: 'Create Receipt',\n    description: 'Create a new electronic receipt',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_ReceiptInput'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'create',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly VOID: EndpointDefinition = {\n    path: '/mf1/receipts',\n    method: 'DELETE',\n    operationId: 'void_receipt_mf1_receipts_delete',\n    summary: 'Void Receipt',\n    description: 'Void an electronic receipt',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_VoidReceiptRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_VoidReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'void',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly GET_BY_UUID: EndpointDefinition = {\n    path: '/mf1/receipts/{receipt_uuid}',\n    method: 'GET',\n    operationId: 'get_receipt_mf1_receipts__receipt_uuid__get',\n    summary: 'Get Receipt',\n    description: 'Get an electronic receipt',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        receipt_uuid: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly VOID_WITH_PROOF: EndpointDefinition = {\n    path: '/mf1/receipts/void-with-proof',\n    method: 'DELETE',\n    operationId: 'void_receipt_via_proof_mf1_receipts_void_with_proof_delete',\n    summary: 'Void Receipt Via Proof',\n    description: 'Void an electronic receipt identified by a proof of purchase',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_VoidReceiptWithProofRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_VoidReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'void_with_proof',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly GET_DETAILS: EndpointDefinition = {\n    path: '/mf1/receipts/{receipt_uuid}/details',\n    method: 'GET',\n    operationId: 'get_receipt_details_mf1_receipts__receipt_uuid__details_get',\n    summary: 'Get Receipt Details',\n    description: 'Get the details or the PDF of an electronic receipt',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        receipt_uuid: 'string'\n      },\n      header: {\n        Accept: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'get_details',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly RETURN_ITEMS: EndpointDefinition = {\n    path: '/mf1/receipts/return',\n    method: 'POST',\n    operationId: 'return_receipt_items_mf1_receipts_return_post',\n    summary: 'Return Receipt Items',\n    description: 'Return items from an electronic receipt (same PEM or other PEM)',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_ReturnRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'return_items',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly RETURN_ITEMS_WITH_PROOF: EndpointDefinition = {\n    path: '/mf1/receipts/return-with-proof',\n    method: 'POST',\n    operationId: 'return_receipt_items_via_proof_mf1_receipts_return_with_proof_post',\n    summary: 'Return Receipt Items Via Proof',\n    description: 'Return items from an electronic receipt identified by a proof of purchase',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_ReturnWithProofRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'return_items_with_proof',\n      authRequired: true,\n      retryable: false\n    }\n  };\n}\n\n/**\n * Cash Register Endpoints - Cash register management\n */\nexport class CashRegisterEndpoints {\n  static readonly CREATE: EndpointDefinition = {\n    path: '/mf1/cash-register',\n    method: 'POST',\n    operationId: 'create_cash_register_mf1_cash_register_post',\n    summary: 'Create Cash Register',\n    description: 'Create a new cash register',\n    tags: ['Cash Register'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_CashRegisterInput'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashRegisterOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cash-registers',\n      operation: 'create',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly LIST: EndpointDefinition = {\n    path: '/mf1/cash-register',\n    method: 'GET',\n    operationId: 'get_cash_registers_mf1_cash_register_get',\n    summary: 'Get Cash Registers',\n    description: 'Get a list of cash registers',\n    tags: ['Cash Register'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_Page__T_Customized_CashRegisterOutput_'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'cash-registers',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly GET_BY_ID: EndpointDefinition = {\n    path: '/mf1/cash-register/{id}',\n    method: 'GET',\n    operationId: 'get_cash_register_mf1_cash_register__id__get',\n    summary: 'Get Cash Register',\n    description: 'Get a specific cash register by ID',\n    tags: ['Cash Register'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        id: 'integer'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashRegisterOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'cash-registers',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n}\n\n/**\n * Merchant Endpoints - Business entity management\n */\nexport class MerchantEndpoints {\n  static readonly LIST: EndpointDefinition = {\n    path: '/merchants',\n    method: 'GET',\n    operationId: 'api_merchants_get_collection',\n    summary: 'Get Merchants',\n    description: 'Get a list of merchants',\n    tags: ['Merchant'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'merchants',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly CREATE: EndpointDefinition = {\n    path: '/merchants',\n    method: 'POST',\n    operationId: 'api_merchants_post',\n    summary: 'Create Merchant',\n    description: 'Create a new merchant',\n    tags: ['Merchant'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'Merchant-create'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'Merchant-read'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'merchants',\n      operation: 'create',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly GET_BY_UUID: EndpointDefinition = {\n    path: '/merchants/{uuid}',\n    method: 'GET',\n    operationId: 'api_merchants_uuid_get',\n    summary: 'Get Merchant',\n    description: 'Get a specific merchant by UUID',\n    tags: ['Merchant'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        uuid: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'Merchant-read'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'merchants',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly UPDATE: EndpointDefinition = {\n    path: '/merchants/{uuid}',\n    method: 'PUT',\n    operationId: 'api_merchants_uuid_put',\n    summary: 'Update Merchant',\n    description: 'Update a merchant',\n    tags: ['Merchant'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        uuid: 'string'\n      }\n    },\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'Merchant-update'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'Merchant-read'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'merchants',\n      operation: 'update',\n      authRequired: true,\n      retryable: false\n    }\n  };\n}\n\n/**\n * PEM Endpoints - Point of Sale Module certificate management\n */\nexport class PEMEndpoints {\n  static readonly CREATE_POS: EndpointDefinition = {\n    path: '/point-of-sales',\n    method: 'POST',\n    operationId: 'api_point-of-sales_post',\n    summary: 'Create Point of Sale',\n    description: 'Create a new Point of Sale',\n    tags: ['Pem'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'PointOfSale-create'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'PointOfSale-read'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'pems',\n      operation: 'create_pos',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly GET_CERTIFICATES: EndpointDefinition = {\n    path: '/point-of-sales/{id}/certificates',\n    method: 'GET',\n    operationId: 'api_point-of-sales_idcertificates_get',\n    summary: 'Get PEM Certificates',\n    description: 'Get certificates for a Point of Sale',\n    tags: ['Pem'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        id: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'pems',\n      operation: 'get_certificates',\n      authRequired: true,\n      retryable: true\n    }\n  };\n}\n\n/**\n * Utility class for endpoint operations\n */\nexport class EndpointUtils {\n  /**\n   * Get all endpoints for a specific resource\n   */\n  static getResourceEndpoints(resource: string): EndpointDefinition[] {\n    switch (resource.toLowerCase()) {\n      case 'cashiers':\n        return Object.values(CashierEndpoints);\n      case 'point-of-sales':\n        return Object.values(PointOfSalesEndpoints);\n      case 'receipts':\n        return Object.values(ReceiptEndpoints);\n      case 'cash-registers':\n        return Object.values(CashRegisterEndpoints);\n      case 'merchants':\n        return Object.values(MerchantEndpoints);\n      case 'pems':\n        return Object.values(PEMEndpoints);\n      default:\n        return [];\n    }\n  }\n\n  /**\n   * Find endpoint by operation ID\n   */\n  static findEndpointByOperationId(operationId: string): EndpointDefinition | null {\n    const allClasses = [\n      CashierEndpoints,\n      PointOfSalesEndpoints,\n      ReceiptEndpoints,\n      CashRegisterEndpoints,\n      MerchantEndpoints,\n      PEMEndpoints,\n    ];\n\n    for (const endpointClass of allClasses) {\n      for (const endpoint of Object.values(endpointClass)) {\n        if (endpoint.operationId === operationId) {\n          return endpoint;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Build URL with path parameters\n   */\n  static buildUrl(endpoint: EndpointDefinition, pathParams: Record<string, string | number> = {}): string {\n    let url = endpoint.path;\n    \n    for (const [key, value] of Object.entries(pathParams)) {\n      url = url.replace(`{${key}}`, String(value));\n    }\n    \n    return url;\n  }\n\n  /**\n   * Check if endpoint requires authentication\n   */\n  static requiresAuth(endpoint: EndpointDefinition): boolean {\n    return endpoint.metadata?.authRequired ?? false;\n  }\n\n  /**\n   * Check if endpoint operation is retryable\n   */\n  static isRetryable(endpoint: EndpointDefinition): boolean {\n    return endpoint.metadata?.retryable ?? false;\n  }\n\n  /**\n   * Get expected content type for request body\n   */\n  static getRequestContentType(endpoint: EndpointDefinition): string | null {\n    return endpoint.requestBody?.contentType ?? null;\n  }\n\n  /**\n   * Get expected response content type\n   */\n  static getResponseContentType(endpoint: EndpointDefinition, statusCode: string): string | null {\n    return endpoint.responses[statusCode]?.contentType ?? null;\n  }\n}","/**\n * Enterprise-grade error handling system\n * Hierarchical error types with retry logic and audit information\n */\n\n// Base error class with audit information\nexport abstract class ACubeSDKError extends Error {\n  public readonly timestamp: Date;\n  public readonly requestId: string;\n  public readonly operation: string;\n  public readonly retryable: boolean;\n  public readonly statusCode?: number;\n  public readonly auditInfo?: AuditInfo;\n  public readonly cause?: Error;\n\n  constructor(\n    message: string,\n    public readonly code: string,\n    options: {\n      operation: string;\n      retryable?: boolean;\n      statusCode?: number;\n      requestId?: string;\n      auditInfo?: AuditInfo;\n      cause?: Error;\n    }\n  ) {\n    super(message);\n    if (options.cause) {\n      this.cause = options.cause;\n    }\n    this.name = this.constructor.name;\n    this.timestamp = new Date();\n    this.requestId = options.requestId ?? generateRequestId();\n    this.operation = options.operation;\n    this.retryable = options.retryable ?? false;\n    if (options.statusCode !== undefined) {\n      this.statusCode = options.statusCode;\n    }\n    if (options.auditInfo !== undefined) {\n      this.auditInfo = options.auditInfo;\n    }\n\n    // Ensure proper prototype chain\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  toJSON(): Record<string, unknown> {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      operation: this.operation,\n      retryable: this.retryable,\n      statusCode: this.statusCode,\n      timestamp: this.timestamp.toISOString(),\n      requestId: this.requestId,\n      auditInfo: this.auditInfo,\n      stack: this.stack,\n    };\n  }\n}\n\n// Audit information for compliance\nexport interface AuditInfo {\n  userId?: string;\n  role?: 'provider' | 'merchant' | 'cashier';\n  fiscalId?: string;\n  receiptId?: string;\n  pemId?: string;\n  ipAddress?: string;\n  userAgent?: string;\n}\n\n// Network-related errors (usually retryable)\nexport class NetworkError extends ACubeSDKError {\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      statusCode?: number;\n      requestId?: string;\n      retryable?: boolean;\n      cause?: Error;\n    } = {}\n  ) {\n    super(message, 'NETWORK_ERROR', {\n      operation,\n      retryable: options.retryable ?? true,\n      ...(options.statusCode !== undefined && { statusCode: options.statusCode }),\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.cause !== undefined && { cause: options.cause }),\n    });\n  }\n}\n\n// Authentication/Authorization errors (not retryable)\nexport class AuthenticationError extends ACubeSDKError {\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      statusCode?: number;\n      requestId?: string;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(message, 'AUTHENTICATION_ERROR', {\n      operation,\n      retryable: false,\n      statusCode: options.statusCode ?? 401,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n    });\n  }\n}\n\n// Authorization errors (not retryable)\nexport class AuthorizationError extends ACubeSDKError {\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      statusCode?: number;\n      requestId?: string;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(message, 'AUTHORIZATION_ERROR', {\n      operation,\n      retryable: false,\n      statusCode: options.statusCode ?? 403,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n    });\n  }\n}\n\n// Validation errors (not retryable)\nexport class ValidationError extends ACubeSDKError {\n  public readonly violations: ValidationViolation[];\n\n  constructor(\n    message: string,\n    operation: string,\n    violations: ValidationViolation[],\n    options: {\n      requestId?: string;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(message, 'VALIDATION_ERROR', {\n      operation,\n      retryable: false,\n      statusCode: 422,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n    });\n    this.violations = violations;\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      violations: this.violations,\n    };\n  }\n}\n\nexport interface ValidationViolation {\n  field: string;\n  message: string;\n  code: string;\n  value?: unknown;\n}\n\n// Fiscal/compliance specific errors (usually not retryable)\nexport class FiscalError extends ACubeSDKError {\n  public readonly fiscalCode?: string;\n  public readonly documentNumber?: string;\n\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      fiscalCode?: string;\n      documentNumber?: string;\n      statusCode?: number;\n      requestId?: string;\n      retryable?: boolean;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(message, 'FISCAL_ERROR', {\n      operation,\n      retryable: options.retryable ?? false,\n      statusCode: options.statusCode ?? 400,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n    });\n    if (options.fiscalCode !== undefined) {\n      this.fiscalCode = options.fiscalCode;\n    }\n    if (options.documentNumber !== undefined) {\n      this.documentNumber = options.documentNumber;\n    }\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      fiscalCode: this.fiscalCode,\n      documentNumber: this.documentNumber,\n    };\n  }\n}\n\n// Rate limiting errors (retryable)\nexport class RateLimitError extends ACubeSDKError {\n  public readonly retryAfter?: number;\n\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      retryAfter?: number;\n      requestId?: string;\n    } = {}\n  ) {\n    super(message, 'RATE_LIMIT_ERROR', {\n      operation,\n      retryable: true,\n      statusCode: 429,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n    });\n    if (options.retryAfter !== undefined) {\n      this.retryAfter = options.retryAfter;\n    }\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      retryAfter: this.retryAfter,\n    };\n  }\n}\n\n// Configuration errors (not retryable)\nexport class ConfigurationError extends ACubeSDKError {\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      requestId?: string;\n    } = {}\n  ) {\n    super(message, 'CONFIGURATION_ERROR', {\n      operation,\n      retryable: false,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n    });\n  }\n}\n\n// Resource not found errors (not retryable)\nexport class NotFoundError extends ACubeSDKError {\n  public readonly resourceType: string;\n  public readonly resourceId: string;\n\n  constructor(\n    resourceType: string,\n    resourceId: string,\n    operation: string,\n    options: {\n      requestId?: string;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(\n      `${resourceType} with id ${resourceId} not found`,\n      'NOT_FOUND_ERROR',\n      {\n        operation,\n        retryable: false,\n        statusCode: 404,\n        ...(options.requestId !== undefined && { requestId: options.requestId }),\n        ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n      }\n    );\n    this.resourceType = resourceType;\n    this.resourceId = resourceId;\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      resourceType: this.resourceType,\n      resourceId: this.resourceId,\n    };\n  }\n}\n\n// Circuit breaker errors (retryable)\nexport class CircuitBreakerError extends ACubeSDKError {\n  public readonly state: 'OPEN' | 'HALF_OPEN';\n\n  constructor(\n    message: string,\n    operation: string,\n    state: 'OPEN' | 'HALF_OPEN',\n    options: {\n      requestId?: string;\n    } = {}\n  ) {\n    super(message, 'CIRCUIT_BREAKER_ERROR', {\n      operation,\n      retryable: true,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n    });\n    this.state = state;\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      state: this.state,\n    };\n  }\n}\n\n// Utility functions\nfunction generateRequestId(): string {\n  return `req_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;\n}\n\n// Error factory for creating errors from HTTP responses\nexport function createErrorFromResponse(\n  response: {\n    status: number;\n    statusText: string;\n    data?: unknown;\n  },\n  operation: string,\n  requestId?: string\n): ACubeSDKError {\n  const message = getErrorMessage(response.data) || response.statusText;\n\n  switch (response.status) {\n    case 401:\n      return new AuthenticationError(message, operation, {\n        statusCode: response.status,\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 403:\n      return new AuthorizationError(message, operation, {\n        statusCode: response.status,\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 404:\n      // Try to extract resource info from error data\n      const resourceType = extractResourceType(response.data);\n      const resourceId = extractResourceId(response.data);\n      if (resourceType && resourceId) {\n        return new NotFoundError(resourceType, resourceId, operation, {\n          ...(requestId !== undefined && { requestId }),\n        });\n      }\n      // Create a concrete NotFoundError for generic 404s\n      return new NotFoundError('Resource', 'unknown', operation, {\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 422:\n      const violations = extractValidationViolations(response.data);\n      return new ValidationError(message, operation, violations, {\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 429:\n      const retryAfter = extractRetryAfter(response.data);\n      return new RateLimitError(message, operation, {\n        ...(retryAfter !== undefined && { retryAfter }),\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 500:\n    case 502:\n    case 503:\n    case 504:\n      return new NetworkError(message, operation, {\n        statusCode: response.status,\n        ...(requestId !== undefined && { requestId }),\n        retryable: true,\n      });\n    default:\n      return new NetworkError(message, operation, {\n        statusCode: response.status,\n        ...(requestId !== undefined && { requestId }),\n        retryable: response.status >= 500,\n      });\n  }\n}\n\n// Helper functions for extracting error details\nfunction getErrorMessage(data: unknown): string | null {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    return (obj.message as string) || (obj.detail as string) || null;\n  }\n  return null;\n}\n\nfunction extractResourceType(data: unknown): string | null {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    return obj.resourceType as string || null;\n  }\n  return null;\n}\n\nfunction extractResourceId(data: unknown): string | null {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    return obj.resourceId as string || null;\n  }\n  return null;\n}\n\nfunction extractValidationViolations(data: unknown): ValidationViolation[] {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    if (Array.isArray(obj.violations)) {\n      return obj.violations.map((v: any) => ({\n        field: v.propertyPath || v.field || 'unknown',\n        message: v.message || 'Validation failed',\n        code: v.code || 'VALIDATION_FAILED',\n        value: v.value,\n      }));\n    }\n    if (Array.isArray(obj.detail)) {\n      return obj.detail.map((v: any) => ({\n        field: v.loc?.join('.') || 'unknown',\n        message: v.msg || 'Validation failed',\n        code: v.type || 'VALIDATION_FAILED',\n        value: v.input,\n      }));\n    }\n  }\n  return [];\n}\n\nfunction extractRetryAfter(data: unknown): number | undefined {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    const retryAfter = obj.retryAfter || obj.retry_after;\n    return typeof retryAfter === 'number' ? retryAfter : undefined;\n  }\n  return undefined;\n}","/**\n * Base OpenAPI Resource Class\n * Enterprise-grade foundation for all API resources with full type safety\n * \n * Features:\n * - Type-safe request execution based on OpenAPI specification\n * - Automatic parameter binding (path, query, body)\n * - Schema validation and error handling\n * - Audit trail and metadata tracking\n * - Integration with existing HTTP client and middleware\n */\n\nimport type { HttpClient, RequestOptions as HttpRequestOptions } from '@/http/client';\nimport type { EndpointDefinition, HttpMethod } from '@/generated/endpoints';\nimport { EndpointUtils } from '@/generated/endpoints';\nimport { ValidationError, type ACubeSDKError } from '@/errors/index';\n\nexport interface BaseResourceConfig {\n  client: HttpClient;\n  endpoints: Record<string, EndpointDefinition>;\n}\n\nexport interface RequestOptions {\n  pathParams?: Record<string, string | number>;\n  queryParams?: Record<string, unknown>;\n  headers?: Record<string, string>;\n  metadata?: Record<string, unknown>;\n  skipRetry?: boolean;\n  skipCircuitBreaker?: boolean;\n  timeout?: number;\n}\n\nexport interface ValidationContext {\n  endpoint: EndpointDefinition;\n  operation: string;\n  data?: unknown;\n  pathParams?: Record<string, string | number>;\n  queryParams?: Record<string, unknown>;\n}\n\n/**\n * Abstract base class for all OpenAPI-based resources\n * Provides type-safe operations with comprehensive error handling and validation\n */\nexport abstract class BaseOpenAPIResource {\n  protected readonly client: HttpClient;\n  protected readonly endpoints: Record<string, EndpointDefinition>;\n\n  constructor(config: BaseResourceConfig) {\n    this.client = config.client;\n    this.endpoints = config.endpoints;\n  }\n\n  /**\n   * Execute a type-safe API request based on OpenAPI endpoint definition\n   * \n   * @template TRequest - Type of request data\n   * @template TResponse - Type of response data\n   * @param endpointKey - Key to identify the endpoint in the endpoints map\n   * @param data - Request body data (for POST/PUT/PATCH requests)\n   * @param options - Additional request options\n   * @returns Promise resolving to typed response data\n   */\n  protected async executeRequest<TRequest = unknown, TResponse = unknown>(\n    endpointKey: string,\n    data?: TRequest,\n    options: RequestOptions = {}\n  ): Promise<TResponse> {\n    const endpoint = this.endpoints[endpointKey];\n    if (!endpoint) {\n      throw new ValidationError(\n        `Unknown endpoint: ${endpointKey}`,\n        'execute_request',\n        [{ field: 'endpointKey', message: `Endpoint '${endpointKey}' not found`, code: 'UNKNOWN_ENDPOINT' }]\n      );\n    }\n\n    // Validate the request before execution\n    this.validateRequest({ endpoint, operation: endpointKey, data, ...options });\n\n    // Build the complete URL with path parameters\n    const url = this.buildRequestUrl(endpoint, options.pathParams);\n\n    // Prepare request options for HTTP client\n    const httpOptions: HttpRequestOptions = {\n      method: endpoint.method,\n      url,\n      data,\n      headers: {\n        ...this.getDefaultHeaders(endpoint),\n        ...options.headers,\n      },\n      metadata: {\n        operationId: endpoint.operationId,\n        resource: endpoint.metadata?.resource,\n        operation: endpoint.metadata?.operation,\n        ...options.metadata,\n      },\n      skipRetry: options.skipRetry ?? !EndpointUtils.isRetryable(endpoint),\n    };\n\n    // Add optional properties only if they have values\n    if (options.queryParams) {\n      httpOptions.params = options.queryParams;\n    }\n    if (options.timeout) {\n      httpOptions.timeout = options.timeout;\n    }\n    if (options.skipCircuitBreaker !== undefined) {\n      httpOptions.skipCircuitBreaker = options.skipCircuitBreaker;\n    }\n\n    try {\n      // Execute the HTTP request through the client\n      const response = await this.client.request<TResponse>(httpOptions);\n      \n      // Validate response if needed\n      this.validateResponse(endpoint, response.data);\n      \n      return response.data;\n    } catch (error) {\n      // Enhanced error handling with OpenAPI context\n      throw this.enhanceError(error as ACubeSDKError, endpoint, endpointKey, options);\n    }\n  }\n\n  /**\n   * Build complete request URL with path parameter substitution\n   */\n  private buildRequestUrl(endpoint: EndpointDefinition, pathParams: Record<string, string | number> = {}): string {\n    return EndpointUtils.buildUrl(endpoint, pathParams);\n  }\n\n  /**\n   * Get default headers based on endpoint requirements\n   */\n  private getDefaultHeaders(endpoint: EndpointDefinition): Record<string, string> {\n    const headers: Record<string, string> = {};\n\n    // Set content type for requests with body\n    if (endpoint.requestBody) {\n      headers['Content-Type'] = endpoint.requestBody.contentType;\n    }\n\n    // Set default accept header\n    const successResponse = endpoint.responses['200'] || endpoint.responses['201'];\n    if (successResponse?.contentType) {\n      headers['Accept'] = successResponse.contentType;\n    }\n\n    return headers;\n  }\n\n  /**\n   * Validate request data against OpenAPI specification\n   */\n  private validateRequest(context: ValidationContext): void {\n    const { endpoint, operation, data, pathParams, queryParams } = context;\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    // Validate required path parameters\n    if (endpoint.parameters?.path) {\n      for (const [paramName, paramType] of Object.entries(endpoint.parameters.path)) {\n        if (!pathParams || !(paramName in pathParams)) {\n          errors.push({\n            field: `path.${paramName}`,\n            message: `Required path parameter '${paramName}' is missing`,\n            code: 'MISSING_PATH_PARAM',\n          });\n        } else {\n          // Type validation for path parameters\n          const value = pathParams[paramName];\n          if (!this.validateParameterType(value, paramType)) {\n            errors.push({\n              field: `path.${paramName}`,\n              message: `Path parameter '${paramName}' must be of type ${paramType}`,\n              code: 'INVALID_PATH_PARAM_TYPE',\n            });\n          }\n        }\n      }\n    }\n\n    // Validate required request body\n    if (endpoint.requestBody?.required && !data) {\n      errors.push({\n        field: 'body',\n        message: 'Request body is required',\n        code: 'MISSING_BODY',\n      });\n    }\n\n    // Validate query parameters (basic type checking)\n    if (endpoint.parameters?.query && queryParams) {\n      for (const [paramName, paramType] of Object.entries(endpoint.parameters.query)) {\n        const value = queryParams[paramName];\n        if (value !== undefined && !this.validateParameterType(value, paramType)) {\n          errors.push({\n            field: `query.${paramName}`,\n            message: `Query parameter '${paramName}' must be of type ${paramType}`,\n            code: 'INVALID_QUERY_PARAM_TYPE',\n          });\n        }\n      }\n    }\n\n    if (errors.length > 0) {\n      throw new ValidationError(\n        `Request validation failed for operation '${operation}'`,\n        operation,\n        errors\n      );\n    }\n  }\n\n  /**\n   * Basic type validation for parameters\n   */\n  private validateParameterType(value: unknown, expectedType: string): boolean {\n    switch (expectedType) {\n      case 'string':\n        return typeof value === 'string';\n      case 'integer':\n      case 'number':\n        return typeof value === 'number' || (typeof value === 'string' && !isNaN(Number(value)));\n      case 'boolean':\n        return typeof value === 'boolean';\n      default:\n        return true; // Allow unknown types for now\n    }\n  }\n\n  /**\n   * Validate response data (can be extended for schema validation)\n   */\n  private validateResponse(endpoint: EndpointDefinition, data: unknown): void {\n    // Basic response validation - can be enhanced with JSON schema validation\n    if (data === null || data === undefined) {\n      // Check if null response is expected\n      const hasNullableResponse = Object.keys(endpoint.responses).some(code => \n        code === '204' || endpoint.responses[code]?.description?.toLowerCase().includes('no content')\n      );\n      \n      if (!hasNullableResponse) {\n        console.warn(`Received null/undefined response for ${endpoint.operationId}`);\n      }\n    }\n  }\n\n  /**\n   * Enhance errors with OpenAPI-specific context\n   */\n  private enhanceError(\n    error: ACubeSDKError,\n    endpoint: EndpointDefinition,\n    operation: string,\n    _options: RequestOptions\n  ): ACubeSDKError {\n    // Create enhanced error with additional context\n    const enhancedError = new (error.constructor as new (...args: any[]) => ACubeSDKError)(\n      error.message,\n      error.code,\n      {\n        operation: error.operation || endpoint.operationId,\n        retryable: error.retryable !== undefined ? error.retryable : EndpointUtils.isRetryable(endpoint),\n        statusCode: error.statusCode,\n        requestId: error.requestId,\n        auditInfo: {\n          ...error.auditInfo,\n          // Add OpenAPI-specific audit information\n          pemId: endpoint.metadata?.resource === 'point-of-sales' ? String(_options.pathParams?.serial_number || '') : error.auditInfo?.pemId,\n        },\n        cause: error.cause,\n      }\n    );\n\n    // Add a custom property for OpenAPI metadata (non-enumerable to avoid serialization issues)\n    Object.defineProperty(enhancedError, 'openapiMetadata', {\n      value: {\n        resource: endpoint.metadata?.resource,\n        endpointOperation: operation,\n        httpMethod: endpoint.method,\n        path: endpoint.path,\n      },\n      writable: false,\n      enumerable: false,\n      configurable: false,\n    });\n\n    return enhancedError;\n  }\n\n  /**\n   * Utility method to check if an operation is available\n   */\n  protected hasOperation(operationKey: string): boolean {\n    return operationKey in this.endpoints;\n  }\n\n  /**\n   * Get endpoint definition for an operation\n   */\n  protected getEndpoint(operationKey: string): EndpointDefinition | null {\n    return this.endpoints[operationKey] || null;\n  }\n\n  /**\n   * Get all available operations for this resource\n   */\n  protected getAvailableOperations(): string[] {\n    return Object.keys(this.endpoints);\n  }\n\n  /**\n   * Create a standardized error for missing operations\n   */\n  protected createUnsupportedOperationError(operation: string): ValidationError {\n    return new ValidationError(\n      `Operation '${operation}' is not supported by this resource`,\n      'unsupported_operation',\n      [{ \n        field: 'operation', \n        message: `Available operations: ${this.getAvailableOperations().join(', ')}`, \n        code: 'UNSUPPORTED_OPERATION' \n      }]\n    );\n  }\n\n  // Static utility methods for common patterns\n\n  /**\n   * Format validation errors for user-friendly display\n   */\n  static formatValidationErrors(errors: Array<{ field: string; message: string; code: string }>): string {\n    return errors.map(error => `${error.field}: ${error.message}`).join(', ');\n  }\n\n  /**\n   * Extract error details from API response\n   */\n  static extractErrorDetails(error: unknown): { message: string; details?: unknown } {\n    if (error instanceof ValidationError) {\n      return {\n        message: error.message,\n        details: error.violations,\n      };\n    }\n\n    if (error instanceof Error) {\n      return { message: error.message };\n    }\n\n    return { message: 'Unknown error occurred' };\n  }\n\n  /**\n   * Check if error indicates a temporary failure\n   */\n  static isTemporaryError(error: ACubeSDKError): boolean {\n    // Network errors are usually temporary\n    if (error.name === 'NetworkError') {\n      return true;\n    }\n\n    // Some HTTP status codes indicate temporary issues\n    if (error.statusCode) {\n      return [429, 500, 502, 503, 504].includes(error.statusCode);\n    }\n\n    return error.retryable ?? false;\n  }\n\n  /**\n   * Get retry delay for temporary errors\n   */\n  static getRetryDelay(_error: ACubeSDKError, attempt: number): number {\n    // Exponential backoff with jitter\n    const baseDelay = 1000; // 1 second\n    const maxDelay = 30000; // 30 seconds\n    \n    let delay = Math.min(baseDelay * Math.pow(2, attempt - 1), maxDelay);\n    \n    // Add jitter (±25%)\n    const jitter = delay * 0.25;\n    delay += (Math.random() * 2 - 1) * jitter;\n    \n    return Math.floor(delay);\n  }\n}\n\n/**\n * Type-safe endpoint builder for dynamic endpoint creation\n */\nexport class EndpointBuilder {\n  private definition: Partial<EndpointDefinition> = {};\n\n  constructor(path: string, method: HttpMethod) {\n    this.definition = {\n      path,\n      method,\n      tags: [],\n      responses: {},\n    };\n  }\n\n  operationId(id: string): this {\n    this.definition.operationId = id;\n    return this;\n  }\n\n  summary(text: string): this {\n    this.definition.summary = text;\n    return this;\n  }\n\n  description(text: string): this {\n    this.definition.description = text;\n    return this;\n  }\n\n  tag(name: string): this {\n    this.definition.tags = [...(this.definition.tags || []), name];\n    return this;\n  }\n\n  requireAuth(): this {\n    this.definition.security = [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }];\n    return this;\n  }\n\n  pathParam(name: string, type: string): this {\n    if (!this.definition.parameters) {\n      this.definition.parameters = {};\n    }\n    if (!this.definition.parameters.path) {\n      this.definition.parameters.path = {};\n    }\n    this.definition.parameters.path[name] = type;\n    return this;\n  }\n\n  queryParam(name: string, type: string): this {\n    if (!this.definition.parameters) {\n      this.definition.parameters = {};\n    }\n    if (!this.definition.parameters.query) {\n      this.definition.parameters.query = {};\n    }\n    this.definition.parameters.query[name] = type;\n    return this;\n  }\n\n  requestBody(schema: string, required = true): this {\n    this.definition.requestBody = {\n      required,\n      contentType: 'application/json',\n      schema,\n    };\n    return this;\n  }\n\n  response(statusCode: string, description: string, schema?: string): this {\n    if (!this.definition.responses) {\n      this.definition.responses = {};\n    }\n    this.definition.responses[statusCode] = {\n      description,\n      ...(schema && { contentType: 'application/json', schema }),\n    };\n    return this;\n  }\n\n  metadata(resource: string, operation: string, authRequired = true, retryable = true): this {\n    this.definition.metadata = {\n      resource,\n      operation,\n      authRequired,\n      retryable,\n    };\n    return this;\n  }\n\n  build(): EndpointDefinition {\n    if (!this.definition.operationId) {\n      throw new Error('operationId is required');\n    }\n\n    return this.definition as EndpointDefinition;\n  }\n}","/**\n * Point of Sales Resource - OpenAPI Implementation\n * Type-safe implementation for PEM device management\n * \n * Features:\n * - Complete PEM device lifecycle management\n * - Activation and certificate management\n * - Status monitoring and control\n * - Journal closing operations\n * - Inactivity period management\n */\n\nimport { BaseOpenAPIResource } from '@/resources/base-openapi';\nimport { PointOfSalesEndpoints } from '@/generated/endpoints';\nimport type { HttpClient } from '@/http/client';\nimport type { SerialNumber } from '@/types/branded';\nimport type { components } from '@/types/generated';\nimport { ValidationError } from '@/errors/index';\n\n// Extract types from OpenAPI generated types\ntype PointOfSaleOutput = components['schemas']['E-Receipt_IT_API_PointOfSaleOutput'];\ntype PointOfSalePage = components['schemas']['E-Receipt_IT_API_Page__T_Customized_PointOfSaleOutput_'];\ntype ActivationRequest = components['schemas']['E-Receipt_IT_API_ActivationRequest'];\ntype InactivityRequest = components['schemas']['E-Receipt_IT_API_PEMStatusOfflineRequest'];\n// These endpoints return empty objects/have no request body per OpenAPI spec\ntype ActivationOutput = Record<string, never>; // Activation endpoint returns empty object\ntype CloseJournalRequest = void; // Close journal has no request body\ntype CloseJournalOutput = Record<string, never>; // Close journal returns empty object\n\nexport interface PointOfSaleValidationOptions {\n  validateSerialNumber?: boolean;\n  checkActivationStatus?: boolean;\n  enforceStatusTransitions?: boolean;\n}\n\nexport interface DeviceStatus {\n  serialNumber: SerialNumber;\n  status: PEMStatus;\n  lastSeen: string;\n  certificateExpiry?: string | undefined;\n  firmwareVersion?: string | undefined;\n  batteryLevel?: number | undefined;\n  connectivity: ConnectivityStatus;\n}\n\nexport interface JournalSummary {\n  date: string;\n  transactionCount: number;\n  totalAmount: string;\n  vatAmount: string;\n  firstTransaction?: string;\n  lastTransaction?: string;\n  status: 'open' | 'closed' | 'pending';\n}\n\n// Use actual OpenAPI types where available\nexport type PEMStatus = components['schemas']['E-Receipt_IT_API_PEMStatus'];\nexport type ConnectivityStatus = 'online' | 'offline' | 'intermittent' | 'unknown';\nexport type ActivationStatus = 'pending' | 'in_progress' | 'completed' | 'failed' | 'expired';\n\n/**\n * Point of Sales Resource Class - OpenAPI Based\n * Manages PEM devices with full Italian fiscal compliance\n */\nexport class PointOfSalesResource extends BaseOpenAPIResource {\n  constructor(client: HttpClient) {\n    super({\n      client,\n      endpoints: {\n        list: PointOfSalesEndpoints.LIST,\n        getBySerial: PointOfSalesEndpoints.GET_BY_SERIAL,\n        closeJournal: PointOfSalesEndpoints.CLOSE_JOURNAL,\n        activation: PointOfSalesEndpoints.ACTIVATION,\n        createInactivity: PointOfSalesEndpoints.CREATE_INACTIVITY,\n        setOffline: PointOfSalesEndpoints.SET_OFFLINE,\n      }\n    });\n  }\n\n  /**\n   * Get a list of Point of Sales devices\n   * \n   * @returns Promise resolving to paginated PEM list\n   */\n  async list(): Promise<PointOfSalePage> {\n    return this.executeRequest<void, PointOfSalePage>('list', undefined, {\n      metadata: {\n        operation: 'list_point_of_sales',\n      }\n    });\n  }\n\n  /**\n   * Get a specific Point of Sale by serial number\n   * \n   * @param serialNumber - Device serial number\n   * @returns Promise resolving to PEM details\n   */\n  async retrieve(serialNumber: SerialNumber | string): Promise<PointOfSaleOutput> {\n    return this.executeRequest<void, PointOfSaleOutput>('getBySerial', undefined, {\n      pathParams: { serial_number: serialNumber },\n      metadata: {\n        operation: 'get_point_of_sale',\n        serialNumber,\n      }\n    });\n  }\n\n  /**\n   * Close the daily journal for a Point of Sale\n   * \n   * @returns Promise resolving to close confirmation\n   */\n  async closeJournal(): Promise<CloseJournalOutput> {\n    return this.executeRequest<void, CloseJournalOutput>('closeJournal', undefined, {\n      metadata: {\n        operation: 'close_journal',\n      }\n    });\n  }\n\n  /**\n   * Trigger activation process for a Point of Sale\n   * \n   * @param serialNumber - Device serial number\n   * @param activationData - Activation request data\n   * @param options - Validation options\n   * @returns Promise resolving to activation status\n   */\n  async activate(\n    serialNumber: SerialNumber | string,\n    activationData: ActivationRequest,\n    options: PointOfSaleValidationOptions = {}\n  ): Promise<ActivationOutput> {\n    // Validate activation request\n    await this.validateActivationRequest(serialNumber, activationData, options);\n\n    return this.executeRequest<ActivationRequest, ActivationOutput>('activation', activationData, {\n      pathParams: { serial_number: serialNumber },\n      metadata: {\n        operation: 'activate_point_of_sale',\n        serialNumber,\n        registrationKey: activationData.registration_key,\n      }\n    });\n  }\n\n  /**\n   * Create an inactivity period for a Point of Sale\n   * \n   * @param serialNumber - Device serial number\n   * @param inactivityData - Inactivity period request data\n   * @returns Promise resolving when inactivity period is created\n   */\n  async createInactivityPeriod(\n    serialNumber: SerialNumber | string,\n    inactivityData: InactivityRequest\n  ): Promise<void> {\n    return this.executeRequest<InactivityRequest, void>('createInactivity', inactivityData, {\n      pathParams: { serial_number: serialNumber },\n      metadata: {\n        operation: 'create_inactivity_period',\n        serialNumber,\n      }\n    });\n  }\n\n  /**\n   * Set Point of Sale status to offline\n   * \n   * @param serialNumber - Device serial number\n   * @returns Promise resolving when status is updated\n   */\n  async setOffline(serialNumber: SerialNumber | string): Promise<void> {\n    return this.executeRequest<void, void>('setOffline', undefined, {\n      pathParams: { serial_number: serialNumber },\n      metadata: {\n        operation: 'set_point_of_sale_offline',\n        serialNumber,\n      }\n    });\n  }\n\n  /**\n   * Get device status summary\n   * \n   * @param serialNumber - Device serial number\n   * @returns Promise resolving to device status\n   */\n  async getDeviceStatus(serialNumber: SerialNumber | string): Promise<DeviceStatus> {\n    const device = await this.retrieve(serialNumber);\n    return PointOfSalesResource.analyzeDeviceStatus(device);\n  }\n\n  /**\n   * Get journal summary for a specific date\n   * \n   * @param serialNumber - Device serial number\n   * @param date - Date in YYYY-MM-DD format\n   * @returns Promise resolving to journal summary\n   */\n  async getJournalSummary(\n    _serialNumber: SerialNumber | string, \n    date: string = new Date().toISOString().split('T')[0]!\n  ): Promise<JournalSummary> {\n    // This would typically require additional API endpoints\n    // For now, return a mock summary\n    return {\n      date,\n      transactionCount: 0,\n      totalAmount: '0.00',\n      vatAmount: '0.00',\n      status: 'open',\n    };\n  }\n\n  // Validation methods\n\n  /**\n   * Validate activation request\n   */\n  private async validateActivationRequest(\n    serialNumber: SerialNumber | string,\n    activationData: ActivationRequest,\n    options: PointOfSaleValidationOptions = {}\n  ): Promise<void> {\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    // Serial number validation\n    if (options.validateSerialNumber) {\n      const serialValidation = PointOfSalesResource.validateSerialNumber(serialNumber);\n      if (!serialValidation.isValid) {\n        errors.push({\n          field: 'serial_number',\n          message: serialValidation.error || 'Invalid serial number format',\n          code: 'INVALID_SERIAL_NUMBER'\n        });\n      }\n    }\n\n    // Registration key validation\n    if (!activationData.registration_key || activationData.registration_key.length === 0) {\n      errors.push({\n        field: 'registration_key',\n        message: 'Registration key is required',\n        code: 'REQUIRED'\n      });\n    } else {\n      const keyValidation = this.validateRegistrationKey(activationData.registration_key);\n      if (!keyValidation.isValid) {\n        errors.push({\n          field: 'registration_key',\n          message: keyValidation.error || 'Invalid registration key format',\n          code: 'INVALID_REGISTRATION_KEY'\n        });\n      }\n    }\n\n    // Check activation status if required\n    if (options.checkActivationStatus) {\n      try {\n        const device = await this.retrieve(serialNumber);\n        if (device.status === 'ACTIVE') {\n          errors.push({\n            field: 'status',\n            message: 'Device is already activated',\n            code: 'ALREADY_ACTIVATED'\n          });\n        }\n      } catch (error) {\n        // Device not found is acceptable for new activations\n        if (error instanceof Error && !error.message.includes('404')) {\n          errors.push({\n            field: 'device',\n            message: 'Unable to verify device status',\n            code: 'STATUS_CHECK_FAILED'\n          });\n        }\n      }\n    }\n\n    if (errors.length > 0) {\n      throw new ValidationError('Invalid activation request', 'activate_point_of_sale', errors);\n    }\n  }\n\n  /**\n   * Validate registration key format\n   */\n  private validateRegistrationKey(key: string): { isValid: boolean; error?: string } {\n    // Basic format validation (this would depend on the actual key format)\n    if (key.length < 16) {\n      return { isValid: false, error: 'Registration key must be at least 16 characters' };\n    }\n\n    if (!/^[A-Z0-9-]+$/.test(key)) {\n      return { isValid: false, error: 'Registration key contains invalid characters' };\n    }\n\n    return { isValid: true };\n  }\n\n  // Static utility methods\n\n  /**\n   * Validate serial number format\n   */\n  static validateSerialNumber(serialNumber: SerialNumber | string): { isValid: boolean; error?: string } {\n    const serialStr = String(serialNumber);\n\n    // Basic serial number validation\n    if (serialStr.length < 8 || serialStr.length > 20) {\n      return { isValid: false, error: 'Serial number must be between 8 and 20 characters' };\n    }\n\n    if (!/^[A-Z0-9]+$/.test(serialStr)) {\n      return { isValid: false, error: 'Serial number must contain only uppercase letters and numbers' };\n    }\n\n    return { isValid: true };\n  }\n\n  /**\n   * Analyze device status from device data\n   */\n  static analyzeDeviceStatus(device: PointOfSaleOutput): DeviceStatus {\n    return {\n      serialNumber: device.serial_number as SerialNumber,\n      status: device.status as PEMStatus,\n      lastSeen: new Date().toISOString(), // last_seen field not available in OpenAPI schema\n      certificateExpiry: undefined, // certificate_expiry field not available in OpenAPI schema\n      firmwareVersion: undefined, // firmware_version field not available in OpenAPI schema\n      batteryLevel: undefined, // battery_level field not available in OpenAPI schema\n      connectivity: this.determineConnectivityStatus(device),\n    };\n  }\n\n  /**\n   * Determine connectivity status from device data\n   */\n  private static determineConnectivityStatus(_device: PointOfSaleOutput): ConnectivityStatus {\n    // last_seen field not available in OpenAPI schema, using mock connectivity\n    const lastSeenTime = new Date().getTime();\n    const now = Date.now();\n    const minutesSinceLastSeen = (now - lastSeenTime) / (1000 * 60);\n\n    if (minutesSinceLastSeen <= 5) return 'online';\n    if (minutesSinceLastSeen <= 30) return 'intermittent';\n    return 'offline';\n  }\n\n  /**\n   * Format device for display\n   */\n  static formatDeviceForDisplay(device: PointOfSaleOutput): {\n    displayName: string;\n    statusBadge: string;\n    location: string;\n    lastActivity: string;\n    certificateStatus: string;\n  } {\n    const status = device.status || 'unknown';\n    // last_seen field not available in OpenAPI schema, using current time\n    const lastSeen = new Date();\n\n    return {\n      displayName: `PEM ${device.serial_number}`,\n      statusBadge: status.toUpperCase(),\n      location: device.address?.city || 'Unknown Location',\n      lastActivity: lastSeen.toLocaleString(),\n      certificateStatus: 'Not Available', // certificate_expiry field not available in OpenAPI schema\n    };\n  }\n\n  /**\n   * Calculate device uptime\n   */\n  static calculateUptime(_device: PointOfSaleOutput): {\n    uptimeHours: number;\n    uptimePercentage: number;\n    availabilityStatus: 'excellent' | 'good' | 'poor' | 'critical';\n  } {\n    // This would typically use historical data\n    // For now, return mock calculations based on last seen\n    // last_seen field not available in OpenAPI schema, using current time\n    const lastSeenTime = Date.now();\n    const now = Date.now();\n    const hoursSinceLastSeen = (now - lastSeenTime) / (1000 * 60 * 60);\n\n    // Mock uptime calculation\n    const uptimeHours = Math.max(0, 24 - hoursSinceLastSeen);\n    const uptimePercentage = Math.round((uptimeHours / 24) * 100);\n\n    let availabilityStatus: 'excellent' | 'good' | 'poor' | 'critical' = 'excellent';\n    if (uptimePercentage < 95) availabilityStatus = 'good';\n    if (uptimePercentage < 85) availabilityStatus = 'poor';\n    if (uptimePercentage < 70) availabilityStatus = 'critical';\n\n    return {\n      uptimeHours: Math.round(uptimeHours * 100) / 100,\n      uptimePercentage,\n      availabilityStatus,\n    };\n  }\n\n  /**\n   * Generate device health report\n   */\n  static generateHealthReport(devices: PointOfSaleOutput[]): {\n    totalDevices: number;\n    activeDevices: number;\n    offlineDevices: number;\n    devicesRequiringAttention: number;\n    avgUptimePercentage: number;\n    certificateExpiringCount: number;\n    statusBreakdown: Record<PEMStatus, number>;\n  } {\n    const report = {\n      totalDevices: devices.length,\n      activeDevices: 0,\n      offlineDevices: 0,\n      devicesRequiringAttention: 0,\n      avgUptimePercentage: 0,\n      certificateExpiringCount: 0,\n      statusBreakdown: {} as Record<PEMStatus, number>,\n    };\n\n    let totalUptime = 0;\n    // const now = new Date();\n    // Note: certificate_expiry field not available in OpenAPI schema\n\n    for (const device of devices) {\n      const status = device.status as PEMStatus;\n      \n      // Update status breakdown\n      report.statusBreakdown[status] = (report.statusBreakdown[status] || 0) + 1;\n\n      // Count active/offline devices\n      if (status === 'ACTIVE') {\n        report.activeDevices++;\n      } else if (status === 'OFFLINE') {\n        report.offlineDevices++;\n      }\n\n      // Check for devices requiring attention\n      if (['DISCARDED'].includes(status)) {\n        report.devicesRequiringAttention++;\n      }\n\n      // Note: certificate_expiry field not available in OpenAPI schema\n      // Using mock certificate validation\n\n      // Calculate uptime\n      const uptime = this.calculateUptime(device);\n      totalUptime += uptime.uptimePercentage;\n    }\n\n    report.avgUptimePercentage = devices.length > 0 ? \n      Math.round(totalUptime / devices.length) : 0;\n\n    return report;\n  }\n\n  /**\n   * Validate journal closing eligibility\n   */\n  static validateJournalClosingEligibility(device: PointOfSaleOutput, _date: string): {\n    canClose: boolean;\n    reasons: string[];\n    requirements: string[];\n  } {\n    const reasons: string[] = [];\n    const requirements: string[] = [];\n\n    // Check device status\n    if (device.status !== 'ACTIVE') {\n      reasons.push('Device must be in active status');\n    }\n\n    // Note: last_journal_close and pending_transactions fields not available in OpenAPI schema\n    // Using mock validation logic\n\n    // Requirements for closing\n    requirements.push('All transactions must be transmitted to tax authority');\n    requirements.push('Device must be connected to network');\n    requirements.push('No active receipt printing operations');\n\n    return {\n      canClose: reasons.length === 0,\n      reasons,\n      requirements,\n    };\n  }\n\n  /**\n   * Get recommended maintenance schedule\n   */\n  static getMaintenanceSchedule(_device: PointOfSaleOutput): {\n    nextMaintenance: string;\n    maintenanceType: 'routine' | 'certificate' | 'firmware' | 'urgent';\n    priority: 'low' | 'medium' | 'high' | 'critical';\n    description: string;\n    estimatedDuration: string;\n  } {\n    const now = new Date();\n    \n    // Note: certificate_expiry and firmware_version fields not available in OpenAPI schema\n    // Using default maintenance schedule\n\n    // Default routine maintenance\n    return {\n      nextMaintenance: new Date(now.getTime() + 90 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]!,\n      maintenanceType: 'routine',\n      priority: 'low',\n      description: 'Routine maintenance and inspection',\n      estimatedDuration: '30-60 minutes',\n    };\n  }\n\n  /**\n   * Check if firmware version is outdated\n   * @deprecated This method is not used since firmware_version is not available in OpenAPI schema\n   */\n  // private static isOutdatedFirmware(version: string): boolean {\n  //   // Simple version comparison (in reality, this would be more sophisticated)\n  //   const currentVersion = '2.1.0'; // Mock current version\n  //   return version < currentVersion;\n  // }\n\n  /**\n   * Generate activation code for new devices\n   */\n  static generateActivationCode(): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    \n    // Generate in format: XXXX-XXXX-XXXX-XXXX\n    for (let group = 0; group < 4; group++) {\n      if (group > 0) result += '-';\n      for (let i = 0; i < 4; i++) {\n        result += chars.charAt(Math.floor(Math.random() * chars.length));\n      }\n    }\n    \n    return result;\n  }\n}\n\n// Re-export for convenience\nexport { PointOfSalesResource as PointOfSales };\n\n// Export types for external use\nexport type {\n  PointOfSaleOutput,\n  PointOfSalePage,\n  ActivationRequest,\n  ActivationOutput,\n  CloseJournalRequest,\n  CloseJournalOutput,\n  InactivityRequest,\n};"]}