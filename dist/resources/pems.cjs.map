{"version":3,"sources":["../../src/generated/endpoints.ts","../../src/errors/index.ts","../../src/resources/base-openapi.ts","../../src/resources/pems.ts"],"names":["CashierEndpoints","PointOfSalesEndpoints","ReceiptEndpoints","CashRegisterEndpoints","MerchantEndpoints","PEMEndpoints","EndpointUtils","resource","operationId","allClasses","endpointClass","endpoint","pathParams","url","key","value","statusCode","ACubeSDKError","message","code","options","generateRequestId","ValidationError","operation","violations","FiscalError","BaseOpenAPIResource","config","endpointKey","data","httpOptions","response","error","headers","successResponse","context","queryParams","errors","paramName","paramType","expectedType","_options","enhancedError","operationKey","_error","attempt","delay","jitter","PEMsResource","_PEMsResource","client","posId","certificates","_posId","_certificateType","addressErrors","address","root","cert","intermediate","leaf","validationResults","issues","now","expiredCerts","revokedCerts","hasRoot","hasLeaf","deviceCert","thirtyDaysFromNow","earliestExpiry","a","b","recommendations","score","expiringSoon","expiryDate","lastAuditDate","sixMonthsAgo","level","daysUntilExpiry","summary","issuerCert","isValid","urgency"],"mappings":"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","file":"pems.cjs","sourcesContent":["/**\n * Generated Endpoint Definitions from OpenAPI Specification\n * Comprehensive endpoint configurations for all API resources\n * \n * This file is auto-generated based on openapi.yaml\n * Do not edit manually - use regeneration scripts instead\n */\n\nexport type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n\nexport interface EndpointDefinition {\n  path: string;\n  method: HttpMethod;\n  operationId: string;\n  summary?: string;\n  description?: string;\n  tags: string[];\n  security?: Array<Record<string, string[]>>;\n  parameters?: {\n    path?: Record<string, string>;\n    query?: Record<string, string>;\n    header?: Record<string, string>;\n  };\n  requestBody?: {\n    required: boolean;\n    contentType: string;\n    schema: string;\n  };\n  responses: {\n    [statusCode: string]: {\n      description: string;\n      contentType?: string;\n      schema?: string;\n    };\n  };\n  metadata?: {\n    resource: string;\n    operation: string;\n    authRequired: boolean;\n    retryable: boolean;\n  };\n}\n\n/**\n * Cashier Endpoints - User account management for cashiers\n */\nexport class CashierEndpoints {\n  static readonly LIST: EndpointDefinition = {\n    path: '/mf1/cashiers',\n    method: 'GET',\n    operationId: 'read_cashiers_mf1_cashiers_get',\n    summary: 'Read Cashiers',\n    description: 'Get a paginated list of cashiers',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      query: {\n        page: 'integer',\n        size: 'integer'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_Page__T_Customized_CashierOutput_'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly CREATE: EndpointDefinition = {\n    path: '/mf1/cashiers',\n    method: 'POST',\n    operationId: 'create_cashier_mf1_cashiers_post',\n    summary: 'Create Cashier',\n    description: 'Create a new cashier account',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_CashierCreateInput'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashierOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'create',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly ME: EndpointDefinition = {\n    path: '/mf1/cashiers/me',\n    method: 'GET',\n    operationId: 'read_cashier_me_mf1_cashiers_me_get',\n    summary: 'Read Cashier Me',\n    description: 'Read currently authenticated cashier\\'s information',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashierOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'me',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly GET_BY_ID: EndpointDefinition = {\n    path: '/mf1/cashiers/{cashier_id}',\n    method: 'GET',\n    operationId: 'read_cashier_by_id_mf1_cashiers__cashier_id__get',\n    summary: 'Read Cashier By Id',\n    description: 'Get a specific user by id',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        cashier_id: 'integer'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashierOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly DELETE: EndpointDefinition = {\n    path: '/mf1/cashiers/{cashier_id}',\n    method: 'DELETE',\n    operationId: 'delete_cashier_mf1_cashiers__cashier_id__delete',\n    summary: 'Delete Cashier',\n    description: 'Delete a cashier',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        cashier_id: 'integer'\n      }\n    },\n    responses: {\n      '204': {\n        description: 'Successful Response'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'delete',\n      authRequired: true,\n      retryable: false\n    }\n  };\n}\n\n/**\n * Point of Sales Endpoints - PEM device management\n */\nexport class PointOfSalesEndpoints {\n  static readonly LIST: EndpointDefinition = {\n    path: '/mf1/point-of-sales',\n    method: 'GET',\n    operationId: 'read_point_of_sales_mf1_point_of_sales_get',\n    summary: 'Read Point Of Sales',\n    description: 'Retrieve PEMs',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_Page__T_Customized_PointOfSaleOutput_'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly GET_BY_SERIAL: EndpointDefinition = {\n    path: '/mf1/point-of-sales/{serial_number}',\n    method: 'GET',\n    operationId: 'read_point_of_sale_mf1_point_of_sales__serial_number__get',\n    summary: 'Read Point Of Sale',\n    description: 'Get a specific Point of Sale by serial number',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        serial_number: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_PointOfSaleOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly CLOSE_JOURNAL: EndpointDefinition = {\n    path: '/mf1/point-of-sales/close',\n    method: 'POST',\n    operationId: 'close_journal_mf1_point_of_sales_close_post',\n    summary: 'Close Journal',\n    description: 'Close the daily journal for Point of Sales',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_CloseJournalRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CloseJournalOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'close_journal',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly ACTIVATION: EndpointDefinition = {\n    path: '/mf1/point-of-sales/{serial_number}/activation',\n    method: 'POST',\n    operationId: 'post_activation_mf1_point_of_sales__serial_number__activation_post',\n    summary: 'Post Activation',\n    description: 'Trigger the activation process of a Point of Sale by requesting a certificate to the Italian Tax Agency',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        serial_number: 'string'\n      }\n    },\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_ActivationRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ActivationOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'activation',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly CREATE_INACTIVITY: EndpointDefinition = {\n    path: '/mf1/point-of-sales/{serial_number}/inactivity',\n    method: 'POST',\n    operationId: 'create_inactivity_period_mf1_point_of_sales__serial_number__inactivity_post',\n    summary: 'Create Inactivity Period',\n    description: 'Create a new inactivity period',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        serial_number: 'string'\n      }\n    },\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_InactivityRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'create_inactivity',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly SET_OFFLINE: EndpointDefinition = {\n    path: '/mf1/point-of-sales/{serial_number}/status/offline',\n    method: 'POST',\n    operationId: 'post_offline_mf1_point_of_sales__serial_number__status_offline_post',\n    summary: 'Post Offline',\n    description: 'Change the state of the Point of Sale to \\'offline\\'',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        serial_number: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'set_offline',\n      authRequired: true,\n      retryable: false\n    }\n  };\n}\n\n/**\n * Receipt Endpoints - Electronic receipt management\n */\nexport class ReceiptEndpoints {\n  static readonly LIST: EndpointDefinition = {\n    path: '/mf1/receipts',\n    method: 'GET',\n    operationId: 'get_receipts_mf1_receipts_get',\n    summary: 'Get Receipts',\n    description: 'Get a list of electronic receipts',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      query: {\n        page: 'integer',\n        size: 'integer',\n        start_date: 'string',\n        end_date: 'string',\n        serial_number: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_Page__T_Customized_ReceiptOutput_'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly CREATE: EndpointDefinition = {\n    path: '/mf1/receipts',\n    method: 'POST',\n    operationId: 'create_receipt_mf1_receipts_post',\n    summary: 'Create Receipt',\n    description: 'Create a new electronic receipt',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_ReceiptInput'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'create',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly VOID: EndpointDefinition = {\n    path: '/mf1/receipts',\n    method: 'DELETE',\n    operationId: 'void_receipt_mf1_receipts_delete',\n    summary: 'Void Receipt',\n    description: 'Void an electronic receipt',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_VoidReceiptRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_VoidReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'void',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly GET_BY_UUID: EndpointDefinition = {\n    path: '/mf1/receipts/{receipt_uuid}',\n    method: 'GET',\n    operationId: 'get_receipt_mf1_receipts__receipt_uuid__get',\n    summary: 'Get Receipt',\n    description: 'Get an electronic receipt',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        receipt_uuid: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly VOID_WITH_PROOF: EndpointDefinition = {\n    path: '/mf1/receipts/void-with-proof',\n    method: 'DELETE',\n    operationId: 'void_receipt_via_proof_mf1_receipts_void_with_proof_delete',\n    summary: 'Void Receipt Via Proof',\n    description: 'Void an electronic receipt identified by a proof of purchase',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_VoidReceiptWithProofRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_VoidReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'void_with_proof',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly GET_DETAILS: EndpointDefinition = {\n    path: '/mf1/receipts/{receipt_uuid}/details',\n    method: 'GET',\n    operationId: 'get_receipt_details_mf1_receipts__receipt_uuid__details_get',\n    summary: 'Get Receipt Details',\n    description: 'Get the details or the PDF of an electronic receipt',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        receipt_uuid: 'string'\n      },\n      header: {\n        Accept: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'get_details',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly RETURN_ITEMS: EndpointDefinition = {\n    path: '/mf1/receipts/return',\n    method: 'POST',\n    operationId: 'return_receipt_items_mf1_receipts_return_post',\n    summary: 'Return Receipt Items',\n    description: 'Return items from an electronic receipt (same PEM or other PEM)',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_ReturnRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'return_items',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly RETURN_ITEMS_WITH_PROOF: EndpointDefinition = {\n    path: '/mf1/receipts/return-with-proof',\n    method: 'POST',\n    operationId: 'return_receipt_items_via_proof_mf1_receipts_return_with_proof_post',\n    summary: 'Return Receipt Items Via Proof',\n    description: 'Return items from an electronic receipt identified by a proof of purchase',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_ReturnWithProofRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'return_items_with_proof',\n      authRequired: true,\n      retryable: false\n    }\n  };\n}\n\n/**\n * Cash Register Endpoints - Cash register management\n */\nexport class CashRegisterEndpoints {\n  static readonly CREATE: EndpointDefinition = {\n    path: '/mf1/cash-register',\n    method: 'POST',\n    operationId: 'create_cash_register_mf1_cash_register_post',\n    summary: 'Create Cash Register',\n    description: 'Create a new cash register',\n    tags: ['Cash Register'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_CashRegisterInput'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashRegisterOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cash-registers',\n      operation: 'create',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly LIST: EndpointDefinition = {\n    path: '/mf1/cash-register',\n    method: 'GET',\n    operationId: 'get_cash_registers_mf1_cash_register_get',\n    summary: 'Get Cash Registers',\n    description: 'Get a list of cash registers',\n    tags: ['Cash Register'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_Page__T_Customized_CashRegisterOutput_'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'cash-registers',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly GET_BY_ID: EndpointDefinition = {\n    path: '/mf1/cash-register/{id}',\n    method: 'GET',\n    operationId: 'get_cash_register_mf1_cash_register__id__get',\n    summary: 'Get Cash Register',\n    description: 'Get a specific cash register by ID',\n    tags: ['Cash Register'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        id: 'integer'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashRegisterOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'cash-registers',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n}\n\n/**\n * Merchant Endpoints - Business entity management\n */\nexport class MerchantEndpoints {\n  static readonly LIST: EndpointDefinition = {\n    path: '/merchants',\n    method: 'GET',\n    operationId: 'api_merchants_get_collection',\n    summary: 'Get Merchants',\n    description: 'Get a list of merchants',\n    tags: ['Merchant'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'merchants',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly CREATE: EndpointDefinition = {\n    path: '/merchants',\n    method: 'POST',\n    operationId: 'api_merchants_post',\n    summary: 'Create Merchant',\n    description: 'Create a new merchant',\n    tags: ['Merchant'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'Merchant-create'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'Merchant-read'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'merchants',\n      operation: 'create',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly GET_BY_UUID: EndpointDefinition = {\n    path: '/merchants/{uuid}',\n    method: 'GET',\n    operationId: 'api_merchants_uuid_get',\n    summary: 'Get Merchant',\n    description: 'Get a specific merchant by UUID',\n    tags: ['Merchant'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        uuid: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'Merchant-read'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'merchants',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly UPDATE: EndpointDefinition = {\n    path: '/merchants/{uuid}',\n    method: 'PUT',\n    operationId: 'api_merchants_uuid_put',\n    summary: 'Update Merchant',\n    description: 'Update a merchant',\n    tags: ['Merchant'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        uuid: 'string'\n      }\n    },\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'Merchant-update'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'Merchant-read'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'merchants',\n      operation: 'update',\n      authRequired: true,\n      retryable: false\n    }\n  };\n}\n\n/**\n * PEM Endpoints - Point of Sale Module certificate management\n */\nexport class PEMEndpoints {\n  static readonly CREATE_POS: EndpointDefinition = {\n    path: '/point-of-sales',\n    method: 'POST',\n    operationId: 'api_point-of-sales_post',\n    summary: 'Create Point of Sale',\n    description: 'Create a new Point of Sale',\n    tags: ['Pem'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'PointOfSale-create'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'PointOfSale-read'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'pems',\n      operation: 'create_pos',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly GET_CERTIFICATES: EndpointDefinition = {\n    path: '/point-of-sales/{id}/certificates',\n    method: 'GET',\n    operationId: 'api_point-of-sales_idcertificates_get',\n    summary: 'Get PEM Certificates',\n    description: 'Get certificates for a Point of Sale',\n    tags: ['Pem'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        id: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'pems',\n      operation: 'get_certificates',\n      authRequired: true,\n      retryable: true\n    }\n  };\n}\n\n/**\n * Utility class for endpoint operations\n */\nexport class EndpointUtils {\n  /**\n   * Get all endpoints for a specific resource\n   */\n  static getResourceEndpoints(resource: string): EndpointDefinition[] {\n    switch (resource.toLowerCase()) {\n      case 'cashiers':\n        return Object.values(CashierEndpoints);\n      case 'point-of-sales':\n        return Object.values(PointOfSalesEndpoints);\n      case 'receipts':\n        return Object.values(ReceiptEndpoints);\n      case 'cash-registers':\n        return Object.values(CashRegisterEndpoints);\n      case 'merchants':\n        return Object.values(MerchantEndpoints);\n      case 'pems':\n        return Object.values(PEMEndpoints);\n      default:\n        return [];\n    }\n  }\n\n  /**\n   * Find endpoint by operation ID\n   */\n  static findEndpointByOperationId(operationId: string): EndpointDefinition | null {\n    const allClasses = [\n      CashierEndpoints,\n      PointOfSalesEndpoints,\n      ReceiptEndpoints,\n      CashRegisterEndpoints,\n      MerchantEndpoints,\n      PEMEndpoints,\n    ];\n\n    for (const endpointClass of allClasses) {\n      for (const endpoint of Object.values(endpointClass)) {\n        if (endpoint.operationId === operationId) {\n          return endpoint;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Build URL with path parameters\n   */\n  static buildUrl(endpoint: EndpointDefinition, pathParams: Record<string, string | number> = {}): string {\n    let url = endpoint.path;\n    \n    for (const [key, value] of Object.entries(pathParams)) {\n      url = url.replace(`{${key}}`, String(value));\n    }\n    \n    return url;\n  }\n\n  /**\n   * Check if endpoint requires authentication\n   */\n  static requiresAuth(endpoint: EndpointDefinition): boolean {\n    return endpoint.metadata?.authRequired ?? false;\n  }\n\n  /**\n   * Check if endpoint operation is retryable\n   */\n  static isRetryable(endpoint: EndpointDefinition): boolean {\n    return endpoint.metadata?.retryable ?? false;\n  }\n\n  /**\n   * Get expected content type for request body\n   */\n  static getRequestContentType(endpoint: EndpointDefinition): string | null {\n    return endpoint.requestBody?.contentType ?? null;\n  }\n\n  /**\n   * Get expected response content type\n   */\n  static getResponseContentType(endpoint: EndpointDefinition, statusCode: string): string | null {\n    return endpoint.responses[statusCode]?.contentType ?? null;\n  }\n}","/**\n * Enterprise-grade error handling system\n * Hierarchical error types with retry logic and audit information\n */\n\n// Base error class with audit information\nexport abstract class ACubeSDKError extends Error {\n  public readonly timestamp: Date;\n  public readonly requestId: string;\n  public readonly operation: string;\n  public readonly retryable: boolean;\n  public readonly statusCode?: number;\n  public readonly auditInfo?: AuditInfo;\n  public readonly cause?: Error;\n\n  constructor(\n    message: string,\n    public readonly code: string,\n    options: {\n      operation: string;\n      retryable?: boolean;\n      statusCode?: number;\n      requestId?: string;\n      auditInfo?: AuditInfo;\n      cause?: Error;\n    }\n  ) {\n    super(message);\n    if (options.cause) {\n      this.cause = options.cause;\n    }\n    this.name = this.constructor.name;\n    this.timestamp = new Date();\n    this.requestId = options.requestId ?? generateRequestId();\n    this.operation = options.operation;\n    this.retryable = options.retryable ?? false;\n    if (options.statusCode !== undefined) {\n      this.statusCode = options.statusCode;\n    }\n    if (options.auditInfo !== undefined) {\n      this.auditInfo = options.auditInfo;\n    }\n\n    // Ensure proper prototype chain\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  toJSON(): Record<string, unknown> {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      operation: this.operation,\n      retryable: this.retryable,\n      statusCode: this.statusCode,\n      timestamp: this.timestamp.toISOString(),\n      requestId: this.requestId,\n      auditInfo: this.auditInfo,\n      stack: this.stack,\n    };\n  }\n}\n\n// Audit information for compliance\nexport interface AuditInfo {\n  userId?: string;\n  role?: 'provider' | 'merchant' | 'cashier';\n  fiscalId?: string;\n  receiptId?: string;\n  pemId?: string;\n  ipAddress?: string;\n  userAgent?: string;\n}\n\n// Network-related errors (usually retryable)\nexport class NetworkError extends ACubeSDKError {\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      statusCode?: number;\n      requestId?: string;\n      retryable?: boolean;\n      cause?: Error;\n    } = {}\n  ) {\n    super(message, 'NETWORK_ERROR', {\n      operation,\n      retryable: options.retryable ?? true,\n      ...(options.statusCode !== undefined && { statusCode: options.statusCode }),\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.cause !== undefined && { cause: options.cause }),\n    });\n  }\n}\n\n// Authentication/Authorization errors (not retryable)\nexport class AuthenticationError extends ACubeSDKError {\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      statusCode?: number;\n      requestId?: string;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(message, 'AUTHENTICATION_ERROR', {\n      operation,\n      retryable: false,\n      statusCode: options.statusCode ?? 401,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n    });\n  }\n}\n\n// Authorization errors (not retryable)\nexport class AuthorizationError extends ACubeSDKError {\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      statusCode?: number;\n      requestId?: string;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(message, 'AUTHORIZATION_ERROR', {\n      operation,\n      retryable: false,\n      statusCode: options.statusCode ?? 403,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n    });\n  }\n}\n\n// Validation errors (not retryable)\nexport class ValidationError extends ACubeSDKError {\n  public readonly violations: ValidationViolation[];\n\n  constructor(\n    message: string,\n    operation: string,\n    violations: ValidationViolation[],\n    options: {\n      requestId?: string;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(message, 'VALIDATION_ERROR', {\n      operation,\n      retryable: false,\n      statusCode: 422,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n    });\n    this.violations = violations;\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      violations: this.violations,\n    };\n  }\n}\n\nexport interface ValidationViolation {\n  field: string;\n  message: string;\n  code: string;\n  value?: unknown;\n}\n\n// Fiscal/compliance specific errors (usually not retryable)\nexport class FiscalError extends ACubeSDKError {\n  public readonly fiscalCode?: string;\n  public readonly documentNumber?: string;\n\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      fiscalCode?: string;\n      documentNumber?: string;\n      statusCode?: number;\n      requestId?: string;\n      retryable?: boolean;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(message, 'FISCAL_ERROR', {\n      operation,\n      retryable: options.retryable ?? false,\n      statusCode: options.statusCode ?? 400,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n    });\n    if (options.fiscalCode !== undefined) {\n      this.fiscalCode = options.fiscalCode;\n    }\n    if (options.documentNumber !== undefined) {\n      this.documentNumber = options.documentNumber;\n    }\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      fiscalCode: this.fiscalCode,\n      documentNumber: this.documentNumber,\n    };\n  }\n}\n\n// Rate limiting errors (retryable)\nexport class RateLimitError extends ACubeSDKError {\n  public readonly retryAfter?: number;\n\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      retryAfter?: number;\n      requestId?: string;\n    } = {}\n  ) {\n    super(message, 'RATE_LIMIT_ERROR', {\n      operation,\n      retryable: true,\n      statusCode: 429,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n    });\n    if (options.retryAfter !== undefined) {\n      this.retryAfter = options.retryAfter;\n    }\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      retryAfter: this.retryAfter,\n    };\n  }\n}\n\n// Configuration errors (not retryable)\nexport class ConfigurationError extends ACubeSDKError {\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      requestId?: string;\n    } = {}\n  ) {\n    super(message, 'CONFIGURATION_ERROR', {\n      operation,\n      retryable: false,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n    });\n  }\n}\n\n// Resource not found errors (not retryable)\nexport class NotFoundError extends ACubeSDKError {\n  public readonly resourceType: string;\n  public readonly resourceId: string;\n\n  constructor(\n    resourceType: string,\n    resourceId: string,\n    operation: string,\n    options: {\n      requestId?: string;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(\n      `${resourceType} with id ${resourceId} not found`,\n      'NOT_FOUND_ERROR',\n      {\n        operation,\n        retryable: false,\n        statusCode: 404,\n        ...(options.requestId !== undefined && { requestId: options.requestId }),\n        ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n      }\n    );\n    this.resourceType = resourceType;\n    this.resourceId = resourceId;\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      resourceType: this.resourceType,\n      resourceId: this.resourceId,\n    };\n  }\n}\n\n// Circuit breaker errors (retryable)\nexport class CircuitBreakerError extends ACubeSDKError {\n  public readonly state: 'OPEN' | 'HALF_OPEN';\n\n  constructor(\n    message: string,\n    operation: string,\n    state: 'OPEN' | 'HALF_OPEN',\n    options: {\n      requestId?: string;\n    } = {}\n  ) {\n    super(message, 'CIRCUIT_BREAKER_ERROR', {\n      operation,\n      retryable: true,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n    });\n    this.state = state;\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      state: this.state,\n    };\n  }\n}\n\n// Utility functions\nfunction generateRequestId(): string {\n  return `req_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;\n}\n\n// Error factory for creating errors from HTTP responses\nexport function createErrorFromResponse(\n  response: {\n    status: number;\n    statusText: string;\n    data?: unknown;\n  },\n  operation: string,\n  requestId?: string\n): ACubeSDKError {\n  const message = getErrorMessage(response.data) || response.statusText;\n\n  switch (response.status) {\n    case 401:\n      return new AuthenticationError(message, operation, {\n        statusCode: response.status,\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 403:\n      return new AuthorizationError(message, operation, {\n        statusCode: response.status,\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 404:\n      // Try to extract resource info from error data\n      const resourceType = extractResourceType(response.data);\n      const resourceId = extractResourceId(response.data);\n      if (resourceType && resourceId) {\n        return new NotFoundError(resourceType, resourceId, operation, {\n          ...(requestId !== undefined && { requestId }),\n        });\n      }\n      // Create a concrete NotFoundError for generic 404s\n      return new NotFoundError('Resource', 'unknown', operation, {\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 422:\n      const violations = extractValidationViolations(response.data);\n      return new ValidationError(message, operation, violations, {\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 429:\n      const retryAfter = extractRetryAfter(response.data);\n      return new RateLimitError(message, operation, {\n        ...(retryAfter !== undefined && { retryAfter }),\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 500:\n    case 502:\n    case 503:\n    case 504:\n      return new NetworkError(message, operation, {\n        statusCode: response.status,\n        ...(requestId !== undefined && { requestId }),\n        retryable: true,\n      });\n    default:\n      return new NetworkError(message, operation, {\n        statusCode: response.status,\n        ...(requestId !== undefined && { requestId }),\n        retryable: response.status >= 500,\n      });\n  }\n}\n\n// Helper functions for extracting error details\nfunction getErrorMessage(data: unknown): string | null {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    return (obj.message as string) || (obj.detail as string) || null;\n  }\n  return null;\n}\n\nfunction extractResourceType(data: unknown): string | null {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    return obj.resourceType as string || null;\n  }\n  return null;\n}\n\nfunction extractResourceId(data: unknown): string | null {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    return obj.resourceId as string || null;\n  }\n  return null;\n}\n\nfunction extractValidationViolations(data: unknown): ValidationViolation[] {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    if (Array.isArray(obj.violations)) {\n      return obj.violations.map((v: any) => ({\n        field: v.propertyPath || v.field || 'unknown',\n        message: v.message || 'Validation failed',\n        code: v.code || 'VALIDATION_FAILED',\n        value: v.value,\n      }));\n    }\n    if (Array.isArray(obj.detail)) {\n      return obj.detail.map((v: any) => ({\n        field: v.loc?.join('.') || 'unknown',\n        message: v.msg || 'Validation failed',\n        code: v.type || 'VALIDATION_FAILED',\n        value: v.input,\n      }));\n    }\n  }\n  return [];\n}\n\nfunction extractRetryAfter(data: unknown): number | undefined {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    const retryAfter = obj.retryAfter || obj.retry_after;\n    return typeof retryAfter === 'number' ? retryAfter : undefined;\n  }\n  return undefined;\n}","/**\n * Base OpenAPI Resource Class\n * Enterprise-grade foundation for all API resources with full type safety\n * \n * Features:\n * - Type-safe request execution based on OpenAPI specification\n * - Automatic parameter binding (path, query, body)\n * - Schema validation and error handling\n * - Audit trail and metadata tracking\n * - Integration with existing HTTP client and middleware\n */\n\nimport type { HttpClient, RequestOptions as HttpRequestOptions } from '@/http/client';\nimport type { EndpointDefinition, HttpMethod } from '@/generated/endpoints';\nimport { EndpointUtils } from '@/generated/endpoints';\nimport { ValidationError, type ACubeSDKError } from '@/errors/index';\n\nexport interface BaseResourceConfig {\n  client: HttpClient;\n  endpoints: Record<string, EndpointDefinition>;\n}\n\nexport interface RequestOptions {\n  pathParams?: Record<string, string | number>;\n  queryParams?: Record<string, unknown>;\n  headers?: Record<string, string>;\n  metadata?: Record<string, unknown>;\n  skipRetry?: boolean;\n  skipCircuitBreaker?: boolean;\n  timeout?: number;\n}\n\nexport interface ValidationContext {\n  endpoint: EndpointDefinition;\n  operation: string;\n  data?: unknown;\n  pathParams?: Record<string, string | number>;\n  queryParams?: Record<string, unknown>;\n}\n\n/**\n * Abstract base class for all OpenAPI-based resources\n * Provides type-safe operations with comprehensive error handling and validation\n */\nexport abstract class BaseOpenAPIResource {\n  protected readonly client: HttpClient;\n  protected readonly endpoints: Record<string, EndpointDefinition>;\n\n  constructor(config: BaseResourceConfig) {\n    this.client = config.client;\n    this.endpoints = config.endpoints;\n  }\n\n  /**\n   * Execute a type-safe API request based on OpenAPI endpoint definition\n   * \n   * @template TRequest - Type of request data\n   * @template TResponse - Type of response data\n   * @param endpointKey - Key to identify the endpoint in the endpoints map\n   * @param data - Request body data (for POST/PUT/PATCH requests)\n   * @param options - Additional request options\n   * @returns Promise resolving to typed response data\n   */\n  protected async executeRequest<TRequest = unknown, TResponse = unknown>(\n    endpointKey: string,\n    data?: TRequest,\n    options: RequestOptions = {}\n  ): Promise<TResponse> {\n    const endpoint = this.endpoints[endpointKey];\n    if (!endpoint) {\n      throw new ValidationError(\n        `Unknown endpoint: ${endpointKey}`,\n        'execute_request',\n        [{ field: 'endpointKey', message: `Endpoint '${endpointKey}' not found`, code: 'UNKNOWN_ENDPOINT' }]\n      );\n    }\n\n    // Validate the request before execution\n    this.validateRequest({ endpoint, operation: endpointKey, data, ...options });\n\n    // Build the complete URL with path parameters\n    const url = this.buildRequestUrl(endpoint, options.pathParams);\n\n    // Prepare request options for HTTP client\n    const httpOptions: HttpRequestOptions = {\n      method: endpoint.method,\n      url,\n      data,\n      headers: {\n        ...this.getDefaultHeaders(endpoint),\n        ...options.headers,\n      },\n      metadata: {\n        operationId: endpoint.operationId,\n        resource: endpoint.metadata?.resource,\n        operation: endpoint.metadata?.operation,\n        ...options.metadata,\n      },\n      skipRetry: options.skipRetry ?? !EndpointUtils.isRetryable(endpoint),\n    };\n\n    // Add optional properties only if they have values\n    if (options.queryParams) {\n      httpOptions.params = options.queryParams;\n    }\n    if (options.timeout) {\n      httpOptions.timeout = options.timeout;\n    }\n    if (options.skipCircuitBreaker !== undefined) {\n      httpOptions.skipCircuitBreaker = options.skipCircuitBreaker;\n    }\n\n    try {\n      // Execute the HTTP request through the client\n      const response = await this.client.request<TResponse>(httpOptions);\n      \n      // Validate response if needed\n      this.validateResponse(endpoint, response.data);\n      \n      return response.data;\n    } catch (error) {\n      // Enhanced error handling with OpenAPI context\n      throw this.enhanceError(error as ACubeSDKError, endpoint, endpointKey, options);\n    }\n  }\n\n  /**\n   * Build complete request URL with path parameter substitution\n   */\n  private buildRequestUrl(endpoint: EndpointDefinition, pathParams: Record<string, string | number> = {}): string {\n    return EndpointUtils.buildUrl(endpoint, pathParams);\n  }\n\n  /**\n   * Get default headers based on endpoint requirements\n   */\n  private getDefaultHeaders(endpoint: EndpointDefinition): Record<string, string> {\n    const headers: Record<string, string> = {};\n\n    // Set content type for requests with body\n    if (endpoint.requestBody) {\n      headers['Content-Type'] = endpoint.requestBody.contentType;\n    }\n\n    // Set default accept header\n    const successResponse = endpoint.responses['200'] || endpoint.responses['201'];\n    if (successResponse?.contentType) {\n      headers['Accept'] = successResponse.contentType;\n    }\n\n    return headers;\n  }\n\n  /**\n   * Validate request data against OpenAPI specification\n   */\n  private validateRequest(context: ValidationContext): void {\n    const { endpoint, operation, data, pathParams, queryParams } = context;\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    // Validate required path parameters\n    if (endpoint.parameters?.path) {\n      for (const [paramName, paramType] of Object.entries(endpoint.parameters.path)) {\n        if (!pathParams || !(paramName in pathParams)) {\n          errors.push({\n            field: `path.${paramName}`,\n            message: `Required path parameter '${paramName}' is missing`,\n            code: 'MISSING_PATH_PARAM',\n          });\n        } else {\n          // Type validation for path parameters\n          const value = pathParams[paramName];\n          if (!this.validateParameterType(value, paramType)) {\n            errors.push({\n              field: `path.${paramName}`,\n              message: `Path parameter '${paramName}' must be of type ${paramType}`,\n              code: 'INVALID_PATH_PARAM_TYPE',\n            });\n          }\n        }\n      }\n    }\n\n    // Validate required request body\n    if (endpoint.requestBody?.required && !data) {\n      errors.push({\n        field: 'body',\n        message: 'Request body is required',\n        code: 'MISSING_BODY',\n      });\n    }\n\n    // Validate query parameters (basic type checking)\n    if (endpoint.parameters?.query && queryParams) {\n      for (const [paramName, paramType] of Object.entries(endpoint.parameters.query)) {\n        const value = queryParams[paramName];\n        if (value !== undefined && !this.validateParameterType(value, paramType)) {\n          errors.push({\n            field: `query.${paramName}`,\n            message: `Query parameter '${paramName}' must be of type ${paramType}`,\n            code: 'INVALID_QUERY_PARAM_TYPE',\n          });\n        }\n      }\n    }\n\n    if (errors.length > 0) {\n      throw new ValidationError(\n        `Request validation failed for operation '${operation}'`,\n        operation,\n        errors\n      );\n    }\n  }\n\n  /**\n   * Basic type validation for parameters\n   */\n  private validateParameterType(value: unknown, expectedType: string): boolean {\n    switch (expectedType) {\n      case 'string':\n        return typeof value === 'string';\n      case 'integer':\n      case 'number':\n        return typeof value === 'number' || (typeof value === 'string' && !isNaN(Number(value)));\n      case 'boolean':\n        return typeof value === 'boolean';\n      default:\n        return true; // Allow unknown types for now\n    }\n  }\n\n  /**\n   * Validate response data (can be extended for schema validation)\n   */\n  private validateResponse(endpoint: EndpointDefinition, data: unknown): void {\n    // Basic response validation - can be enhanced with JSON schema validation\n    if (data === null || data === undefined) {\n      // Check if null response is expected\n      const hasNullableResponse = Object.keys(endpoint.responses).some(code => \n        code === '204' || endpoint.responses[code]?.description?.toLowerCase().includes('no content')\n      );\n      \n      if (!hasNullableResponse) {\n        console.warn(`Received null/undefined response for ${endpoint.operationId}`);\n      }\n    }\n  }\n\n  /**\n   * Enhance errors with OpenAPI-specific context\n   */\n  private enhanceError(\n    error: ACubeSDKError,\n    endpoint: EndpointDefinition,\n    operation: string,\n    _options: RequestOptions\n  ): ACubeSDKError {\n    // Create enhanced error with additional context\n    const enhancedError = new (error.constructor as new (...args: any[]) => ACubeSDKError)(\n      error.message,\n      error.code,\n      {\n        operation: error.operation || endpoint.operationId,\n        retryable: error.retryable !== undefined ? error.retryable : EndpointUtils.isRetryable(endpoint),\n        statusCode: error.statusCode,\n        requestId: error.requestId,\n        auditInfo: {\n          ...error.auditInfo,\n          // Add OpenAPI-specific audit information\n          pemId: endpoint.metadata?.resource === 'point-of-sales' ? String(_options.pathParams?.serial_number || '') : error.auditInfo?.pemId,\n        },\n        cause: error.cause,\n      }\n    );\n\n    // Add a custom property for OpenAPI metadata (non-enumerable to avoid serialization issues)\n    Object.defineProperty(enhancedError, 'openapiMetadata', {\n      value: {\n        resource: endpoint.metadata?.resource,\n        endpointOperation: operation,\n        httpMethod: endpoint.method,\n        path: endpoint.path,\n      },\n      writable: false,\n      enumerable: false,\n      configurable: false,\n    });\n\n    return enhancedError;\n  }\n\n  /**\n   * Utility method to check if an operation is available\n   */\n  protected hasOperation(operationKey: string): boolean {\n    return operationKey in this.endpoints;\n  }\n\n  /**\n   * Get endpoint definition for an operation\n   */\n  protected getEndpoint(operationKey: string): EndpointDefinition | null {\n    return this.endpoints[operationKey] || null;\n  }\n\n  /**\n   * Get all available operations for this resource\n   */\n  protected getAvailableOperations(): string[] {\n    return Object.keys(this.endpoints);\n  }\n\n  /**\n   * Create a standardized error for missing operations\n   */\n  protected createUnsupportedOperationError(operation: string): ValidationError {\n    return new ValidationError(\n      `Operation '${operation}' is not supported by this resource`,\n      'unsupported_operation',\n      [{ \n        field: 'operation', \n        message: `Available operations: ${this.getAvailableOperations().join(', ')}`, \n        code: 'UNSUPPORTED_OPERATION' \n      }]\n    );\n  }\n\n  // Static utility methods for common patterns\n\n  /**\n   * Format validation errors for user-friendly display\n   */\n  static formatValidationErrors(errors: Array<{ field: string; message: string; code: string }>): string {\n    return errors.map(error => `${error.field}: ${error.message}`).join(', ');\n  }\n\n  /**\n   * Extract error details from API response\n   */\n  static extractErrorDetails(error: unknown): { message: string; details?: unknown } {\n    if (error instanceof ValidationError) {\n      return {\n        message: error.message,\n        details: error.violations,\n      };\n    }\n\n    if (error instanceof Error) {\n      return { message: error.message };\n    }\n\n    return { message: 'Unknown error occurred' };\n  }\n\n  /**\n   * Check if error indicates a temporary failure\n   */\n  static isTemporaryError(error: ACubeSDKError): boolean {\n    // Network errors are usually temporary\n    if (error.name === 'NetworkError') {\n      return true;\n    }\n\n    // Some HTTP status codes indicate temporary issues\n    if (error.statusCode) {\n      return [429, 500, 502, 503, 504].includes(error.statusCode);\n    }\n\n    return error.retryable ?? false;\n  }\n\n  /**\n   * Get retry delay for temporary errors\n   */\n  static getRetryDelay(_error: ACubeSDKError, attempt: number): number {\n    // Exponential backoff with jitter\n    const baseDelay = 1000; // 1 second\n    const maxDelay = 30000; // 30 seconds\n    \n    let delay = Math.min(baseDelay * Math.pow(2, attempt - 1), maxDelay);\n    \n    // Add jitter (±25%)\n    const jitter = delay * 0.25;\n    delay += (Math.random() * 2 - 1) * jitter;\n    \n    return Math.floor(delay);\n  }\n}\n\n/**\n * Type-safe endpoint builder for dynamic endpoint creation\n */\nexport class EndpointBuilder {\n  private definition: Partial<EndpointDefinition> = {};\n\n  constructor(path: string, method: HttpMethod) {\n    this.definition = {\n      path,\n      method,\n      tags: [],\n      responses: {},\n    };\n  }\n\n  operationId(id: string): this {\n    this.definition.operationId = id;\n    return this;\n  }\n\n  summary(text: string): this {\n    this.definition.summary = text;\n    return this;\n  }\n\n  description(text: string): this {\n    this.definition.description = text;\n    return this;\n  }\n\n  tag(name: string): this {\n    this.definition.tags = [...(this.definition.tags || []), name];\n    return this;\n  }\n\n  requireAuth(): this {\n    this.definition.security = [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }];\n    return this;\n  }\n\n  pathParam(name: string, type: string): this {\n    if (!this.definition.parameters) {\n      this.definition.parameters = {};\n    }\n    if (!this.definition.parameters.path) {\n      this.definition.parameters.path = {};\n    }\n    this.definition.parameters.path[name] = type;\n    return this;\n  }\n\n  queryParam(name: string, type: string): this {\n    if (!this.definition.parameters) {\n      this.definition.parameters = {};\n    }\n    if (!this.definition.parameters.query) {\n      this.definition.parameters.query = {};\n    }\n    this.definition.parameters.query[name] = type;\n    return this;\n  }\n\n  requestBody(schema: string, required = true): this {\n    this.definition.requestBody = {\n      required,\n      contentType: 'application/json',\n      schema,\n    };\n    return this;\n  }\n\n  response(statusCode: string, description: string, schema?: string): this {\n    if (!this.definition.responses) {\n      this.definition.responses = {};\n    }\n    this.definition.responses[statusCode] = {\n      description,\n      ...(schema && { contentType: 'application/json', schema }),\n    };\n    return this;\n  }\n\n  metadata(resource: string, operation: string, authRequired = true, retryable = true): this {\n    this.definition.metadata = {\n      resource,\n      operation,\n      authRequired,\n      retryable,\n    };\n    return this;\n  }\n\n  build(): EndpointDefinition {\n    if (!this.definition.operationId) {\n      throw new Error('operationId is required');\n    }\n\n    return this.definition as EndpointDefinition;\n  }\n}","/**\n * PEMs Resource - OpenAPI Implementation\n * Type-safe implementation for Point of Sale Module certificate management\n * \n * Features:\n * - PEM certificate lifecycle management\n * - Point of Sale creation and configuration\n * - Certificate validation and renewal\n * - Compliance and audit tracking\n */\n\nimport { BaseOpenAPIResource } from '@/resources/base-openapi';\nimport { PEMEndpoints } from '@/generated/endpoints';\nimport type { HttpClient } from '@/http/client';\nimport type { PEMId } from '@/types/branded';\nimport type { components } from '@/types/generated';\nimport { ValidationError, FiscalError } from '@/errors/index';\n\n// Extract types from OpenAPI generated types\ntype PointOfSaleCreateInput = components['schemas']['A-Cube_GOV-IT_PEL_Platform_Pem.PemCreateInput'];\ntype PointOfSaleOutput = components['schemas']['A-Cube_GOV-IT_PEL_Platform_Pem.PemCreateOutput'];\ntype PEMCertificatesOutput = components['schemas']['A-Cube_GOV-IT_PEL_Platform_Pem.PemCertificatesOutput'];\n\nexport interface PEMValidationOptions {\n  validateCertificateChain?: boolean;\n  checkExpirationDate?: boolean;\n  enforceComplianceRules?: boolean;\n  validateSignatures?: boolean;\n}\n\nexport interface CertificateInfo {\n  id: string;\n  type: CertificateType;\n  status: CertificateStatus;\n  issuer: string;\n  subject: string;\n  validFrom: string;\n  validTo: string;\n  serialNumber: string;\n  fingerprint: string;\n  keyUsage: string[];\n  issuedFor: string;\n}\n\nexport interface CertificateChain {\n  root: CertificateInfo;\n  intermediate?: CertificateInfo[];\n  leaf: CertificateInfo;\n  validationResults: {\n    chainValid: boolean;\n    rootTrusted: boolean;\n    notExpired: boolean;\n    revocationChecked: boolean;\n    issues: string[];\n  };\n}\n\nexport interface PEMConfiguration {\n  pemId: PEMId;\n  deviceSerialNumber: string;\n  certificates: CertificateInfo[];\n  configuration: {\n    fiscalMemorySize: string;\n    supportedOperations: string[];\n    maxDailyTransactions: number;\n    complianceVersion: string;\n  };\n  status: PEMStatus;\n  lastAudit?: string;\n  nextCertificateRenewal?: string;\n}\n\nexport type CertificateType = 'root' | 'intermediate' | 'device' | 'signing' | 'encryption';\nexport type CertificateStatus = 'valid' | 'expired' | 'revoked' | 'pending' | 'invalid';\nexport type PEMStatus = 'active' | 'inactive' | 'maintenance' | 'compliance_check' | 'certificate_renewal';\nexport type ComplianceLevel = 'full' | 'partial' | 'non_compliant' | 'under_review';\n\n/**\n * PEMs Resource Class - OpenAPI Based\n * Manages PEM devices and certificates with full Italian compliance\n */\nexport class PEMsResource extends BaseOpenAPIResource {\n  constructor(client: HttpClient) {\n    super({\n      client,\n      endpoints: {\n        createPOS: PEMEndpoints.CREATE_POS,\n        getCertificates: PEMEndpoints.GET_CERTIFICATES,\n      }\n    });\n  }\n\n  /**\n   * Create a new Point of Sale\n   * \n   * @param data - Point of Sale creation input data\n   * @param options - Validation options\n   * @returns Promise resolving to created Point of Sale\n   */\n  async createPointOfSale(\n    data: PointOfSaleCreateInput, \n    options: PEMValidationOptions = {}\n  ): Promise<PointOfSaleOutput> {\n    // Validate input\n    await this.validatePointOfSaleInput(data, options);\n\n    return this.executeRequest<PointOfSaleCreateInput, PointOfSaleOutput>('createPOS', data, {\n      metadata: {\n        operation: 'create_point_of_sale',\n        merchantUuid: data.merchant_uuid,\n        addressProvided: !!data.address,\n      }\n    });\n  }\n\n  /**\n   * Get certificates for a Point of Sale\n   * \n   * @param posId - Point of Sale ID\n   * @returns Promise resolving to certificate information\n   */\n  async getCertificates(posId: PEMId | string): Promise<CertificateInfo[]> {\n    const response = await this.executeRequest<void, PEMCertificatesOutput>('getCertificates', undefined, {\n      pathParams: { id: posId },\n      metadata: {\n        operation: 'get_pem_certificates',\n        posId,\n      }\n    });\n\n    // Transform response to CertificateInfo format\n    return this.parseCertificateResponse(response);\n  }\n\n  /**\n   * Validate certificate chain for a PEM device\n   * \n   * @param posId - Point of Sale ID\n   * @returns Promise resolving to certificate chain validation\n   */\n  async validateCertificateChain(posId: PEMId | string): Promise<CertificateChain> {\n    const certificates = await this.getCertificates(posId);\n    return PEMsResource.buildCertificateChain(certificates);\n  }\n\n  /**\n   * Get PEM configuration and status\n   * \n   * @param posId - Point of Sale ID\n   * @returns Promise resolving to PEM configuration\n   */\n  async getConfiguration(posId: PEMId | string): Promise<PEMConfiguration> {\n    const certificates = await this.getCertificates(posId);\n    return PEMsResource.buildPEMConfiguration(posId, certificates);\n  }\n\n  /**\n   * Check compliance status for a PEM device\n   * \n   * @param posId - Point of Sale ID\n   * @returns Promise resolving to compliance assessment\n   */\n  async checkCompliance(posId: PEMId | string): Promise<{\n    level: ComplianceLevel;\n    score: number;\n    issues: string[];\n    recommendations: string[];\n    lastCheck: string;\n    nextCheck: string;\n  }> {\n    const config = await this.getConfiguration(posId);\n    return PEMsResource.assessCompliance(config);\n  }\n\n  /**\n   * Request certificate renewal for a PEM device\n   * \n   * @param posId - Point of Sale ID\n   * @param certificateType - Type of certificate to renew\n   * @returns Promise resolving when renewal is initiated\n   */\n  async requestCertificateRenewal(\n    _posId: PEMId | string, \n    _certificateType: CertificateType = 'device'\n  ): Promise<{ renewalId: string; estimatedCompletion: string }> {\n    // This would typically call a specific renewal endpoint\n    // For now, return a mock response\n    return {\n      renewalId: `renewal_${Date.now()}`,\n      estimatedCompletion: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n    };\n  }\n\n  // Validation methods\n\n  /**\n   * Validate Point of Sale input\n   */\n  private async validatePointOfSaleInput(\n    data: PointOfSaleCreateInput, \n    _options: PEMValidationOptions = {}\n  ): Promise<void> {\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    // Basic validation\n    if (!data.merchant_uuid || data.merchant_uuid.trim().length === 0) {\n      errors.push({\n        field: 'merchant_uuid',\n        message: 'Merchant UUID is required',\n        code: 'REQUIRED'\n      });\n    }\n\n    if (!data.address) {\n      errors.push({\n        field: 'address',\n        message: 'Address is required for PEM registration',\n        code: 'REQUIRED'\n      });\n    } else {\n      const addressErrors = this.validateAddress(data.address);\n      errors.push(...addressErrors);\n    }\n\n    // Certificate validation - certificates field not available in OpenAPI schema\n    // Commenting out until field is available\n    // if (data.certificates && options.validateCertificateChain) {\n    //   const certErrors = await this.validateCertificates(data.certificates);\n    //   errors.push(...certErrors);\n    // }\n\n    if (errors.length > 0) {\n      throw new ValidationError('Invalid Point of Sale input', 'create_point_of_sale', errors);\n    }\n  }\n\n  /**\n   * Validate address information\n   */\n  private validateAddress(address: components['schemas']['A-Cube_GOV-IT_PEL_Platform_Address']): Array<{ field: string; message: string; code: string }> {\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    if (!address.street_address) {\n      errors.push({\n        field: 'address.street_address',\n        message: 'Street address is required',\n        code: 'REQUIRED'\n      });\n    }\n\n    if (!address.city) {\n      errors.push({\n        field: 'address.city',\n        message: 'City is required',\n        code: 'REQUIRED'\n      });\n    }\n\n    if (!address.zip_code || !/^\\d{5}$/.test(address.zip_code)) {\n      errors.push({\n        field: 'address.zip_code',\n        message: 'Valid 5-digit ZIP code is required',\n        code: 'INVALID_FORMAT'\n      });\n    }\n\n    if (!address.province || address.province.length !== 2) {\n      errors.push({\n        field: 'address.province',\n        message: 'Valid 2-character province code is required',\n        code: 'INVALID_FORMAT'\n      });\n    }\n\n    return errors;\n  }\n\n  /**\n   * Validate certificates\n   * @deprecated This method is not used since certificates field is not available in OpenAPI schema\n   */\n  // private async validateCertificates(certificates: CertificateInfo[]): Promise<Array<{ field: string; message: string; code: string }>> {\n  //   const errors: Array<{ field: string; message: string; code: string }> = [];\n\n  //   for (let i = 0; i < certificates.length; i++) {\n  //     const cert = certificates[i];\n  //     if (!cert) continue;\n      \n  //     if (!cert.type || !['root', 'intermediate', 'device', 'signing', 'encryption'].includes(cert.type)) {\n  //       errors.push({\n  //         field: `certificates[${i}].type`,\n  //         message: 'Invalid certificate type',\n  //         code: 'INVALID_CERTIFICATE_TYPE'\n  //       });\n  //     }\n\n  //     if (!cert.validTo || new Date(cert.validTo) <= new Date()) {\n  //       errors.push({\n  //         field: `certificates[${i}].validTo`,\n  //         message: 'Certificate is expired or expiring soon',\n  //         code: 'CERTIFICATE_EXPIRED'\n  //       });\n  //     }\n  //   }\n\n  //   return errors;\n  // }\n\n  /**\n   * Parse certificate response from API\n   */\n  private parseCertificateResponse(response: PEMCertificatesOutput): CertificateInfo[] {\n    // Transform API response to CertificateInfo format\n    if (!response) {\n      return [];\n    }\n\n    const certificates: CertificateInfo[] = [];\n    \n    // Parse the MTLS certificate if available\n    if (response.mtls_certificate) {\n      certificates.push({\n        id: 'mtls_cert',\n        type: 'device',\n        status: 'valid',\n        issuer: 'Italian Tax Agency',\n        subject: 'PEM Device',\n        validFrom: new Date().toISOString(),\n        validTo: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(),\n        serialNumber: 'MTLS001',\n        fingerprint: response.mtls_certificate.substring(0, 40),\n        keyUsage: ['digitalSignature', 'keyEncipherment'],\n        issuedFor: 'PEM Device',\n      });\n    }\n\n    return certificates;\n  }\n\n  // Static utility methods\n\n  /**\n   * Build certificate chain from individual certificates\n   */\n  static buildCertificateChain(certificates: CertificateInfo[]): CertificateChain {\n    const root = certificates.find(cert => cert.type === 'root');\n    const intermediate = certificates.filter(cert => cert.type === 'intermediate');\n    const leaf = certificates.find(cert => cert.type === 'device') || certificates[0];\n\n    if (!root || !leaf) {\n      throw new FiscalError('Invalid certificate chain: missing root or leaf certificate', 'build_certificate_chain');\n    }\n\n    const validationResults = this.validateCertificateChain(certificates);\n\n    return {\n      root,\n      intermediate,\n      leaf,\n      validationResults,\n    };\n  }\n\n  /**\n   * Validate certificate chain integrity\n   */\n  private static validateCertificateChain(certificates: CertificateInfo[]): {\n    chainValid: boolean;\n    rootTrusted: boolean;\n    notExpired: boolean;\n    revocationChecked: boolean;\n    issues: string[];\n  } {\n    const issues: string[] = [];\n    const now = new Date();\n\n    // Check for expired certificates\n    const expiredCerts = certificates.filter(cert => new Date(cert.validTo) <= now);\n    if (expiredCerts.length > 0) {\n      issues.push(`${expiredCerts.length} certificate(s) are expired`);\n    }\n\n    // Check for revoked certificates\n    const revokedCerts = certificates.filter(cert => cert.status === 'revoked');\n    if (revokedCerts.length > 0) {\n      issues.push(`${revokedCerts.length} certificate(s) are revoked`);\n    }\n\n    // Check chain completeness\n    const hasRoot = certificates.some(cert => cert.type === 'root');\n    const hasLeaf = certificates.some(cert => cert.type === 'device');\n    if (!hasRoot) issues.push('Missing root certificate');\n    if (!hasLeaf) issues.push('Missing device certificate');\n\n    return {\n      chainValid: hasRoot && hasLeaf && issues.length === 0,\n      rootTrusted: hasRoot,\n      notExpired: expiredCerts.length === 0,\n      revocationChecked: true, // Mock implementation\n      issues,\n    };\n  }\n\n  /**\n   * Build PEM configuration from certificates\n   */\n  static buildPEMConfiguration(posId: PEMId | string, certificates: CertificateInfo[]): PEMConfiguration {\n    const deviceCert = certificates.find(cert => cert.type === 'device');\n    const now = new Date();\n\n    return {\n      pemId: posId as PEMId,\n      deviceSerialNumber: deviceCert?.serialNumber || 'unknown',\n      certificates,\n      configuration: {\n        fiscalMemorySize: '32MB',\n        supportedOperations: ['sale', 'return', 'void', 'daily_close'],\n        maxDailyTransactions: 1000,\n        complianceVersion: '2.1.0',\n      },\n      status: this.determinePEMStatus(certificates),\n      lastAudit: new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n      nextCertificateRenewal: this.calculateNextRenewal(certificates),\n    };\n  }\n\n  /**\n   * Determine PEM status based on certificates\n   */\n  private static determinePEMStatus(certificates: CertificateInfo[]): PEMStatus {\n    const now = new Date();\n    const thirtyDaysFromNow = new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000);\n\n    // Check for expired certificates\n    const hasExpired = certificates.some(cert => new Date(cert.validTo) <= now);\n    if (hasExpired) return 'maintenance';\n\n    // Check for certificates expiring soon\n    const hasExpiringSoon = certificates.some(cert => new Date(cert.validTo) <= thirtyDaysFromNow);\n    if (hasExpiringSoon) return 'certificate_renewal';\n\n    // Check for revoked certificates\n    const hasRevoked = certificates.some(cert => cert.status === 'revoked');\n    if (hasRevoked) return 'compliance_check';\n\n    return 'active';\n  }\n\n  /**\n   * Calculate next certificate renewal date\n   */\n  private static calculateNextRenewal(certificates: CertificateInfo[]): string {\n    if (certificates.length === 0) return new Date().toISOString();\n\n    const earliestExpiry = certificates\n      .map(cert => new Date(cert.validTo))\n      .sort((a, b) => a.getTime() - b.getTime())[0];\n\n    if (!earliestExpiry) {\n      return new Date().toISOString();\n    }\n\n    // Schedule renewal 60 days before expiry\n    const renewalDate = new Date(earliestExpiry.getTime() - 60 * 24 * 60 * 60 * 1000);\n    return renewalDate.toISOString();\n  }\n\n  /**\n   * Assess compliance level\n   */\n  static assessCompliance(config: PEMConfiguration): {\n    level: ComplianceLevel;\n    score: number;\n    issues: string[];\n    recommendations: string[];\n    lastCheck: string;\n    nextCheck: string;\n  } {\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n    let score = 100;\n\n    // Check certificate status\n    const expiredCerts = config.certificates.filter(cert => new Date(cert.validTo) <= new Date());\n    if (expiredCerts.length > 0) {\n      score -= 30;\n      issues.push(`${expiredCerts.length} expired certificate(s)`);\n      recommendations.push('Renew expired certificates immediately');\n    }\n\n    const expiringSoon = config.certificates.filter(cert => {\n      const expiryDate = new Date(cert.validTo);\n      const thirtyDaysFromNow = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);\n      return expiryDate <= thirtyDaysFromNow && expiryDate > new Date();\n    });\n\n    if (expiringSoon.length > 0) {\n      score -= 15;\n      issues.push(`${expiringSoon.length} certificate(s) expiring within 30 days`);\n      recommendations.push('Schedule certificate renewal');\n    }\n\n    // Check audit compliance\n    if (config.lastAudit) {\n      const lastAuditDate = new Date(config.lastAudit);\n      const sixMonthsAgo = new Date(Date.now() - 180 * 24 * 60 * 60 * 1000);\n      \n      if (lastAuditDate < sixMonthsAgo) {\n        score -= 20;\n        issues.push('Audit overdue (last audit more than 6 months ago)');\n        recommendations.push('Schedule compliance audit');\n      }\n    } else {\n      score -= 25;\n      issues.push('No audit history found');\n      recommendations.push('Conduct initial compliance audit');\n    }\n\n    // Determine compliance level\n    let level: ComplianceLevel = 'full';\n    if (score < 70) level = 'non_compliant';\n    else if (score < 85) level = 'partial';\n    else if (issues.length > 0) level = 'under_review';\n\n    const now = new Date();\n    return {\n      level,\n      score: Math.max(0, score),\n      issues,\n      recommendations,\n      lastCheck: now.toISOString(),\n      nextCheck: new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n    };\n  }\n\n  /**\n   * Format certificate for display\n   */\n  static formatCertificateForDisplay(cert: CertificateInfo): {\n    displayName: string;\n    statusBadge: string;\n    validity: string;\n    issuerShort: string;\n    expiresIn: string;\n  } {\n    const now = new Date();\n    const expiryDate = new Date(cert.validTo);\n    const daysUntilExpiry = Math.ceil((expiryDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n\n    return {\n      displayName: `${cert.type.toUpperCase()} Certificate`,\n      statusBadge: cert.status.toUpperCase(),\n      validity: `${cert.validFrom.split('T')[0]} to ${cert.validTo.split('T')[0]}`,\n      issuerShort: cert.issuer.split(',')[0] || cert.issuer,\n      expiresIn: daysUntilExpiry > 0 ? `${daysUntilExpiry} days` : 'Expired',\n    };\n  }\n\n  /**\n   * Generate certificate summary report\n   */\n  static generateCertificateSummary(certificates: CertificateInfo[]): {\n    totalCertificates: number;\n    validCertificates: number;\n    expiredCertificates: number;\n    expiringSoon: number;\n    revokedCertificates: number;\n    typeBreakdown: Record<CertificateType, number>;\n    nextExpiry: string | null;\n  } {\n    const now = new Date();\n    const thirtyDaysFromNow = new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000);\n\n    const summary = {\n      totalCertificates: certificates.length,\n      validCertificates: 0,\n      expiredCertificates: 0,\n      expiringSoon: 0,\n      revokedCertificates: 0,\n      typeBreakdown: {} as Record<CertificateType, number>,\n      nextExpiry: null as string | null,\n    };\n\n    let earliestExpiry: Date | null = null;\n\n    for (const cert of certificates) {\n      const expiryDate = new Date(cert.validTo);\n\n      // Count by status\n      if (cert.status === 'revoked') {\n        summary.revokedCertificates++;\n      } else if (expiryDate <= now) {\n        summary.expiredCertificates++;\n      } else if (expiryDate <= thirtyDaysFromNow) {\n        summary.expiringSoon++;\n      } else {\n        summary.validCertificates++;\n      }\n\n      // Count by type\n      summary.typeBreakdown[cert.type] = (summary.typeBreakdown[cert.type] || 0) + 1;\n\n      // Track earliest expiry\n      if (!earliestExpiry || expiryDate < earliestExpiry) {\n        earliestExpiry = expiryDate;\n      }\n    }\n\n    summary.nextExpiry = earliestExpiry ? earliestExpiry.toISOString().split('T')[0] || null : null;\n\n    return summary;\n  }\n\n  /**\n   * Validate certificate signature (placeholder implementation)\n   */\n  static validateCertificateSignature(cert: CertificateInfo, issuerCert?: CertificateInfo): {\n    valid: boolean;\n    error?: string;\n  } {\n    // This would implement actual cryptographic signature validation\n    // For now, return a mock validation\n    if (!issuerCert && cert.type !== 'root') {\n      return {\n        valid: false,\n        error: 'Cannot validate signature without issuer certificate',\n      };\n    }\n\n    // Mock validation logic\n    const isValid = cert.fingerprint && cert.fingerprint !== 'unknown';\n    \n    return {\n      valid: !!isValid,\n      ...(isValid ? {} : { error: 'Invalid certificate signature' }),\n    };\n  }\n\n  /**\n   * Generate certificate renewal request\n   */\n  static generateRenewalRequest(cert: CertificateInfo): {\n    certificateId: string;\n    currentExpiry: string;\n    requestedValidityPeriod: number;\n    justification: string;\n    urgency: 'low' | 'medium' | 'high' | 'critical';\n  } {\n    const now = new Date();\n    const expiryDate = new Date(cert.validTo);\n    const daysUntilExpiry = Math.ceil((expiryDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n\n    let urgency: 'low' | 'medium' | 'high' | 'critical' = 'low';\n    if (daysUntilExpiry <= 0) urgency = 'critical';\n    else if (daysUntilExpiry <= 7) urgency = 'high';\n    else if (daysUntilExpiry <= 30) urgency = 'medium';\n\n    return {\n      certificateId: cert.id,\n      currentExpiry: cert.validTo,\n      requestedValidityPeriod: 365, // Days\n      justification: daysUntilExpiry <= 30 ? 'Certificate expiring soon' : 'Routine renewal',\n      urgency,\n    };\n  }\n}\n\n// Re-export for convenience\nexport { PEMsResource as PEMs };\n\n// Export types for external use\nexport type {\n  PointOfSaleCreateInput,\n  PointOfSaleOutput,\n};"]}