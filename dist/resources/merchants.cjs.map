{"version":3,"sources":["../../src/generated/endpoints.ts","../../src/errors/index.ts","../../src/resources/base-openapi.ts","../../src/resources/merchants.ts"],"names":["CashierEndpoints","PointOfSalesEndpoints","ReceiptEndpoints","CashRegisterEndpoints","MerchantEndpoints","PEMEndpoints","EndpointUtils","resource","operationId","allClasses","endpointClass","endpoint","pathParams","url","key","value","statusCode","ACubeSDKError","message","code","options","generateRequestId","ValidationError","operation","violations","BaseOpenAPIResource","config","endpointKey","data","httpOptions","response","error","headers","successResponse","context","queryParams","errors","paramName","paramType","expectedType","_options","enhancedError","operationKey","_error","attempt","delay","jitter","MerchantsResource","_MerchantsResource","client","merchantId","merchant","address","vatValidation","nameValidation","passwordValidation","addressValidation","vatNumber","name","password","email","sum","i","digit","fiscalId","suggestions","zipCode","isValid","formattedAddress","missingFields","recommendations","completenessScore","totalFields","registrationDate","businessAge","complianceStatus","addressPart","c","regionProvinces","province","regions","region","provinces"],"mappings":"aA8CO,IAAMA,CAAAA,CAAN,KAAuB,EAuM9B,CAvMaA,CAAAA,CACK,IAAA,CAA2B,CACzC,IAAA,CAAM,eAAA,CACN,MAAA,CAAQ,KAAA,CACR,WAAA,CAAa,iCACb,OAAA,CAAS,eAAA,CACT,WAAA,CAAa,kCAAA,CACb,IAAA,CAAM,CAAC,SAAS,CAAA,CAChB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,WAAY,CACV,KAAA,CAAO,CACL,IAAA,CAAM,SAAA,CACN,IAAA,CAAM,SACR,CACF,CAAA,CACA,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBAAA,CACb,WAAA,CAAa,mBACb,MAAA,CAAQ,oDACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,mBACb,MAAA,CAAQ,yCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,mBACb,MAAA,CAAQ,wCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,kBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,sCACV,CACF,CAAA,CACA,QAAA,CAAU,CACR,QAAA,CAAU,WACV,SAAA,CAAW,MAAA,CACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,IACb,CACF,CAAA,CA3CWA,EA6CK,MAAA,CAA6B,CAC3C,IAAA,CAAM,eAAA,CACN,MAAA,CAAQ,MAAA,CACR,WAAA,CAAa,kCAAA,CACb,QAAS,gBAAA,CACT,WAAA,CAAa,8BAAA,CACb,IAAA,CAAM,CAAC,SAAS,CAAA,CAChB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,WAAA,CAAa,CACX,QAAA,CAAU,IAAA,CACV,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,qCACV,CAAA,CACA,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,gCACV,EACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,kBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,sCACV,CACF,CAAA,CACA,QAAA,CAAU,CACR,QAAA,CAAU,UAAA,CACV,SAAA,CAAW,QAAA,CACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,KACb,CACF,CAAA,CAjFWA,CAAAA,CAmFK,EAAA,CAAyB,CACvC,IAAA,CAAM,kBAAA,CACN,MAAA,CAAQ,KAAA,CACR,WAAA,CAAa,qCAAA,CACb,OAAA,CAAS,iBAAA,CACT,WAAA,CAAa,oDAAA,CACb,IAAA,CAAM,CAAC,SAAS,CAAA,CAChB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,gCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,wCACV,CACF,EACA,QAAA,CAAU,CACR,QAAA,CAAU,UAAA,CACV,SAAA,CAAW,IAAA,CACX,YAAA,CAAc,IAAA,CACd,UAAW,IACb,CACF,CAAA,CAlHWA,CAAAA,CAoHK,SAAA,CAAgC,CAC9C,IAAA,CAAM,4BAAA,CACN,OAAQ,KAAA,CACR,WAAA,CAAa,kDAAA,CACb,OAAA,CAAS,oBAAA,CACT,WAAA,CAAa,2BAAA,CACb,IAAA,CAAM,CAAC,SAAS,CAAA,CAChB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,UAAA,CAAY,CACV,IAAA,CAAM,CACJ,UAAA,CAAY,SACd,CACF,CAAA,CACA,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBAAA,CACb,WAAA,CAAa,mBACb,MAAA,CAAQ,gCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,YAAa,kBAAA,CACb,MAAA,CAAQ,wCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,kBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,sCACV,CACF,CAAA,CACA,QAAA,CAAU,CACR,SAAU,UAAA,CACV,SAAA,CAAW,KAAA,CACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,IACb,CACF,CAAA,CA7JWA,CAAAA,CA+JK,MAAA,CAA6B,CAC3C,IAAA,CAAM,4BAAA,CACN,MAAA,CAAQ,QAAA,CACR,YAAa,iDAAA,CACb,OAAA,CAAS,gBAAA,CACT,WAAA,CAAa,kBAAA,CACb,IAAA,CAAM,CAAC,SAAS,EAChB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,WAAY,CACV,IAAA,CAAM,CACJ,UAAA,CAAY,SACd,CACF,CAAA,CACA,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBACf,CAAA,CACA,GAAA,CAAO,CACL,YAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CAAA,CACA,GAAA,CAAO,CACL,YAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,wCACV,CAAA,CACA,GAAA,CAAO,CACL,YAAa,kBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,sCACV,CACF,CAAA,CACA,QAAA,CAAU,CACR,QAAA,CAAU,UAAA,CACV,SAAA,CAAW,QAAA,CACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,KACb,CACF,CAAA,CAMK,IAAMC,CAAAA,CAAN,KAA4B,EA8MnC,CA9MaA,CAAAA,CACK,KAA2B,CACzC,IAAA,CAAM,qBAAA,CACN,MAAA,CAAQ,KAAA,CACR,WAAA,CAAa,4CAAA,CACb,OAAA,CAAS,sBACT,WAAA,CAAa,eAAA,CACb,IAAA,CAAM,CAAC,eAAe,CAAA,CACtB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,SAAA,CAAW,CACT,IAAO,CACL,WAAA,CAAa,qBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,wDACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CACF,CAAA,CACA,QAAA,CAAU,CACR,QAAA,CAAU,gBAAA,CACV,SAAA,CAAW,MAAA,CACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,IACb,CACF,CAAA,CA3BWA,CAAAA,CA6BK,aAAA,CAAoC,CAClD,KAAM,qCAAA,CACN,MAAA,CAAQ,KAAA,CACR,WAAA,CAAa,2DAAA,CACb,OAAA,CAAS,oBAAA,CACT,WAAA,CAAa,gDACb,IAAA,CAAM,CAAC,eAAe,CAAA,CACtB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,UAAA,CAAY,CACV,IAAA,CAAM,CACJ,aAAA,CAAe,QACjB,CACF,CAAA,CACA,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,sBACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,oCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,YACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,YACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,wCACV,CACF,CAAA,CACA,QAAA,CAAU,CACR,QAAA,CAAU,gBAAA,CACV,SAAA,CAAW,KAAA,CACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,IACb,CACF,CAAA,CAjEWA,CAAAA,CAmEK,aAAA,CAAoC,CAClD,IAAA,CAAM,2BAAA,CACN,MAAA,CAAQ,MAAA,CACR,YAAa,6CAAA,CACb,OAAA,CAAS,eAAA,CACT,WAAA,CAAa,4CAAA,CACb,IAAA,CAAM,CAAC,eAAe,EACtB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,WAAA,CAAa,CACX,QAAA,CAAU,IAAA,CACV,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,sCACV,EACA,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,qCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,mBACb,MAAA,CAAQ,yCACV,CACF,CAAA,CACA,QAAA,CAAU,CACR,QAAA,CAAU,gBAAA,CACV,SAAA,CAAW,eAAA,CACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,KACb,CACF,CAAA,CAlGWA,EAoGK,UAAA,CAAiC,CAC/C,IAAA,CAAM,gDAAA,CACN,MAAA,CAAQ,MAAA,CACR,WAAA,CAAa,oEAAA,CACb,QAAS,iBAAA,CACT,WAAA,CAAa,yGAAA,CACb,IAAA,CAAM,CAAC,eAAe,CAAA,CACtB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,UAAA,CAAY,CACV,IAAA,CAAM,CACJ,aAAA,CAAe,QACjB,CACF,CAAA,CACA,WAAA,CAAa,CACX,SAAU,IAAA,CACV,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,oCACV,CAAA,CACA,SAAA,CAAW,CACT,IAAO,CACL,WAAA,CAAa,qBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,mCACV,CAAA,CACA,IAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CACF,CAAA,CACA,QAAA,CAAU,CACR,QAAA,CAAU,gBAAA,CACV,SAAA,CAAW,YAAA,CACX,YAAA,CAAc,KACd,SAAA,CAAW,KACb,CACF,CAAA,CAxIWA,CAAAA,CA0IK,iBAAA,CAAwC,CACtD,IAAA,CAAM,iDACN,MAAA,CAAQ,MAAA,CACR,WAAA,CAAa,6EAAA,CACb,OAAA,CAAS,0BAAA,CACT,WAAA,CAAa,gCAAA,CACb,KAAM,CAAC,eAAe,CAAA,CACtB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,UAAA,CAAY,CACV,IAAA,CAAM,CACJ,aAAA,CAAe,QACjB,CACF,CAAA,CACA,WAAA,CAAa,CACX,QAAA,CAAU,IAAA,CACV,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,oCACV,CAAA,CACA,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,sBACb,WAAA,CAAa,kBACf,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CACF,CAAA,CACA,QAAA,CAAU,CACR,QAAA,CAAU,iBACV,SAAA,CAAW,mBAAA,CACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,KACb,CACF,CAAA,CA7KWA,EA+KK,WAAA,CAAkC,CAChD,IAAA,CAAM,oDAAA,CACN,MAAA,CAAQ,MAAA,CACR,WAAA,CAAa,qEAAA,CACb,QAAS,cAAA,CACT,WAAA,CAAa,oDAAA,CACb,IAAA,CAAM,CAAC,eAAe,CAAA,CACtB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,UAAA,CAAY,CACV,IAAA,CAAM,CACJ,aAAA,CAAe,QACjB,CACF,CAAA,CACA,SAAA,CAAW,CACT,IAAO,CACL,WAAA,CAAa,qBAAA,CACb,WAAA,CAAa,kBACf,CAAA,CACA,GAAA,CAAO,CACL,YAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CACF,CAAA,CACA,QAAA,CAAU,CACR,QAAA,CAAU,gBAAA,CACV,SAAA,CAAW,aAAA,CACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,KACb,CACF,CAAA,CAMK,IAAMC,CAAAA,CAAN,KAAuB,EA4R9B,CA5RaA,CAAAA,CACK,KAA2B,CACzC,IAAA,CAAM,eAAA,CACN,MAAA,CAAQ,KAAA,CACR,WAAA,CAAa,+BAAA,CACb,OAAA,CAAS,eACT,WAAA,CAAa,mCAAA,CACb,IAAA,CAAM,CAAC,SAAS,CAAA,CAChB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,UAAA,CAAY,CACV,MAAO,CACL,IAAA,CAAM,SAAA,CACN,IAAA,CAAM,SAAA,CACN,UAAA,CAAY,QAAA,CACZ,QAAA,CAAU,QAAA,CACV,aAAA,CAAe,QACjB,CACF,CAAA,CACA,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,oDACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CACF,EACA,QAAA,CAAU,CACR,QAAA,CAAU,UAAA,CACV,SAAA,CAAW,MAAA,CACX,YAAA,CAAc,IAAA,CACd,UAAW,IACb,CACF,CAAA,CApCWA,CAAAA,CAsCK,MAAA,CAA6B,CAC3C,IAAA,CAAM,eAAA,CACN,OAAQ,MAAA,CACR,WAAA,CAAa,kCAAA,CACb,OAAA,CAAS,gBAAA,CACT,WAAA,CAAa,iCAAA,CACb,IAAA,CAAM,CAAC,SAAS,CAAA,CAChB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,WAAA,CAAa,CACX,QAAA,CAAU,IAAA,CACV,WAAA,CAAa,kBAAA,CACb,OAAQ,+BACV,CAAA,CACA,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBAAA,CACb,YAAa,kBAAA,CACb,MAAA,CAAQ,gCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,mBACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,sCACV,CACF,CAAA,CACA,QAAA,CAAU,CACR,SAAU,UAAA,CACV,SAAA,CAAW,QAAA,CACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,KACb,CACF,EA1EWA,CAAAA,CA4EK,IAAA,CAA2B,CACzC,IAAA,CAAM,eAAA,CACN,MAAA,CAAQ,QAAA,CACR,WAAA,CAAa,kCAAA,CACb,OAAA,CAAS,cAAA,CACT,WAAA,CAAa,4BAAA,CACb,IAAA,CAAM,CAAC,SAAS,EAChB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,WAAA,CAAa,CACX,QAAA,CAAU,IAAA,CACV,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,qCACV,EACA,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,oCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,mBACb,MAAA,CAAQ,yCACV,CACF,CAAA,CACA,QAAA,CAAU,CACR,QAAA,CAAU,UAAA,CACV,UAAW,MAAA,CACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,KACb,CACF,CAAA,CA3GWA,CAAAA,CA6GK,YAAkC,CAChD,IAAA,CAAM,8BAAA,CACN,MAAA,CAAQ,KAAA,CACR,WAAA,CAAa,6CAAA,CACb,OAAA,CAAS,aAAA,CACT,WAAA,CAAa,2BAAA,CACb,IAAA,CAAM,CAAC,SAAS,CAAA,CAChB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,UAAA,CAAY,CACV,KAAM,CACJ,YAAA,CAAc,QAChB,CACF,CAAA,CACA,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,gCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CAAA,CACA,IAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,wCACV,CACF,EACA,QAAA,CAAU,CACR,QAAA,CAAU,UAAA,CACV,SAAA,CAAW,KAAA,CACX,YAAA,CAAc,IAAA,CACd,UAAW,IACb,CACF,CAAA,CAjJWA,CAAAA,CAmJK,eAAA,CAAsC,CACpD,IAAA,CAAM,+BAAA,CACN,MAAA,CAAQ,QAAA,CACR,WAAA,CAAa,4DAAA,CACb,OAAA,CAAS,wBAAA,CACT,WAAA,CAAa,8DAAA,CACb,KAAM,CAAC,SAAS,CAAA,CAChB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,WAAA,CAAa,CACX,QAAA,CAAU,IAAA,CACV,WAAA,CAAa,mBACb,MAAA,CAAQ,8CACV,CAAA,CACA,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,oCACV,CAAA,CACA,GAAA,CAAO,CACL,YAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CACF,CAAA,CACA,QAAA,CAAU,CACR,QAAA,CAAU,UAAA,CACV,SAAA,CAAW,iBAAA,CACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,KACb,CACF,CAAA,CAlLWA,CAAAA,CAoLK,WAAA,CAAkC,CAChD,IAAA,CAAM,sCAAA,CACN,MAAA,CAAQ,KAAA,CACR,WAAA,CAAa,6DAAA,CACb,OAAA,CAAS,qBAAA,CACT,WAAA,CAAa,qDAAA,CACb,IAAA,CAAM,CAAC,SAAS,CAAA,CAChB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,EAC1D,UAAA,CAAY,CACV,IAAA,CAAM,CACJ,YAAA,CAAc,QAChB,CAAA,CACA,MAAA,CAAQ,CACN,MAAA,CAAQ,QACV,CACF,CAAA,CACA,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBACf,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,mBACb,MAAA,CAAQ,yCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,mBACb,MAAA,CAAQ,wCACV,CACF,CAAA,CACA,QAAA,CAAU,CACR,QAAA,CAAU,UAAA,CACV,UAAW,aAAA,CACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,IACb,CACF,CAAA,CAzNWA,CAAAA,CA2NK,YAAA,CAAmC,CACjD,IAAA,CAAM,sBAAA,CACN,MAAA,CAAQ,MAAA,CACR,WAAA,CAAa,+CAAA,CACb,QAAS,sBAAA,CACT,WAAA,CAAa,iEAAA,CACb,IAAA,CAAM,CAAC,SAAS,CAAA,CAChB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,WAAA,CAAa,CACX,QAAA,CAAU,IAAA,CACV,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,gCACV,CAAA,CACA,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,gCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CACF,CAAA,CACA,QAAA,CAAU,CACR,QAAA,CAAU,UAAA,CACV,SAAA,CAAW,cAAA,CACX,aAAc,IAAA,CACd,SAAA,CAAW,KACb,CACF,CAAA,CA1PWA,CAAAA,CA4PK,uBAAA,CAA8C,CAC5D,IAAA,CAAM,iCAAA,CACN,MAAA,CAAQ,MAAA,CACR,WAAA,CAAa,oEAAA,CACb,OAAA,CAAS,gCAAA,CACT,YAAa,2EAAA,CACb,IAAA,CAAM,CAAC,SAAS,CAAA,CAChB,QAAA,CAAU,CAAC,CAAE,wCAAyC,EAAG,CAAC,CAAA,CAC1D,WAAA,CAAa,CACX,QAAA,CAAU,IAAA,CACV,YAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CAAA,CACA,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,gCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CACF,CAAA,CACA,SAAU,CACR,QAAA,CAAU,UAAA,CACV,SAAA,CAAW,yBAAA,CACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,KACb,CACF,CAAA,CAMK,IAAMC,CAAAA,CAAN,KAA4B,EAwGnC,CAxGaA,CAAAA,CACK,MAAA,CAA6B,CAC3C,IAAA,CAAM,oBAAA,CACN,MAAA,CAAQ,MAAA,CACR,WAAA,CAAa,6CAAA,CACb,QAAS,sBAAA,CACT,WAAA,CAAa,4BAAA,CACb,IAAA,CAAM,CAAC,eAAe,CAAA,CACtB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,WAAA,CAAa,CACX,QAAA,CAAU,IAAA,CACV,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,oCACV,CAAA,CACA,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,qCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,kBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,sCACV,CACF,CAAA,CACA,QAAA,CAAU,CACR,QAAA,CAAU,gBAAA,CACV,SAAA,CAAW,QAAA,CACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,KACb,CACF,CAAA,CArCWA,CAAAA,CAuCK,IAAA,CAA2B,CACzC,IAAA,CAAM,oBAAA,CACN,MAAA,CAAQ,KAAA,CACR,WAAA,CAAa,0CAAA,CACb,OAAA,CAAS,oBAAA,CACT,YAAa,8BAAA,CACb,IAAA,CAAM,CAAC,eAAe,CAAA,CACtB,QAAA,CAAU,CAAC,CAAE,wCAAyC,EAAG,CAAC,CAAA,CAC1D,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,yDACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CACF,CAAA,CACA,SAAU,CACR,QAAA,CAAU,gBAAA,CACV,SAAA,CAAW,MAAA,CACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,IACb,CACF,CAAA,CAjEWA,CAAAA,CAmEK,SAAA,CAAgC,CAC9C,IAAA,CAAM,yBAAA,CACN,MAAA,CAAQ,KAAA,CACR,WAAA,CAAa,8CAAA,CACb,OAAA,CAAS,mBAAA,CACT,WAAA,CAAa,oCAAA,CACb,IAAA,CAAM,CAAC,eAAe,CAAA,CACtB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,UAAA,CAAY,CACV,IAAA,CAAM,CACJ,EAAA,CAAI,SACN,CACF,CAAA,CACA,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,qCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,YAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,YAAa,kBAAA,CACb,MAAA,CAAQ,wCACV,CACF,CAAA,CACA,QAAA,CAAU,CACR,QAAA,CAAU,iBACV,SAAA,CAAW,KAAA,CACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,IACb,CACF,CAAA,CAMK,IAAMC,CAAAA,CAAN,KAAwB,EAuJ/B,CAvJaA,CAAAA,CACK,IAAA,CAA2B,CACzC,KAAM,YAAA,CACN,MAAA,CAAQ,KAAA,CACR,WAAA,CAAa,8BAAA,CACb,OAAA,CAAS,eAAA,CACT,WAAA,CAAa,0BACb,IAAA,CAAM,CAAC,UAAU,CAAA,CACjB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBAAA,CACb,WAAA,CAAa,kBACf,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,YAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CACF,CAAA,CACA,QAAA,CAAU,CACR,QAAA,CAAU,YACV,SAAA,CAAW,MAAA,CACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,IACb,CACF,CAAA,CA1BWA,EA4BK,MAAA,CAA6B,CAC3C,IAAA,CAAM,YAAA,CACN,MAAA,CAAQ,MAAA,CACR,WAAA,CAAa,oBAAA,CACb,OAAA,CAAS,iBAAA,CACT,WAAA,CAAa,uBAAA,CACb,IAAA,CAAM,CAAC,UAAU,CAAA,CACjB,SAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,WAAA,CAAa,CACX,QAAA,CAAU,IAAA,CACV,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,iBACV,CAAA,CACA,UAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,eACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,OAAQ,yCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,kBAAA,CACb,WAAA,CAAa,kBAAA,CACb,OAAQ,sCACV,CACF,CAAA,CACA,QAAA,CAAU,CACR,QAAA,CAAU,WAAA,CACV,SAAA,CAAW,SACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,KACb,CACF,CAAA,CAhEWA,CAAAA,CAkEK,WAAA,CAAkC,CAChD,IAAA,CAAM,mBAAA,CACN,MAAA,CAAQ,KAAA,CACR,WAAA,CAAa,wBAAA,CACb,OAAA,CAAS,eACT,WAAA,CAAa,iCAAA,CACb,IAAA,CAAM,CAAC,UAAU,CAAA,CACjB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,UAAA,CAAY,CACV,IAAA,CAAM,CACJ,IAAA,CAAM,QACR,CACF,CAAA,CACA,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,eACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,wCACV,CACF,CAAA,CACA,SAAU,CACR,QAAA,CAAU,WAAA,CACV,SAAA,CAAW,KAAA,CACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,IACb,CACF,CAAA,CAtGWA,CAAAA,CAwGK,MAAA,CAA6B,CAC3C,IAAA,CAAM,mBAAA,CACN,OAAQ,KAAA,CACR,WAAA,CAAa,wBAAA,CACb,OAAA,CAAS,iBAAA,CACT,WAAA,CAAa,mBAAA,CACb,IAAA,CAAM,CAAC,UAAU,CAAA,CACjB,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,UAAA,CAAY,CACV,IAAA,CAAM,CACJ,IAAA,CAAM,QACR,CACF,CAAA,CACA,WAAA,CAAa,CACX,QAAA,CAAU,IAAA,CACV,WAAA,CAAa,kBAAA,CACb,OAAQ,iBACV,CAAA,CACA,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBAAA,CACb,YAAa,kBAAA,CACb,MAAA,CAAQ,eACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,YAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,wCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,mBACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,sCACV,CACF,CAAA,CACA,QAAA,CAAU,CACR,SAAU,WAAA,CACV,SAAA,CAAW,QAAA,CACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,KACb,CACF,EAMK,IAAMC,CAAAA,CAAN,KAAmB,EA2E1B,CA3EaA,CAAAA,CACK,UAAA,CAAiC,CAC/C,IAAA,CAAM,iBAAA,CACN,MAAA,CAAQ,MAAA,CACR,WAAA,CAAa,yBAAA,CACb,OAAA,CAAS,sBAAA,CACT,YAAa,4BAAA,CACb,IAAA,CAAM,CAAC,KAAK,CAAA,CACZ,QAAA,CAAU,CAAC,CAAE,wCAAyC,EAAG,CAAC,CAAA,CAC1D,WAAA,CAAa,CACX,QAAA,CAAU,IAAA,CACV,YAAa,kBAAA,CACb,MAAA,CAAQ,oBACV,CAAA,CACA,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,kBACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,yCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,kBAAA,CACb,WAAA,CAAa,kBAAA,CACb,MAAA,CAAQ,sCACV,CACF,EACA,QAAA,CAAU,CACR,QAAA,CAAU,MAAA,CACV,SAAA,CAAW,YAAA,CACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,KACb,CACF,CAAA,CArCWA,CAAAA,CAuCK,gBAAA,CAAuC,CACrD,IAAA,CAAM,oCACN,MAAA,CAAQ,KAAA,CACR,WAAA,CAAa,uCAAA,CACb,OAAA,CAAS,sBAAA,CACT,WAAA,CAAa,sCAAA,CACb,KAAM,CAAC,KAAK,CAAA,CACZ,QAAA,CAAU,CAAC,CAAE,uCAAA,CAAyC,EAAG,CAAC,CAAA,CAC1D,UAAA,CAAY,CACV,IAAA,CAAM,CACJ,EAAA,CAAI,QACN,CACF,CAAA,CACA,SAAA,CAAW,CACT,GAAA,CAAO,CACL,WAAA,CAAa,qBAAA,CACb,YAAa,kBACf,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,OAAQ,yCACV,CAAA,CACA,GAAA,CAAO,CACL,WAAA,CAAa,WAAA,CACb,WAAA,CAAa,kBAAA,CACb,OAAQ,wCACV,CACF,CAAA,CACA,QAAA,CAAU,CACR,QAAA,CAAU,MAAA,CACV,SAAA,CAAW,kBAAA,CACX,YAAA,CAAc,IAAA,CACd,SAAA,CAAW,IACb,CACF,CAAA,CAMK,IAAMC,EAAN,KAAoB,CAIzB,OAAO,oBAAA,CAAqBC,CAAAA,CAAwC,CAClE,OAAQA,CAAAA,CAAS,aAAY,EAC3B,KAAK,UAAA,CACH,OAAO,MAAA,CAAO,MAAA,CAAOP,CAAgB,EACvC,KAAK,gBAAA,CACH,OAAO,MAAA,CAAO,MAAA,CAAOC,CAAqB,CAAA,CAC5C,KAAK,UAAA,CACH,OAAO,MAAA,CAAO,MAAA,CAAOC,CAAgB,CAAA,CACvC,KAAK,gBAAA,CACH,OAAO,MAAA,CAAO,MAAA,CAAOC,CAAqB,CAAA,CAC5C,KAAK,WAAA,CACH,OAAO,MAAA,CAAO,MAAA,CAAOC,CAAiB,CAAA,CACxC,KAAK,MAAA,CACH,OAAO,MAAA,CAAO,MAAA,CAAOC,CAAY,CAAA,CACnC,QACE,OAAO,EACX,CACF,CAKA,OAAO,yBAAA,CAA0BG,CAAAA,CAAgD,CAC/E,IAAMC,CAAAA,CAAa,CACjBT,CAAAA,CACAC,CAAAA,CACAC,EACAC,CAAAA,CACAC,CAAAA,CACAC,CACF,CAAA,CAEA,IAAA,IAAWK,CAAAA,IAAiBD,CAAAA,CAC1B,IAAA,IAAWE,KAAY,MAAA,CAAO,MAAA,CAAOD,CAAa,CAAA,CAChD,GAAIC,CAAAA,CAAS,WAAA,GAAgBH,CAAAA,CAC3B,OAAOG,CAAAA,CAKb,OAAO,IACT,CAKA,OAAO,QAAA,CAASA,CAAAA,CAA8BC,CAAAA,CAA8C,EAAC,CAAW,CACtG,IAAIC,CAAAA,CAAMF,CAAAA,CAAS,IAAA,CAEnB,IAAA,GAAW,CAACG,CAAAA,CAAKC,CAAK,CAAA,GAAK,MAAA,CAAO,OAAA,CAAQH,CAAU,CAAA,CAClDC,CAAAA,CAAMA,EAAI,OAAA,CAAQ,CAAA,CAAA,EAAIC,CAAG,CAAA,CAAA,CAAA,CAAK,MAAA,CAAOC,CAAK,CAAC,CAAA,CAG7C,OAAOF,CACT,CAKA,OAAO,YAAA,CAAaF,CAAAA,CAAuC,CACzD,OAAOA,CAAAA,CAAS,QAAA,EAAU,YAAA,EAAgB,KAC5C,CAKA,OAAO,WAAA,CAAYA,CAAAA,CAAuC,CACxD,OAAOA,CAAAA,CAAS,QAAA,EAAU,SAAA,EAAa,KACzC,CAKA,OAAO,qBAAA,CAAsBA,CAAAA,CAA6C,CACxE,OAAOA,CAAAA,CAAS,WAAA,EAAa,WAAA,EAAe,IAC9C,CAKA,OAAO,sBAAA,CAAuBA,EAA8BK,CAAAA,CAAmC,CAC7F,OAAOL,CAAAA,CAAS,SAAA,CAAUK,CAAU,CAAA,EAAG,WAAA,EAAe,IACxD,CACF,CAAA,CCxpCO,IAAeC,CAAAA,CAAf,cAAqC,KAAM,CAShD,YACEC,CAAAA,CACgBC,CAAAA,CAChBC,CAAAA,CAQA,CACA,KAAA,CAAMF,CAAO,CAAA,CAVG,IAAA,CAAA,IAAA,CAAAC,CAAAA,CAWZC,CAAAA,CAAQ,KAAA,GACV,IAAA,CAAK,KAAA,CAAQA,CAAAA,CAAQ,KAAA,CAAA,CAEvB,IAAA,CAAK,KAAO,IAAA,CAAK,WAAA,CAAY,IAAA,CAC7B,IAAA,CAAK,SAAA,CAAY,IAAI,IAAA,CACrB,IAAA,CAAK,SAAA,CAAYA,CAAAA,CAAQ,SAAA,EAAaC,CAAAA,EAAkB,CACxD,IAAA,CAAK,SAAA,CAAYD,CAAAA,CAAQ,UACzB,IAAA,CAAK,SAAA,CAAYA,CAAAA,CAAQ,SAAA,EAAa,KAAA,CAClCA,CAAAA,CAAQ,UAAA,GAAe,MAAA,GACzB,KAAK,UAAA,CAAaA,CAAAA,CAAQ,UAAA,CAAA,CAExBA,CAAAA,CAAQ,SAAA,GAAc,MAAA,GACxB,IAAA,CAAK,SAAA,CAAYA,EAAQ,SAAA,CAAA,CAI3B,MAAA,CAAO,cAAA,CAAe,IAAA,CAAM,GAAA,CAAA,MAAA,CAAW,SAAS,EAClD,CAEA,MAAA,EAAkC,CAChC,OAAO,CACL,IAAA,CAAM,IAAA,CAAK,IAAA,CACX,OAAA,CAAS,KAAK,OAAA,CACd,IAAA,CAAM,IAAA,CAAK,IAAA,CACX,SAAA,CAAW,IAAA,CAAK,SAAA,CAChB,SAAA,CAAW,KAAK,SAAA,CAChB,UAAA,CAAY,IAAA,CAAK,UAAA,CACjB,SAAA,CAAW,IAAA,CAAK,SAAA,CAAU,WAAA,GAC1B,SAAA,CAAW,IAAA,CAAK,SAAA,CAChB,SAAA,CAAW,IAAA,CAAK,SAAA,CAChB,KAAA,CAAO,IAAA,CAAK,KACd,CACF,CACF,CAAA,CA8EO,IAAME,CAAAA,CAAN,cAA8BL,CAAc,CAGjD,WAAA,CACEC,CAAAA,CACAK,CAAAA,CACAC,CAAAA,CACAJ,CAAAA,CAGI,EAAC,CACL,CACA,MAAMF,CAAAA,CAAS,kBAAA,CAAoB,CACjC,SAAA,CAAAK,CAAAA,CACA,SAAA,CAAW,KAAA,CACX,UAAA,CAAY,IACZ,GAAIH,CAAAA,CAAQ,SAAA,GAAc,MAAA,EAAa,CAAE,SAAA,CAAWA,CAAAA,CAAQ,SAAU,CAAA,CACtE,GAAIA,CAAAA,CAAQ,SAAA,GAAc,MAAA,EAAa,CAAE,SAAA,CAAWA,CAAAA,CAAQ,SAAU,CACxE,CAAC,CAAA,CACD,IAAA,CAAK,UAAA,CAAaI,EACpB,CAES,MAAA,EAAkC,CACzC,OAAO,CACL,GAAG,KAAA,CAAM,MAAA,EAAO,CAChB,UAAA,CAAY,KAAK,UACnB,CACF,CACF,CAAA,CAqKA,SAASH,CAAAA,EAA4B,CACnC,OAAO,CAAA,IAAA,EAAO,IAAA,CAAK,GAAA,EAAK,CAAA,CAAA,EAAI,IAAA,CAAK,MAAA,EAAO,CAAE,SAAS,EAAE,CAAA,CAAE,SAAA,CAAU,CAAA,CAAG,EAAE,CAAC,CAAA,CACzE,CClSO,IAAeI,CAAAA,CAAf,KAAmC,CAIxC,WAAA,CAAYC,CAAAA,CAA4B,CACtC,IAAA,CAAK,MAAA,CAASA,EAAO,MAAA,CACrB,IAAA,CAAK,SAAA,CAAYA,CAAAA,CAAO,UAC1B,CAYA,MAAgB,cAAA,CACdC,CAAAA,CACAC,CAAAA,CACAR,CAAAA,CAA0B,EAAC,CACP,CACpB,IAAMT,CAAAA,CAAW,KAAK,SAAA,CAAUgB,CAAW,CAAA,CAC3C,GAAI,CAAChB,CAAAA,CACH,MAAM,IAAIW,EACR,CAAA,kBAAA,EAAqBK,CAAW,CAAA,CAAA,CAChC,iBAAA,CACA,CAAC,CAAE,KAAA,CAAO,aAAA,CAAe,QAAS,CAAA,UAAA,EAAaA,CAAW,CAAA,WAAA,CAAA,CAAe,IAAA,CAAM,kBAAmB,CAAC,CACrG,CAAA,CAIF,IAAA,CAAK,eAAA,CAAgB,CAAE,QAAA,CAAAhB,CAAAA,CAAU,SAAA,CAAWgB,CAAAA,CAAa,IAAA,CAAAC,EAAM,GAAGR,CAAQ,CAAC,CAAA,CAG3E,IAAMP,CAAAA,CAAM,IAAA,CAAK,eAAA,CAAgBF,EAAUS,CAAAA,CAAQ,UAAU,CAAA,CAGvDS,CAAAA,CAAkC,CACtC,MAAA,CAAQlB,CAAAA,CAAS,MAAA,CACjB,IAAAE,CAAAA,CACA,IAAA,CAAAe,CAAAA,CACA,OAAA,CAAS,CACP,GAAG,IAAA,CAAK,iBAAA,CAAkBjB,CAAQ,CAAA,CAClC,GAAGS,CAAAA,CAAQ,OACb,CAAA,CACA,QAAA,CAAU,CACR,YAAaT,CAAAA,CAAS,WAAA,CACtB,QAAA,CAAUA,CAAAA,CAAS,QAAA,EAAU,QAAA,CAC7B,SAAA,CAAWA,CAAAA,CAAS,QAAA,EAAU,SAAA,CAC9B,GAAGS,CAAAA,CAAQ,QACb,CAAA,CACA,SAAA,CAAWA,CAAAA,CAAQ,WAAa,CAACd,CAAAA,CAAc,WAAA,CAAYK,CAAQ,CACrE,CAAA,CAGIS,CAAAA,CAAQ,WAAA,GACVS,CAAAA,CAAY,MAAA,CAAST,CAAAA,CAAQ,WAAA,CAAA,CAE3BA,CAAAA,CAAQ,OAAA,GACVS,CAAAA,CAAY,OAAA,CAAUT,EAAQ,OAAA,CAAA,CAE5BA,CAAAA,CAAQ,kBAAA,GAAuB,MAAA,GACjCS,CAAAA,CAAY,kBAAA,CAAqBT,CAAAA,CAAQ,kBAAA,CAAA,CAG3C,GAAI,CAEF,IAAMU,CAAAA,CAAW,MAAM,IAAA,CAAK,MAAA,CAAO,OAAA,CAAmBD,CAAW,EAGjE,OAAA,IAAA,CAAK,gBAAA,CAAiBlB,CAAAA,CAAUmB,CAAAA,CAAS,IAAI,CAAA,CAEtCA,CAAAA,CAAS,IAClB,CAAA,MAASC,CAAAA,CAAO,CAEd,MAAM,IAAA,CAAK,YAAA,CAAaA,CAAAA,CAAwBpB,CAAAA,CAAUgB,EAAaP,CAAO,CAChF,CACF,CAKQ,eAAA,CAAgBT,CAAAA,CAA8BC,CAAAA,CAA8C,GAAY,CAC9G,OAAON,CAAAA,CAAc,QAAA,CAASK,CAAAA,CAAUC,CAAU,CACpD,CAKQ,kBAAkBD,CAAAA,CAAsD,CAC9E,IAAMqB,CAAAA,CAAkC,EAAC,CAGrCrB,CAAAA,CAAS,WAAA,GACXqB,CAAAA,CAAQ,cAAc,CAAA,CAAIrB,CAAAA,CAAS,WAAA,CAAY,WAAA,CAAA,CAIjD,IAAMsB,CAAAA,CAAkBtB,EAAS,SAAA,CAAU,GAAK,CAAA,EAAKA,CAAAA,CAAS,SAAA,CAAU,GAAK,CAAA,CAC7E,OAAIsB,GAAiB,WAAA,GACnBD,CAAAA,CAAQ,MAAA,CAAYC,CAAAA,CAAgB,WAAA,CAAA,CAG/BD,CACT,CAKQ,eAAA,CAAgBE,EAAkC,CACxD,GAAM,CAAE,QAAA,CAAAvB,CAAAA,CAAU,SAAA,CAAAY,CAAAA,CAAW,IAAA,CAAAK,CAAAA,CAAM,UAAA,CAAAhB,CAAAA,CAAY,WAAA,CAAAuB,CAAY,CAAA,CAAID,CAAAA,CACzDE,CAAAA,CAAkE,EAAC,CAGzE,GAAIzB,CAAAA,CAAS,UAAA,EAAY,IAAA,CACvB,IAAA,GAAW,CAAC0B,CAAAA,CAAWC,CAAS,CAAA,GAAK,MAAA,CAAO,OAAA,CAAQ3B,CAAAA,CAAS,UAAA,CAAW,IAAI,CAAA,CAC1E,GAAI,CAACC,CAAAA,EAAc,EAAEyB,CAAAA,IAAazB,CAAAA,CAAAA,CAChCwB,CAAAA,CAAO,IAAA,CAAK,CACV,KAAA,CAAO,CAAA,KAAA,EAAQC,CAAS,CAAA,CAAA,CACxB,OAAA,CAAS,CAAA,yBAAA,EAA4BA,CAAS,CAAA,YAAA,CAAA,CAC9C,KAAM,oBACR,CAAC,CAAA,CAAA,KACI,CAEL,IAAMtB,CAAAA,CAAQH,CAAAA,CAAWyB,CAAS,EAC7B,IAAA,CAAK,qBAAA,CAAsBtB,CAAAA,CAAOuB,CAAS,CAAA,EAC9CF,CAAAA,CAAO,IAAA,CAAK,CACV,MAAO,CAAA,KAAA,EAAQC,CAAS,CAAA,CAAA,CACxB,OAAA,CAAS,CAAA,gBAAA,EAAmBA,CAAS,CAAA,kBAAA,EAAqBC,CAAS,CAAA,CAAA,CACnE,IAAA,CAAM,yBACR,CAAC,EAEL,CAcJ,GATI3B,CAAAA,CAAS,aAAa,QAAA,EAAY,CAACiB,CAAAA,EACrCQ,CAAAA,CAAO,IAAA,CAAK,CACV,KAAA,CAAO,MAAA,CACP,QAAS,0BAAA,CACT,IAAA,CAAM,cACR,CAAC,CAAA,CAICzB,CAAAA,CAAS,UAAA,EAAY,KAAA,EAASwB,EAChC,IAAA,GAAW,CAACE,CAAAA,CAAWC,CAAS,CAAA,GAAK,MAAA,CAAO,OAAA,CAAQ3B,CAAAA,CAAS,UAAA,CAAW,KAAK,CAAA,CAAG,CAC9E,IAAMI,CAAAA,CAAQoB,CAAAA,CAAYE,CAAS,EAC/BtB,CAAAA,GAAU,MAAA,EAAa,CAAC,IAAA,CAAK,qBAAA,CAAsBA,CAAAA,CAAOuB,CAAS,CAAA,EACrEF,EAAO,IAAA,CAAK,CACV,KAAA,CAAO,CAAA,MAAA,EAASC,CAAS,CAAA,CAAA,CACzB,OAAA,CAAS,CAAA,iBAAA,EAAoBA,CAAS,CAAA,kBAAA,EAAqBC,CAAS,CAAA,CAAA,CACpE,IAAA,CAAM,0BACR,CAAC,EAEL,CAGF,GAAIF,CAAAA,CAAO,MAAA,CAAS,CAAA,CAClB,MAAM,IAAId,CAAAA,CACR,CAAA,yCAAA,EAA4CC,CAAS,CAAA,CAAA,CAAA,CACrDA,CAAAA,CACAa,CACF,CAEJ,CAKQ,qBAAA,CAAsBrB,CAAAA,CAAgBwB,CAAAA,CAA+B,CAC3E,OAAQA,CAAAA,EACN,KAAK,QAAA,CACH,OAAO,OAAOxB,GAAU,QAAA,CAC1B,KAAK,SAAA,CACL,KAAK,QAAA,CACH,OAAO,OAAOA,CAAAA,EAAU,QAAA,EAAa,OAAOA,CAAAA,EAAU,QAAA,EAAY,CAAC,KAAA,CAAM,MAAA,CAAOA,CAAK,CAAC,CAAA,CACxF,KAAK,SAAA,CACH,OAAO,OAAOA,CAAAA,EAAU,SAAA,CAC1B,QACE,OAAO,KACX,CACF,CAKQ,gBAAA,CAAiBJ,CAAAA,CAA8BiB,CAAAA,CAAqB,CAEtEA,CAAAA,EAAS,OAEiB,MAAA,CAAO,IAAA,CAAKjB,CAAAA,CAAS,SAAS,CAAA,CAAE,IAAA,CAAKQ,CAAAA,EAC/DA,CAAAA,GAAS,KAAA,EAASR,CAAAA,CAAS,SAAA,CAAUQ,CAAI,CAAA,EAAG,WAAA,EAAa,WAAA,EAAY,CAAE,SAAS,YAAY,CAC9F,CAAA,EAGE,OAAA,CAAQ,IAAA,CAAK,CAAA,qCAAA,EAAwCR,CAAAA,CAAS,WAAW,EAAE,CAAA,EAGjF,CAKQ,YAAA,CACNoB,CAAAA,CACApB,CAAAA,CACAY,CAAAA,CACAiB,CAAAA,CACe,CAEf,IAAMC,CAAAA,CAAgB,IAAKV,CAAAA,CAAM,WAAA,CAC/BA,CAAAA,CAAM,OAAA,CACNA,CAAAA,CAAM,IAAA,CACN,CACE,SAAA,CAAWA,CAAAA,CAAM,SAAA,EAAapB,CAAAA,CAAS,WAAA,CACvC,SAAA,CAAWoB,CAAAA,CAAM,YAAc,MAAA,CAAYA,CAAAA,CAAM,SAAA,CAAYzB,CAAAA,CAAc,WAAA,CAAYK,CAAQ,CAAA,CAC/F,UAAA,CAAYoB,EAAM,UAAA,CAClB,SAAA,CAAWA,CAAAA,CAAM,SAAA,CACjB,SAAA,CAAW,CACT,GAAGA,CAAAA,CAAM,UAET,KAAA,CAAOpB,CAAAA,CAAS,QAAA,EAAU,QAAA,GAAa,gBAAA,CAAmB,MAAA,CAAO6B,CAAAA,CAAS,UAAA,EAAY,aAAA,EAAiB,EAAE,CAAA,CAAIT,CAAAA,CAAM,SAAA,EAAW,KAChI,CAAA,CACA,KAAA,CAAOA,EAAM,KACf,CACF,CAAA,CAGA,OAAA,MAAA,CAAO,cAAA,CAAeU,CAAAA,CAAe,iBAAA,CAAmB,CACtD,KAAA,CAAO,CACL,QAAA,CAAU9B,CAAAA,CAAS,QAAA,EAAU,QAAA,CAC7B,iBAAA,CAAmBY,CAAAA,CACnB,WAAYZ,CAAAA,CAAS,MAAA,CACrB,IAAA,CAAMA,CAAAA,CAAS,IACjB,CAAA,CACA,QAAA,CAAU,KAAA,CACV,UAAA,CAAY,KAAA,CACZ,YAAA,CAAc,KAChB,CAAC,CAAA,CAEM8B,CACT,CAKU,aAAaC,CAAAA,CAA+B,CACpD,OAAOA,CAAAA,IAAgB,IAAA,CAAK,SAC9B,CAKU,WAAA,CAAYA,EAAiD,CACrE,OAAO,IAAA,CAAK,SAAA,CAAUA,CAAY,CAAA,EAAK,IACzC,CAKU,wBAAmC,CAC3C,OAAO,MAAA,CAAO,IAAA,CAAK,IAAA,CAAK,SAAS,CACnC,CAKU,+BAAA,CAAgCnB,CAAAA,CAAoC,CAC5E,OAAO,IAAID,CAAAA,CACT,CAAA,WAAA,EAAcC,CAAS,sCACvB,uBAAA,CACA,CAAC,CACC,KAAA,CAAO,WAAA,CACP,OAAA,CAAS,CAAA,sBAAA,EAAyB,IAAA,CAAK,wBAAuB,CAAE,IAAA,CAAK,IAAI,CAAC,CAAA,CAAA,CAC1E,IAAA,CAAM,uBACR,CAAC,CACH,CACF,CAOA,OAAO,sBAAA,CAAuBa,CAAAA,CAAyE,CACrG,OAAOA,CAAAA,CAAO,GAAA,CAAIL,CAAAA,EAAS,CAAA,EAAGA,CAAAA,CAAM,KAAK,CAAA,EAAA,EAAKA,CAAAA,CAAM,OAAO,EAAE,CAAA,CAAE,IAAA,CAAK,IAAI,CAC1E,CAKA,OAAO,mBAAA,CAAoBA,CAAAA,CAAwD,CACjF,OAAIA,CAAAA,YAAiBT,CAAAA,CACZ,CACL,OAAA,CAASS,CAAAA,CAAM,OAAA,CACf,OAAA,CAASA,EAAM,UACjB,CAAA,CAGEA,CAAAA,YAAiB,KAAA,CACZ,CAAE,OAAA,CAASA,CAAAA,CAAM,OAAQ,CAAA,CAG3B,CAAE,OAAA,CAAS,wBAAyB,CAC7C,CAKA,OAAO,gBAAA,CAAiBA,EAA+B,CAErD,OAAIA,CAAAA,CAAM,IAAA,GAAS,cAAA,CACV,IAAA,CAILA,CAAAA,CAAM,UAAA,CACD,CAAC,GAAA,CAAK,GAAA,CAAK,GAAA,CAAK,GAAA,CAAK,GAAG,CAAA,CAAE,QAAA,CAASA,EAAM,UAAU,CAAA,CAGrDA,CAAAA,CAAM,SAAA,EAAa,KAC5B,CAKA,OAAO,aAAA,CAAcY,CAAAA,CAAuBC,CAAAA,CAAyB,CAKnE,IAAIC,CAAAA,CAAQ,IAAA,CAAK,GAAA,CAAI,GAAA,CAAY,KAAK,GAAA,CAAI,CAAA,CAAGD,CAAAA,CAAU,CAAC,CAAA,CAAG,GAAQ,CAAA,CAG7DE,CAAAA,CAASD,EAAQ,GAAA,CACvB,OAAAA,CAAAA,EAAAA,CAAU,IAAA,CAAK,MAAA,EAAO,CAAI,CAAA,CAAI,CAAA,EAAKC,EAE5B,IAAA,CAAK,KAAA,CAAMD,CAAK,CACzB,CACF,CAAA,CC9UO,IAAME,CAAAA,CAAN,MAAMC,CAAAA,SAA0BvB,CAAoB,CACzD,WAAA,CAAYwB,CAAAA,CAAoB,CAC9B,KAAA,CAAM,CACJ,MAAA,CAAAA,CAAAA,CACA,SAAA,CAAW,CACT,IAAA,CAAM7C,CAAAA,CAAkB,IAAA,CACxB,MAAA,CAAQA,EAAkB,MAAA,CAC1B,SAAA,CAAWA,CAAAA,CAAkB,WAAA,CAC7B,MAAA,CAAQA,CAAAA,CAAkB,MAC5B,CACF,CAAC,EACH,CAOA,MAAM,IAAA,EAAkC,CACtC,OAAO,IAAA,CAAK,cAAA,CAAuC,MAAA,CAAQ,MAAA,CAAW,CACpE,QAAA,CAAU,CACR,SAAA,CAAW,gBACb,CACF,CAAC,CACH,CASA,MAAM,MAAA,CACJwB,CAAAA,CACAR,CAAAA,CAAqC,EAAC,CACb,CAEzB,OAAA,MAAM,IAAA,CAAK,2BAAA,CAA4BQ,CAAAA,CAAMR,CAAO,CAAA,CAE7C,IAAA,CAAK,cAAA,CAAoD,SAAUQ,CAAAA,CAAM,CAC9E,QAAA,CAAU,CACR,SAAA,CAAW,iBAAA,CACX,QAAA,CAAUA,CAAAA,CAAK,SAAA,CACf,KAAA,CAAOA,CAAAA,CAAK,KAAA,CACZ,YAAA,CAAcA,CAAAA,CAAK,IACrB,CACF,CAAC,CACH,CAQA,MAAM,QAAA,CAASsB,CAAAA,CAA0D,CACvE,OAAO,IAAA,CAAK,cAAA,CAAqC,WAAA,CAAa,MAAA,CAAW,CACvE,UAAA,CAAY,CAAE,IAAA,CAAMA,CAAW,EAC/B,QAAA,CAAU,CACR,SAAA,CAAW,cAAA,CACX,UAAA,CAAAA,CACF,CACF,CAAC,CACH,CAUA,MAAM,MAAA,CACJA,CAAAA,CACAtB,CAAAA,CACAR,CAAAA,CAAqC,GACZ,CACzB,OAAA,MAAM,IAAA,CAAK,2BAAA,CAA4BQ,CAAAA,CAAMR,CAAO,CAAA,CAE7C,IAAA,CAAK,eAAoD,QAAA,CAAUQ,CAAAA,CAAM,CAC9E,UAAA,CAAY,CAAE,IAAA,CAAMsB,CAAW,CAAA,CAC/B,SAAU,CACR,SAAA,CAAW,iBAAA,CACX,UAAA,CAAAA,CAAAA,CACA,YAAA,CAActB,CAAAA,CAAK,IACrB,CACF,CAAC,CACH,CAQA,MAAM,YAAA,CAAasB,CAAAA,CAA6D,CAC9E,IAAMC,CAAAA,CAAW,MAAM,IAAA,CAAK,QAAA,CAASD,CAAU,CAAA,CAC/C,OAAOF,CAAAA,CAAkB,uBAAuBG,CAAQ,CAC1D,CAQA,MAAM,eAAA,CAAgBC,CAAAA,CAAwG,CAC5H,OAAOJ,EAAkB,sBAAA,CAAuBI,CAAO,CACzD,CAOA,MAAc,2BAAA,CACZxB,CAAAA,CACAR,CAAAA,CAAqC,EAAC,CACvB,CACf,IAAMgB,CAAAA,CAAkE,EAAC,CAGzE,GAAI,CAACR,CAAAA,CAAK,SAAA,CACRQ,CAAAA,CAAO,IAAA,CAAK,CACV,KAAA,CAAO,WAAA,CACP,OAAA,CAAS,wBACT,IAAA,CAAM,UACR,CAAC,CAAA,CAAA,KAAA,GACQhB,CAAAA,CAAQ,iBAAA,CAAmB,CACpC,IAAMiC,EAAgB,MAAM,IAAA,CAAK,wBAAA,CAAyBzB,CAAAA,CAAK,SAAS,CAAA,CACnEyB,CAAAA,CAAc,OAAA,EACjBjB,CAAAA,CAAO,IAAA,CAAK,CACV,KAAA,CAAO,WAAA,CACP,OAAA,CAASiB,CAAAA,CAAc,KAAA,EAAS,6BAChC,IAAA,CAAM,oBACR,CAAC,EAEL,CAEA,GAAI,CAACzB,CAAAA,CAAK,IAAA,EAAQA,CAAAA,CAAK,IAAA,CAAK,IAAA,EAAK,CAAE,MAAA,GAAW,CAAA,CAC5CQ,CAAAA,CAAO,KAAK,CACV,KAAA,CAAO,MAAA,CACP,OAAA,CAAS,2BAAA,CACT,IAAA,CAAM,UACR,CAAC,CAAA,CAAA,KACI,CACL,IAAMkB,CAAAA,CAAiB,IAAA,CAAK,oBAAA,CAAqB1B,CAAAA,CAAK,IAAI,EACrD0B,CAAAA,CAAe,OAAA,EAClBlB,CAAAA,CAAO,IAAA,CAAK,CACV,KAAA,CAAO,MAAA,CACP,OAAA,CAASkB,EAAe,KAAA,EAAS,uBAAA,CACjC,IAAA,CAAM,uBACR,CAAC,EAEL,CAgBA,GAdK1B,EAAK,KAAA,CAME,IAAA,CAAK,YAAA,CAAaA,CAAAA,CAAK,KAAK,CAAA,EACtCQ,CAAAA,CAAO,IAAA,CAAK,CACV,KAAA,CAAO,OAAA,CACP,OAAA,CAAS,sBAAA,CACT,IAAA,CAAM,eACR,CAAC,EAVDA,CAAAA,CAAO,IAAA,CAAK,CACV,KAAA,CAAO,OAAA,CACP,OAAA,CAAS,mBAAA,CACT,IAAA,CAAM,UACR,CAAC,CAAA,CASC,CAACR,CAAAA,CAAK,QAAA,CACRQ,CAAAA,CAAO,IAAA,CAAK,CACV,MAAO,UAAA,CACP,OAAA,CAAS,sBAAA,CACT,IAAA,CAAM,UACR,CAAC,CAAA,CAAA,KACI,CACL,IAAMmB,CAAAA,CAAqB,IAAA,CAAK,gBAAA,CAAiB3B,CAAAA,CAAK,QAAQ,CAAA,CACzD2B,CAAAA,CAAmB,SACtBnB,CAAAA,CAAO,IAAA,CAAK,CACV,KAAA,CAAO,UAAA,CACP,OAAA,CAASmB,CAAAA,CAAmB,KAAA,EAAS,sCACrC,IAAA,CAAM,eACR,CAAC,EAEL,CAGA,GAAI3B,CAAAA,CAAK,OAAA,EAAWR,EAAQ,wBAAA,CAA0B,CACpD,IAAMoC,CAAAA,CAAoB,MAAMR,CAAAA,CAAkB,sBAAA,CAAuBpB,CAAAA,CAAK,OAAO,CAAA,CAChF4B,CAAAA,CAAkB,OAAA,EACrBpB,CAAAA,CAAO,IAAA,CAAK,GAAGoB,CAAAA,CAAkB,OAAO,GAAA,CAAIzB,CAAAA,GAAU,CACpD,KAAA,CAAO,SAAA,CACP,OAAA,CAASA,CAAAA,CACT,IAAA,CAAM,iBACR,CAAA,CAAE,CAAC,EAEP,CAEA,GAAIK,CAAAA,CAAO,MAAA,CAAS,EAClB,MAAM,IAAId,CAAAA,CAAgB,+BAAA,CAAiC,iBAAA,CAAmBc,CAAM,CAExF,CAKA,MAAc,2BAAA,CACZR,CAAAA,CACAR,CAAAA,CAAqC,EAAC,CACvB,CACf,IAAMgB,EAAkE,EAAC,CAGzE,GAAI,CAACR,CAAAA,CAAK,IAAA,EAAQA,CAAAA,CAAK,IAAA,CAAK,MAAK,CAAE,MAAA,GAAW,CAAA,CAC5CQ,CAAAA,CAAO,IAAA,CAAK,CACV,KAAA,CAAO,MAAA,CACP,QAAS,2BAAA,CACT,IAAA,CAAM,UACR,CAAC,CAAA,CAAA,KACI,CACL,IAAMkB,CAAAA,CAAiB,IAAA,CAAK,oBAAA,CAAqB1B,CAAAA,CAAK,IAAI,CAAA,CACrD0B,CAAAA,CAAe,OAAA,EAClBlB,CAAAA,CAAO,KAAK,CACV,KAAA,CAAO,MAAA,CACP,OAAA,CAASkB,CAAAA,CAAe,KAAA,EAAS,uBAAA,CACjC,IAAA,CAAM,uBACR,CAAC,EAEL,CAGA,GAAI1B,CAAAA,CAAK,OAAA,EAAWR,CAAAA,CAAQ,wBAAA,CAA0B,CACpD,IAAMoC,CAAAA,CAAoB,MAAMR,CAAAA,CAAkB,sBAAA,CAAuBpB,CAAAA,CAAK,OAAO,CAAA,CAChF4B,CAAAA,CAAkB,OAAA,EACrBpB,CAAAA,CAAO,IAAA,CAAK,GAAGoB,CAAAA,CAAkB,MAAA,CAAO,GAAA,CAAIzB,IAAU,CACpD,KAAA,CAAO,SAAA,CACP,OAAA,CAASA,CAAAA,CACT,IAAA,CAAM,iBACR,CAAA,CAAE,CAAC,EAEP,CAEA,GAAIK,CAAAA,CAAO,MAAA,CAAS,CAAA,CAClB,MAAM,IAAId,EAAgB,+BAAA,CAAiC,iBAAA,CAAmBc,CAAM,CAExF,CAKA,MAAc,wBAAA,CAAyBqB,CAAAA,CAAkE,CACvG,OAAKT,CAAAA,CAAkB,uBAAA,CAAwBS,CAAS,CAAA,CAMjD,CAAE,OAAA,CAAS,IAAK,CAAA,CALd,CAAE,OAAA,CAAS,KAAA,CAAO,KAAA,CAAO,+CAAgD,CAMpF,CAKQ,oBAAA,CAAqBC,CAAAA,CAAoD,CAC/E,OAAIA,CAAAA,CAAK,MAAA,CAAS,GAAA,CACT,CAAE,QAAS,KAAA,CAAO,KAAA,CAAO,4CAA6C,CAAA,CAG1E,oBAAA,CAAqB,IAAA,CAAKA,CAAI,CAAA,EAK/B,sBAAA,CAAuB,IAAA,CAAKA,CAAI,CAAA,EAClC,OAAA,CAAQ,IAAA,CAAK,CAAA,yCAAA,EAA4CA,CAAI,EAAE,CAAA,CAG1D,CAAE,OAAA,CAAS,IAAK,CAAA,EARd,CAAE,OAAA,CAAS,KAAA,CAAO,MAAO,2CAA4C,CAShF,CAKQ,gBAAA,CAAiBC,CAAAA,CAAwD,CAC/E,OAAIA,CAAAA,CAAS,OAAS,CAAA,CACb,CAAE,OAAA,CAAS,KAAA,CAAO,KAAA,CAAO,6CAA8C,CAAA,CAG3E,iCAAA,CAAkC,IAAA,CAAKA,CAAQ,CAAA,CAI7C,CAAE,OAAA,CAAS,IAAK,CAAA,CAHd,CAAE,QAAS,KAAA,CAAO,KAAA,CAAO,oEAAqE,CAIzG,CAKQ,YAAA,CAAaC,CAAAA,CAAwB,CAE3C,OADmB,4BAAA,CACD,IAAA,CAAKA,CAAK,CAC9B,CAOA,OAAO,uBAAA,CAAwBH,CAAAA,CAA4B,CAEzD,GAAI,CAAC,UAAA,CAAW,IAAA,CAAKA,CAAS,CAAA,CAC5B,OAAO,MAAA,CAIT,IAAII,CAAAA,CAAM,CAAA,CACV,IAAA,IAASC,CAAAA,CAAI,CAAA,CAAGA,CAAAA,CAAI,EAAA,CAAIA,IAAK,CAC3B,IAAIC,CAAAA,CAAQ,QAAA,CAASN,CAAAA,CAAUK,CAAC,CAAA,CAAI,EAAE,EAClCA,CAAAA,CAAI,CAAA,GAAM,CAAA,GACZC,CAAAA,EAAS,CAAA,CACLA,CAAAA,CAAQ,CAAA,GACVA,CAAAA,CAAQ,KAAK,KAAA,CAAMA,CAAAA,CAAQ,EAAE,CAAA,CAAKA,CAAAA,CAAQ,EAAA,CAAA,CAAA,CAG9CF,CAAAA,EAAOE,EACT,CAGA,OAAA,CADoB,EAAA,CAAMF,CAAAA,CAAM,EAAA,EAAO,EAAA,GACjB,QAAA,CAASJ,CAAAA,CAAU,EAAE,CAAA,CAAI,EAAE,CACnD,CAKA,OAAO,cAAA,CAAeO,CAAAA,CAAqC,CAEzD,OAAOA,CAAAA,CAAS,OAAA,CAAQ,uBAAA,CAAyB,UAAU,CAC7D,CAKA,aAAa,uBAAuBZ,CAAAA,CAAwG,CAC1I,IAAMhB,CAAAA,CAAmB,EAAC,CACpB6B,CAAAA,CAAwB,EAAC,CAM/B,GAAA,CAJI,CAACb,CAAAA,CAAQ,cAAA,EAAkBA,CAAAA,CAAQ,cAAA,CAAe,IAAA,GAAO,MAAA,GAAW,CAAA,GACtEhB,CAAAA,CAAO,IAAA,CAAK,4BAA4B,CAAA,CAGtC,CAACgB,CAAAA,CAAQ,UAAY,CAAC,SAAA,CAAU,IAAA,CAAKA,CAAAA,CAAQ,QAAQ,CAAA,CACvDhB,CAAAA,CAAO,IAAA,CAAK,mCAAmC,CAAA,CAAA,KAC1C,CAEL,IAAM8B,CAAAA,CAAU,QAAA,CAASd,CAAAA,CAAQ,QAAA,CAAU,EAAE,CAAA,CAAA,CACzCc,CAAAA,CAAU,GAAA,EAASA,CAAAA,CAAU,KAAA,GAC/B9B,CAAAA,CAAO,IAAA,CAAK,mCAAmC,EAEnD,CAAA,CAEI,CAACgB,CAAAA,CAAQ,IAAA,EAAQA,CAAAA,CAAQ,IAAA,CAAK,IAAA,EAAK,CAAE,SAAW,CAAA,GAClDhB,CAAAA,CAAO,IAAA,CAAK,kBAAkB,CAAA,CAG5B,CAACgB,CAAAA,CAAQ,QAAA,EAAYA,EAAQ,QAAA,CAAS,MAAA,GAAW,CAAA,CACnDhB,CAAAA,CAAO,IAAA,CAAK,uCAAuC,CAAA,CAG5B,CACrtF,CAAA,CAEoB,QAAA,CAASgB,EAAQ,QAAA,CAAS,WAAA,EAAa,CAAA,GACzDhB,CAAAA,CAAO,IAAA,CAAK,+BAA+B,CAAA,CAC3C6B,EAAY,IAAA,CAAK,4EAA4E,CAAA,CAAA,CAIjG,IAAME,CAAAA,CAAU/B,CAAAA,CAAO,MAAA,GAAW,CAAA,CAC5BgC,EAAmBD,CAAAA,CACvB,CAAA,EAAGf,CAAAA,CAAQ,cAAc,CAAA,EAAA,EAAKA,CAAAA,CAAQ,QAAQ,CAAA,CAAA,EAAIA,CAAAA,CAAQ,IAAI,CAAA,EAAA,EAAKA,CAAAA,CAAQ,QAAA,CAAS,WAAA,EAAa,CAAA,CAAA,CAAA,CACjG,OAEF,OAAO,CACL,OAAA,CAAAe,CAAAA,CACA,MAAA,CAAA/B,CAAAA,CACA,WAAA,CAAA6B,CAAAA,CACA,iBAAAG,CACF,CACF,CAKA,OAAO,sBAAA,CAAuBjB,CAAAA,CAA6C,CACzE,IAAMkB,EAA0B,EAAC,CAC3BC,CAAAA,CAA4B,EAAC,CAC/BC,CAAAA,CAAoB,CAAA,CAClBC,CAAAA,CAAc,CAAA,CAGhBrB,CAAAA,CAAS,SAAA,CAAWoB,CAAAA,EAAAA,CACnBF,CAAAA,CAAc,IAAA,CAAK,WAAW,CAAA,CAE/BlB,EAAS,IAAA,CAAMoB,CAAAA,EAAAA,CACdF,CAAAA,CAAc,IAAA,CAAK,MAAM,CAAA,CAE1BlB,CAAAA,CAAS,KAAA,CAAOoB,CAAAA,EAAAA,CACfF,CAAAA,CAAc,IAAA,CAAK,OAAO,CAAA,CAE3BlB,CAAAA,CAAS,OAAA,EACXoB,CAAAA,EAAAA,CAEKpB,EAAS,OAAA,CAAQ,cAAA,GACpBkB,CAAAA,CAAc,IAAA,CAAK,wBAAwB,CAAA,CAC3CC,CAAAA,CAAgB,IAAA,CAAK,kDAAkD,CAAA,CAAA,CAEpEnB,CAAAA,CAAS,OAAA,CAAQ,QAAA,EACpBkB,CAAAA,CAAc,IAAA,CAAK,kBAAkB,EAElClB,CAAAA,CAAS,OAAA,CAAQ,IAAA,EACpBkB,CAAAA,CAAc,IAAA,CAAK,cAAc,CAAA,CAE9BlB,CAAAA,CAAS,QAAQ,QAAA,EACpBkB,CAAAA,CAAc,IAAA,CAAK,kBAAkB,CAAA,GAGvCA,CAAAA,CAAc,IAAA,CAAK,SAAS,EAC5BC,CAAAA,CAAgB,IAAA,CAAK,oDAAoD,CAAA,CAAA,CAK3E,IAAMG,CAAAA,CAAmB,IAAI,IAAA,EAAK,CAAE,WAAA,EAAY,CAC1CC,CAAAA,CAAc,IAAA,CAAK,KAAA,CAAA,CAAO,IAAA,CAAK,GAAA,GAAQ,IAAI,IAAA,CAAKD,CAAgB,CAAA,CAAE,OAAA,EAAQ,GAAM,GAAA,CAAO,EAAA,CAAK,GAAK,EAAA,CAAG,CAAA,CAGtGF,CAAAA,CAAoBC,CAAAA,EACtBF,CAAAA,CAAgB,IAAA,CAAK,4CAA4C,CAAA,CAKnEA,EAAgB,IAAA,CAAK,oDAAoD,CAAA,CACzEA,CAAAA,CAAgB,IAAA,CAAK,8CAA8C,CAAA,CAGnE,IAAIK,CAAAA,CAA8D,WAAA,CAClE,OAAIN,CAAAA,CAAc,MAAA,CAAS,CAAA,GACzBM,CAAAA,CAAmBN,CAAAA,CAAc,OAAS,CAAA,CAAI,eAAA,CAAkB,SAAA,CAAA,CAG3D,CACL,gBAAA,CAAAI,CAAAA,CACA,WAAA,CAAAC,CAAAA,CACA,kBAAmB,IAAA,CAAK,KAAA,CAAOH,CAAAA,CAAoBC,CAAAA,CAAe,GAAG,CAAA,CACrE,aAAA,CAAAH,CAAAA,CACA,gBAAAC,CAAAA,CACA,gBAAA,CAAAK,CACF,CACF,CAKA,OAAO,uBAAA,CAAwBxB,CAAAA,CAAkC,CAC/D,IAAMyB,CAAAA,CAAczB,CAAAA,CAAS,OAAA,CACzB,CAAA,GAAA,EAAMA,CAAAA,CAAS,OAAA,CAAQ,IAAI,CAAA,EAAA,EAAKA,CAAAA,CAAS,OAAA,CAAQ,QAAQ,CAAA,CAAA,CACzD,EAAA,CAEJ,OAAO,CAAA,EAAGA,CAAAA,CAAS,IAAI,CAAA,OAAA,EAAU,IAAA,CAAK,cAAA,CAAeA,CAAAA,CAAS,SAAA,EAAa,EAAE,CAAC,CAAA,CAAA,EAAIyB,CAAW,CAAA,CAC/F,CAKA,OAAO,mBAAA,CAAoBlB,CAAAA,CAAuB,CAChD,OAAO,OAAOA,CAAAA,EAAS,QAAA,EAChBA,CAAAA,CAAK,IAAA,EAAK,CAAE,MAAA,CAAS,GACrBA,CAAAA,CAAK,MAAA,EAAU,GAAA,EACf,oBAAA,CAAqB,IAAA,CAAKA,CAAI,CACvC,CAKA,OAAO,qBAAA,CAAsBA,CAAAA,CAAsB,CACjD,OAAOA,CAAAA,CACJ,IAAA,EAAK,CACL,OAAA,CAAQ,OAAQ,GAAG,CAAA,CACnB,OAAA,CAAQ,MAAA,CAAQmB,CAAAA,EAAKA,CAAAA,CAAE,WAAA,EAAa,CACzC,CAKA,OAAO,eAAA,CAAgB1B,CAAAA,CAAyC,CAC9D,OAAOA,CAAAA,CAAS,SAAS,QAAA,EAAY,IACvC,CAKA,OAAO,UAAA,CAAWA,CAAAA,CAA0B2B,CAAAA,CAAoC,CAC9E,IAAMC,CAAAA,CAAW,IAAA,CAAK,eAAA,CAAgB5B,CAAQ,CAAA,CAC9C,OAAO4B,CAAAA,CAAWD,CAAAA,CAAgB,SAASC,CAAAA,CAAS,WAAA,EAAa,CAAA,CAAI,KACvE,CAKA,OAAO,iBAAA,EAA8C,CACnD,OAAO,CACL,gBAAA,CAAkB,CAAC,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,KAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,KAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,KAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,KAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAI,CAAA,CACjT,eAAA,CAAiB,CAAC,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,KAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,KAAM,IAAA,CAAM,IAAA,CAAM,IAAI,CAAA,CACtK,gBAAA,CAAkB,CAAC,IAAA,CAAM,IAAA,CAAM,KAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,KAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAI,CAAA,CACnI,OAAA,CAAW,CAAC,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,KAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,IAAA,CAAM,KAAM,IAAI,CAClH,CACF,CAKA,OAAO,iBAAA,CAAkB5B,CAAAA,CAAyC,CAChE,IAAM4B,CAAAA,CAAW,IAAA,CAAK,eAAA,CAAgB5B,CAAQ,CAAA,CAC9C,GAAI,CAAC4B,CAAAA,CAAU,OAAO,IAAA,CAEtB,IAAMC,CAAAA,CAAU,IAAA,CAAK,iBAAA,EAAkB,CACvC,IAAA,GAAW,CAACC,CAAAA,CAAQC,CAAS,CAAA,GAAK,MAAA,CAAO,OAAA,CAAQF,CAAO,CAAA,CACtD,GAAIE,EAAU,QAAA,CAASH,CAAAA,CAAS,WAAA,EAAa,CAAA,CAC3C,OAAOE,CAAAA,CAIX,OAAO,IACT,CACF","file":"merchants.cjs","sourcesContent":["/**\n * Generated Endpoint Definitions from OpenAPI Specification\n * Comprehensive endpoint configurations for all API resources\n * \n * This file is auto-generated based on openapi.yaml\n * Do not edit manually - use regeneration scripts instead\n */\n\nexport type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n\nexport interface EndpointDefinition {\n  path: string;\n  method: HttpMethod;\n  operationId: string;\n  summary?: string;\n  description?: string;\n  tags: string[];\n  security?: Array<Record<string, string[]>>;\n  parameters?: {\n    path?: Record<string, string>;\n    query?: Record<string, string>;\n    header?: Record<string, string>;\n  };\n  requestBody?: {\n    required: boolean;\n    contentType: string;\n    schema: string;\n  };\n  responses: {\n    [statusCode: string]: {\n      description: string;\n      contentType?: string;\n      schema?: string;\n    };\n  };\n  metadata?: {\n    resource: string;\n    operation: string;\n    authRequired: boolean;\n    retryable: boolean;\n  };\n}\n\n/**\n * Cashier Endpoints - User account management for cashiers\n */\nexport class CashierEndpoints {\n  static readonly LIST: EndpointDefinition = {\n    path: '/mf1/cashiers',\n    method: 'GET',\n    operationId: 'read_cashiers_mf1_cashiers_get',\n    summary: 'Read Cashiers',\n    description: 'Get a paginated list of cashiers',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      query: {\n        page: 'integer',\n        size: 'integer'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_Page__T_Customized_CashierOutput_'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly CREATE: EndpointDefinition = {\n    path: '/mf1/cashiers',\n    method: 'POST',\n    operationId: 'create_cashier_mf1_cashiers_post',\n    summary: 'Create Cashier',\n    description: 'Create a new cashier account',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_CashierCreateInput'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashierOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'create',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly ME: EndpointDefinition = {\n    path: '/mf1/cashiers/me',\n    method: 'GET',\n    operationId: 'read_cashier_me_mf1_cashiers_me_get',\n    summary: 'Read Cashier Me',\n    description: 'Read currently authenticated cashier\\'s information',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashierOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'me',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly GET_BY_ID: EndpointDefinition = {\n    path: '/mf1/cashiers/{cashier_id}',\n    method: 'GET',\n    operationId: 'read_cashier_by_id_mf1_cashiers__cashier_id__get',\n    summary: 'Read Cashier By Id',\n    description: 'Get a specific user by id',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        cashier_id: 'integer'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashierOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly DELETE: EndpointDefinition = {\n    path: '/mf1/cashiers/{cashier_id}',\n    method: 'DELETE',\n    operationId: 'delete_cashier_mf1_cashiers__cashier_id__delete',\n    summary: 'Delete Cashier',\n    description: 'Delete a cashier',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        cashier_id: 'integer'\n      }\n    },\n    responses: {\n      '204': {\n        description: 'Successful Response'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'delete',\n      authRequired: true,\n      retryable: false\n    }\n  };\n}\n\n/**\n * Point of Sales Endpoints - PEM device management\n */\nexport class PointOfSalesEndpoints {\n  static readonly LIST: EndpointDefinition = {\n    path: '/mf1/point-of-sales',\n    method: 'GET',\n    operationId: 'read_point_of_sales_mf1_point_of_sales_get',\n    summary: 'Read Point Of Sales',\n    description: 'Retrieve PEMs',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_Page__T_Customized_PointOfSaleOutput_'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly GET_BY_SERIAL: EndpointDefinition = {\n    path: '/mf1/point-of-sales/{serial_number}',\n    method: 'GET',\n    operationId: 'read_point_of_sale_mf1_point_of_sales__serial_number__get',\n    summary: 'Read Point Of Sale',\n    description: 'Get a specific Point of Sale by serial number',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        serial_number: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_PointOfSaleOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly CLOSE_JOURNAL: EndpointDefinition = {\n    path: '/mf1/point-of-sales/close',\n    method: 'POST',\n    operationId: 'close_journal_mf1_point_of_sales_close_post',\n    summary: 'Close Journal',\n    description: 'Close the daily journal for Point of Sales',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_CloseJournalRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CloseJournalOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'close_journal',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly ACTIVATION: EndpointDefinition = {\n    path: '/mf1/point-of-sales/{serial_number}/activation',\n    method: 'POST',\n    operationId: 'post_activation_mf1_point_of_sales__serial_number__activation_post',\n    summary: 'Post Activation',\n    description: 'Trigger the activation process of a Point of Sale by requesting a certificate to the Italian Tax Agency',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        serial_number: 'string'\n      }\n    },\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_ActivationRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ActivationOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'activation',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly CREATE_INACTIVITY: EndpointDefinition = {\n    path: '/mf1/point-of-sales/{serial_number}/inactivity',\n    method: 'POST',\n    operationId: 'create_inactivity_period_mf1_point_of_sales__serial_number__inactivity_post',\n    summary: 'Create Inactivity Period',\n    description: 'Create a new inactivity period',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        serial_number: 'string'\n      }\n    },\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_InactivityRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'create_inactivity',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly SET_OFFLINE: EndpointDefinition = {\n    path: '/mf1/point-of-sales/{serial_number}/status/offline',\n    method: 'POST',\n    operationId: 'post_offline_mf1_point_of_sales__serial_number__status_offline_post',\n    summary: 'Post Offline',\n    description: 'Change the state of the Point of Sale to \\'offline\\'',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        serial_number: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'set_offline',\n      authRequired: true,\n      retryable: false\n    }\n  };\n}\n\n/**\n * Receipt Endpoints - Electronic receipt management\n */\nexport class ReceiptEndpoints {\n  static readonly LIST: EndpointDefinition = {\n    path: '/mf1/receipts',\n    method: 'GET',\n    operationId: 'get_receipts_mf1_receipts_get',\n    summary: 'Get Receipts',\n    description: 'Get a list of electronic receipts',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      query: {\n        page: 'integer',\n        size: 'integer',\n        start_date: 'string',\n        end_date: 'string',\n        serial_number: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_Page__T_Customized_ReceiptOutput_'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly CREATE: EndpointDefinition = {\n    path: '/mf1/receipts',\n    method: 'POST',\n    operationId: 'create_receipt_mf1_receipts_post',\n    summary: 'Create Receipt',\n    description: 'Create a new electronic receipt',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_ReceiptInput'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'create',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly VOID: EndpointDefinition = {\n    path: '/mf1/receipts',\n    method: 'DELETE',\n    operationId: 'void_receipt_mf1_receipts_delete',\n    summary: 'Void Receipt',\n    description: 'Void an electronic receipt',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_VoidReceiptRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_VoidReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'void',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly GET_BY_UUID: EndpointDefinition = {\n    path: '/mf1/receipts/{receipt_uuid}',\n    method: 'GET',\n    operationId: 'get_receipt_mf1_receipts__receipt_uuid__get',\n    summary: 'Get Receipt',\n    description: 'Get an electronic receipt',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        receipt_uuid: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly VOID_WITH_PROOF: EndpointDefinition = {\n    path: '/mf1/receipts/void-with-proof',\n    method: 'DELETE',\n    operationId: 'void_receipt_via_proof_mf1_receipts_void_with_proof_delete',\n    summary: 'Void Receipt Via Proof',\n    description: 'Void an electronic receipt identified by a proof of purchase',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_VoidReceiptWithProofRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_VoidReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'void_with_proof',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly GET_DETAILS: EndpointDefinition = {\n    path: '/mf1/receipts/{receipt_uuid}/details',\n    method: 'GET',\n    operationId: 'get_receipt_details_mf1_receipts__receipt_uuid__details_get',\n    summary: 'Get Receipt Details',\n    description: 'Get the details or the PDF of an electronic receipt',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        receipt_uuid: 'string'\n      },\n      header: {\n        Accept: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'get_details',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly RETURN_ITEMS: EndpointDefinition = {\n    path: '/mf1/receipts/return',\n    method: 'POST',\n    operationId: 'return_receipt_items_mf1_receipts_return_post',\n    summary: 'Return Receipt Items',\n    description: 'Return items from an electronic receipt (same PEM or other PEM)',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_ReturnRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'return_items',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly RETURN_ITEMS_WITH_PROOF: EndpointDefinition = {\n    path: '/mf1/receipts/return-with-proof',\n    method: 'POST',\n    operationId: 'return_receipt_items_via_proof_mf1_receipts_return_with_proof_post',\n    summary: 'Return Receipt Items Via Proof',\n    description: 'Return items from an electronic receipt identified by a proof of purchase',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_ReturnWithProofRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'return_items_with_proof',\n      authRequired: true,\n      retryable: false\n    }\n  };\n}\n\n/**\n * Cash Register Endpoints - Cash register management\n */\nexport class CashRegisterEndpoints {\n  static readonly CREATE: EndpointDefinition = {\n    path: '/mf1/cash-register',\n    method: 'POST',\n    operationId: 'create_cash_register_mf1_cash_register_post',\n    summary: 'Create Cash Register',\n    description: 'Create a new cash register',\n    tags: ['Cash Register'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_CashRegisterInput'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashRegisterOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cash-registers',\n      operation: 'create',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly LIST: EndpointDefinition = {\n    path: '/mf1/cash-register',\n    method: 'GET',\n    operationId: 'get_cash_registers_mf1_cash_register_get',\n    summary: 'Get Cash Registers',\n    description: 'Get a list of cash registers',\n    tags: ['Cash Register'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_Page__T_Customized_CashRegisterOutput_'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'cash-registers',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly GET_BY_ID: EndpointDefinition = {\n    path: '/mf1/cash-register/{id}',\n    method: 'GET',\n    operationId: 'get_cash_register_mf1_cash_register__id__get',\n    summary: 'Get Cash Register',\n    description: 'Get a specific cash register by ID',\n    tags: ['Cash Register'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        id: 'integer'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashRegisterOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'cash-registers',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n}\n\n/**\n * Merchant Endpoints - Business entity management\n */\nexport class MerchantEndpoints {\n  static readonly LIST: EndpointDefinition = {\n    path: '/merchants',\n    method: 'GET',\n    operationId: 'api_merchants_get_collection',\n    summary: 'Get Merchants',\n    description: 'Get a list of merchants',\n    tags: ['Merchant'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'merchants',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly CREATE: EndpointDefinition = {\n    path: '/merchants',\n    method: 'POST',\n    operationId: 'api_merchants_post',\n    summary: 'Create Merchant',\n    description: 'Create a new merchant',\n    tags: ['Merchant'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'Merchant-create'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'Merchant-read'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'merchants',\n      operation: 'create',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly GET_BY_UUID: EndpointDefinition = {\n    path: '/merchants/{uuid}',\n    method: 'GET',\n    operationId: 'api_merchants_uuid_get',\n    summary: 'Get Merchant',\n    description: 'Get a specific merchant by UUID',\n    tags: ['Merchant'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        uuid: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'Merchant-read'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'merchants',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly UPDATE: EndpointDefinition = {\n    path: '/merchants/{uuid}',\n    method: 'PUT',\n    operationId: 'api_merchants_uuid_put',\n    summary: 'Update Merchant',\n    description: 'Update a merchant',\n    tags: ['Merchant'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        uuid: 'string'\n      }\n    },\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'Merchant-update'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'Merchant-read'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'merchants',\n      operation: 'update',\n      authRequired: true,\n      retryable: false\n    }\n  };\n}\n\n/**\n * PEM Endpoints - Point of Sale Module certificate management\n */\nexport class PEMEndpoints {\n  static readonly CREATE_POS: EndpointDefinition = {\n    path: '/point-of-sales',\n    method: 'POST',\n    operationId: 'api_point-of-sales_post',\n    summary: 'Create Point of Sale',\n    description: 'Create a new Point of Sale',\n    tags: ['Pem'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'PointOfSale-create'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'PointOfSale-read'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'pems',\n      operation: 'create_pos',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly GET_CERTIFICATES: EndpointDefinition = {\n    path: '/point-of-sales/{id}/certificates',\n    method: 'GET',\n    operationId: 'api_point-of-sales_idcertificates_get',\n    summary: 'Get PEM Certificates',\n    description: 'Get certificates for a Point of Sale',\n    tags: ['Pem'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        id: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'pems',\n      operation: 'get_certificates',\n      authRequired: true,\n      retryable: true\n    }\n  };\n}\n\n/**\n * Utility class for endpoint operations\n */\nexport class EndpointUtils {\n  /**\n   * Get all endpoints for a specific resource\n   */\n  static getResourceEndpoints(resource: string): EndpointDefinition[] {\n    switch (resource.toLowerCase()) {\n      case 'cashiers':\n        return Object.values(CashierEndpoints);\n      case 'point-of-sales':\n        return Object.values(PointOfSalesEndpoints);\n      case 'receipts':\n        return Object.values(ReceiptEndpoints);\n      case 'cash-registers':\n        return Object.values(CashRegisterEndpoints);\n      case 'merchants':\n        return Object.values(MerchantEndpoints);\n      case 'pems':\n        return Object.values(PEMEndpoints);\n      default:\n        return [];\n    }\n  }\n\n  /**\n   * Find endpoint by operation ID\n   */\n  static findEndpointByOperationId(operationId: string): EndpointDefinition | null {\n    const allClasses = [\n      CashierEndpoints,\n      PointOfSalesEndpoints,\n      ReceiptEndpoints,\n      CashRegisterEndpoints,\n      MerchantEndpoints,\n      PEMEndpoints,\n    ];\n\n    for (const endpointClass of allClasses) {\n      for (const endpoint of Object.values(endpointClass)) {\n        if (endpoint.operationId === operationId) {\n          return endpoint;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Build URL with path parameters\n   */\n  static buildUrl(endpoint: EndpointDefinition, pathParams: Record<string, string | number> = {}): string {\n    let url = endpoint.path;\n    \n    for (const [key, value] of Object.entries(pathParams)) {\n      url = url.replace(`{${key}}`, String(value));\n    }\n    \n    return url;\n  }\n\n  /**\n   * Check if endpoint requires authentication\n   */\n  static requiresAuth(endpoint: EndpointDefinition): boolean {\n    return endpoint.metadata?.authRequired ?? false;\n  }\n\n  /**\n   * Check if endpoint operation is retryable\n   */\n  static isRetryable(endpoint: EndpointDefinition): boolean {\n    return endpoint.metadata?.retryable ?? false;\n  }\n\n  /**\n   * Get expected content type for request body\n   */\n  static getRequestContentType(endpoint: EndpointDefinition): string | null {\n    return endpoint.requestBody?.contentType ?? null;\n  }\n\n  /**\n   * Get expected response content type\n   */\n  static getResponseContentType(endpoint: EndpointDefinition, statusCode: string): string | null {\n    return endpoint.responses[statusCode]?.contentType ?? null;\n  }\n}","/**\n * Enterprise-grade error handling system\n * Hierarchical error types with retry logic and audit information\n */\n\n// Base error class with audit information\nexport abstract class ACubeSDKError extends Error {\n  public readonly timestamp: Date;\n  public readonly requestId: string;\n  public readonly operation: string;\n  public readonly retryable: boolean;\n  public readonly statusCode?: number;\n  public readonly auditInfo?: AuditInfo;\n  public readonly cause?: Error;\n\n  constructor(\n    message: string,\n    public readonly code: string,\n    options: {\n      operation: string;\n      retryable?: boolean;\n      statusCode?: number;\n      requestId?: string;\n      auditInfo?: AuditInfo;\n      cause?: Error;\n    }\n  ) {\n    super(message);\n    if (options.cause) {\n      this.cause = options.cause;\n    }\n    this.name = this.constructor.name;\n    this.timestamp = new Date();\n    this.requestId = options.requestId ?? generateRequestId();\n    this.operation = options.operation;\n    this.retryable = options.retryable ?? false;\n    if (options.statusCode !== undefined) {\n      this.statusCode = options.statusCode;\n    }\n    if (options.auditInfo !== undefined) {\n      this.auditInfo = options.auditInfo;\n    }\n\n    // Ensure proper prototype chain\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  toJSON(): Record<string, unknown> {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      operation: this.operation,\n      retryable: this.retryable,\n      statusCode: this.statusCode,\n      timestamp: this.timestamp.toISOString(),\n      requestId: this.requestId,\n      auditInfo: this.auditInfo,\n      stack: this.stack,\n    };\n  }\n}\n\n// Audit information for compliance\nexport interface AuditInfo {\n  userId?: string;\n  role?: 'provider' | 'merchant' | 'cashier';\n  fiscalId?: string;\n  receiptId?: string;\n  pemId?: string;\n  ipAddress?: string;\n  userAgent?: string;\n}\n\n// Network-related errors (usually retryable)\nexport class NetworkError extends ACubeSDKError {\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      statusCode?: number;\n      requestId?: string;\n      retryable?: boolean;\n      cause?: Error;\n    } = {}\n  ) {\n    super(message, 'NETWORK_ERROR', {\n      operation,\n      retryable: options.retryable ?? true,\n      ...(options.statusCode !== undefined && { statusCode: options.statusCode }),\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.cause !== undefined && { cause: options.cause }),\n    });\n  }\n}\n\n// Authentication/Authorization errors (not retryable)\nexport class AuthenticationError extends ACubeSDKError {\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      statusCode?: number;\n      requestId?: string;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(message, 'AUTHENTICATION_ERROR', {\n      operation,\n      retryable: false,\n      statusCode: options.statusCode ?? 401,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n    });\n  }\n}\n\n// Authorization errors (not retryable)\nexport class AuthorizationError extends ACubeSDKError {\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      statusCode?: number;\n      requestId?: string;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(message, 'AUTHORIZATION_ERROR', {\n      operation,\n      retryable: false,\n      statusCode: options.statusCode ?? 403,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n    });\n  }\n}\n\n// Validation errors (not retryable)\nexport class ValidationError extends ACubeSDKError {\n  public readonly violations: ValidationViolation[];\n\n  constructor(\n    message: string,\n    operation: string,\n    violations: ValidationViolation[],\n    options: {\n      requestId?: string;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(message, 'VALIDATION_ERROR', {\n      operation,\n      retryable: false,\n      statusCode: 422,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n    });\n    this.violations = violations;\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      violations: this.violations,\n    };\n  }\n}\n\nexport interface ValidationViolation {\n  field: string;\n  message: string;\n  code: string;\n  value?: unknown;\n}\n\n// Fiscal/compliance specific errors (usually not retryable)\nexport class FiscalError extends ACubeSDKError {\n  public readonly fiscalCode?: string;\n  public readonly documentNumber?: string;\n\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      fiscalCode?: string;\n      documentNumber?: string;\n      statusCode?: number;\n      requestId?: string;\n      retryable?: boolean;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(message, 'FISCAL_ERROR', {\n      operation,\n      retryable: options.retryable ?? false,\n      statusCode: options.statusCode ?? 400,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n    });\n    if (options.fiscalCode !== undefined) {\n      this.fiscalCode = options.fiscalCode;\n    }\n    if (options.documentNumber !== undefined) {\n      this.documentNumber = options.documentNumber;\n    }\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      fiscalCode: this.fiscalCode,\n      documentNumber: this.documentNumber,\n    };\n  }\n}\n\n// Rate limiting errors (retryable)\nexport class RateLimitError extends ACubeSDKError {\n  public readonly retryAfter?: number;\n\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      retryAfter?: number;\n      requestId?: string;\n    } = {}\n  ) {\n    super(message, 'RATE_LIMIT_ERROR', {\n      operation,\n      retryable: true,\n      statusCode: 429,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n    });\n    if (options.retryAfter !== undefined) {\n      this.retryAfter = options.retryAfter;\n    }\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      retryAfter: this.retryAfter,\n    };\n  }\n}\n\n// Configuration errors (not retryable)\nexport class ConfigurationError extends ACubeSDKError {\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      requestId?: string;\n    } = {}\n  ) {\n    super(message, 'CONFIGURATION_ERROR', {\n      operation,\n      retryable: false,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n    });\n  }\n}\n\n// Resource not found errors (not retryable)\nexport class NotFoundError extends ACubeSDKError {\n  public readonly resourceType: string;\n  public readonly resourceId: string;\n\n  constructor(\n    resourceType: string,\n    resourceId: string,\n    operation: string,\n    options: {\n      requestId?: string;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(\n      `${resourceType} with id ${resourceId} not found`,\n      'NOT_FOUND_ERROR',\n      {\n        operation,\n        retryable: false,\n        statusCode: 404,\n        ...(options.requestId !== undefined && { requestId: options.requestId }),\n        ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n      }\n    );\n    this.resourceType = resourceType;\n    this.resourceId = resourceId;\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      resourceType: this.resourceType,\n      resourceId: this.resourceId,\n    };\n  }\n}\n\n// Circuit breaker errors (retryable)\nexport class CircuitBreakerError extends ACubeSDKError {\n  public readonly state: 'OPEN' | 'HALF_OPEN';\n\n  constructor(\n    message: string,\n    operation: string,\n    state: 'OPEN' | 'HALF_OPEN',\n    options: {\n      requestId?: string;\n    } = {}\n  ) {\n    super(message, 'CIRCUIT_BREAKER_ERROR', {\n      operation,\n      retryable: true,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n    });\n    this.state = state;\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      state: this.state,\n    };\n  }\n}\n\n// Utility functions\nfunction generateRequestId(): string {\n  return `req_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;\n}\n\n// Error factory for creating errors from HTTP responses\nexport function createErrorFromResponse(\n  response: {\n    status: number;\n    statusText: string;\n    data?: unknown;\n  },\n  operation: string,\n  requestId?: string\n): ACubeSDKError {\n  const message = getErrorMessage(response.data) || response.statusText;\n\n  switch (response.status) {\n    case 401:\n      return new AuthenticationError(message, operation, {\n        statusCode: response.status,\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 403:\n      return new AuthorizationError(message, operation, {\n        statusCode: response.status,\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 404:\n      // Try to extract resource info from error data\n      const resourceType = extractResourceType(response.data);\n      const resourceId = extractResourceId(response.data);\n      if (resourceType && resourceId) {\n        return new NotFoundError(resourceType, resourceId, operation, {\n          ...(requestId !== undefined && { requestId }),\n        });\n      }\n      // Create a concrete NotFoundError for generic 404s\n      return new NotFoundError('Resource', 'unknown', operation, {\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 422:\n      const violations = extractValidationViolations(response.data);\n      return new ValidationError(message, operation, violations, {\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 429:\n      const retryAfter = extractRetryAfter(response.data);\n      return new RateLimitError(message, operation, {\n        ...(retryAfter !== undefined && { retryAfter }),\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 500:\n    case 502:\n    case 503:\n    case 504:\n      return new NetworkError(message, operation, {\n        statusCode: response.status,\n        ...(requestId !== undefined && { requestId }),\n        retryable: true,\n      });\n    default:\n      return new NetworkError(message, operation, {\n        statusCode: response.status,\n        ...(requestId !== undefined && { requestId }),\n        retryable: response.status >= 500,\n      });\n  }\n}\n\n// Helper functions for extracting error details\nfunction getErrorMessage(data: unknown): string | null {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    return (obj.message as string) || (obj.detail as string) || null;\n  }\n  return null;\n}\n\nfunction extractResourceType(data: unknown): string | null {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    return obj.resourceType as string || null;\n  }\n  return null;\n}\n\nfunction extractResourceId(data: unknown): string | null {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    return obj.resourceId as string || null;\n  }\n  return null;\n}\n\nfunction extractValidationViolations(data: unknown): ValidationViolation[] {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    if (Array.isArray(obj.violations)) {\n      return obj.violations.map((v: any) => ({\n        field: v.propertyPath || v.field || 'unknown',\n        message: v.message || 'Validation failed',\n        code: v.code || 'VALIDATION_FAILED',\n        value: v.value,\n      }));\n    }\n    if (Array.isArray(obj.detail)) {\n      return obj.detail.map((v: any) => ({\n        field: v.loc?.join('.') || 'unknown',\n        message: v.msg || 'Validation failed',\n        code: v.type || 'VALIDATION_FAILED',\n        value: v.input,\n      }));\n    }\n  }\n  return [];\n}\n\nfunction extractRetryAfter(data: unknown): number | undefined {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    const retryAfter = obj.retryAfter || obj.retry_after;\n    return typeof retryAfter === 'number' ? retryAfter : undefined;\n  }\n  return undefined;\n}","/**\n * Base OpenAPI Resource Class\n * Enterprise-grade foundation for all API resources with full type safety\n * \n * Features:\n * - Type-safe request execution based on OpenAPI specification\n * - Automatic parameter binding (path, query, body)\n * - Schema validation and error handling\n * - Audit trail and metadata tracking\n * - Integration with existing HTTP client and middleware\n */\n\nimport type { HttpClient, RequestOptions as HttpRequestOptions } from '@/http/client';\nimport type { EndpointDefinition, HttpMethod } from '@/generated/endpoints';\nimport { EndpointUtils } from '@/generated/endpoints';\nimport { ValidationError, type ACubeSDKError } from '@/errors/index';\n\nexport interface BaseResourceConfig {\n  client: HttpClient;\n  endpoints: Record<string, EndpointDefinition>;\n}\n\nexport interface RequestOptions {\n  pathParams?: Record<string, string | number>;\n  queryParams?: Record<string, unknown>;\n  headers?: Record<string, string>;\n  metadata?: Record<string, unknown>;\n  skipRetry?: boolean;\n  skipCircuitBreaker?: boolean;\n  timeout?: number;\n}\n\nexport interface ValidationContext {\n  endpoint: EndpointDefinition;\n  operation: string;\n  data?: unknown;\n  pathParams?: Record<string, string | number>;\n  queryParams?: Record<string, unknown>;\n}\n\n/**\n * Abstract base class for all OpenAPI-based resources\n * Provides type-safe operations with comprehensive error handling and validation\n */\nexport abstract class BaseOpenAPIResource {\n  protected readonly client: HttpClient;\n  protected readonly endpoints: Record<string, EndpointDefinition>;\n\n  constructor(config: BaseResourceConfig) {\n    this.client = config.client;\n    this.endpoints = config.endpoints;\n  }\n\n  /**\n   * Execute a type-safe API request based on OpenAPI endpoint definition\n   * \n   * @template TRequest - Type of request data\n   * @template TResponse - Type of response data\n   * @param endpointKey - Key to identify the endpoint in the endpoints map\n   * @param data - Request body data (for POST/PUT/PATCH requests)\n   * @param options - Additional request options\n   * @returns Promise resolving to typed response data\n   */\n  protected async executeRequest<TRequest = unknown, TResponse = unknown>(\n    endpointKey: string,\n    data?: TRequest,\n    options: RequestOptions = {}\n  ): Promise<TResponse> {\n    const endpoint = this.endpoints[endpointKey];\n    if (!endpoint) {\n      throw new ValidationError(\n        `Unknown endpoint: ${endpointKey}`,\n        'execute_request',\n        [{ field: 'endpointKey', message: `Endpoint '${endpointKey}' not found`, code: 'UNKNOWN_ENDPOINT' }]\n      );\n    }\n\n    // Validate the request before execution\n    this.validateRequest({ endpoint, operation: endpointKey, data, ...options });\n\n    // Build the complete URL with path parameters\n    const url = this.buildRequestUrl(endpoint, options.pathParams);\n\n    // Prepare request options for HTTP client\n    const httpOptions: HttpRequestOptions = {\n      method: endpoint.method,\n      url,\n      data,\n      headers: {\n        ...this.getDefaultHeaders(endpoint),\n        ...options.headers,\n      },\n      metadata: {\n        operationId: endpoint.operationId,\n        resource: endpoint.metadata?.resource,\n        operation: endpoint.metadata?.operation,\n        ...options.metadata,\n      },\n      skipRetry: options.skipRetry ?? !EndpointUtils.isRetryable(endpoint),\n    };\n\n    // Add optional properties only if they have values\n    if (options.queryParams) {\n      httpOptions.params = options.queryParams;\n    }\n    if (options.timeout) {\n      httpOptions.timeout = options.timeout;\n    }\n    if (options.skipCircuitBreaker !== undefined) {\n      httpOptions.skipCircuitBreaker = options.skipCircuitBreaker;\n    }\n\n    try {\n      // Execute the HTTP request through the client\n      const response = await this.client.request<TResponse>(httpOptions);\n      \n      // Validate response if needed\n      this.validateResponse(endpoint, response.data);\n      \n      return response.data;\n    } catch (error) {\n      // Enhanced error handling with OpenAPI context\n      throw this.enhanceError(error as ACubeSDKError, endpoint, endpointKey, options);\n    }\n  }\n\n  /**\n   * Build complete request URL with path parameter substitution\n   */\n  private buildRequestUrl(endpoint: EndpointDefinition, pathParams: Record<string, string | number> = {}): string {\n    return EndpointUtils.buildUrl(endpoint, pathParams);\n  }\n\n  /**\n   * Get default headers based on endpoint requirements\n   */\n  private getDefaultHeaders(endpoint: EndpointDefinition): Record<string, string> {\n    const headers: Record<string, string> = {};\n\n    // Set content type for requests with body\n    if (endpoint.requestBody) {\n      headers['Content-Type'] = endpoint.requestBody.contentType;\n    }\n\n    // Set default accept header\n    const successResponse = endpoint.responses['200'] || endpoint.responses['201'];\n    if (successResponse?.contentType) {\n      headers['Accept'] = successResponse.contentType;\n    }\n\n    return headers;\n  }\n\n  /**\n   * Validate request data against OpenAPI specification\n   */\n  private validateRequest(context: ValidationContext): void {\n    const { endpoint, operation, data, pathParams, queryParams } = context;\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    // Validate required path parameters\n    if (endpoint.parameters?.path) {\n      for (const [paramName, paramType] of Object.entries(endpoint.parameters.path)) {\n        if (!pathParams || !(paramName in pathParams)) {\n          errors.push({\n            field: `path.${paramName}`,\n            message: `Required path parameter '${paramName}' is missing`,\n            code: 'MISSING_PATH_PARAM',\n          });\n        } else {\n          // Type validation for path parameters\n          const value = pathParams[paramName];\n          if (!this.validateParameterType(value, paramType)) {\n            errors.push({\n              field: `path.${paramName}`,\n              message: `Path parameter '${paramName}' must be of type ${paramType}`,\n              code: 'INVALID_PATH_PARAM_TYPE',\n            });\n          }\n        }\n      }\n    }\n\n    // Validate required request body\n    if (endpoint.requestBody?.required && !data) {\n      errors.push({\n        field: 'body',\n        message: 'Request body is required',\n        code: 'MISSING_BODY',\n      });\n    }\n\n    // Validate query parameters (basic type checking)\n    if (endpoint.parameters?.query && queryParams) {\n      for (const [paramName, paramType] of Object.entries(endpoint.parameters.query)) {\n        const value = queryParams[paramName];\n        if (value !== undefined && !this.validateParameterType(value, paramType)) {\n          errors.push({\n            field: `query.${paramName}`,\n            message: `Query parameter '${paramName}' must be of type ${paramType}`,\n            code: 'INVALID_QUERY_PARAM_TYPE',\n          });\n        }\n      }\n    }\n\n    if (errors.length > 0) {\n      throw new ValidationError(\n        `Request validation failed for operation '${operation}'`,\n        operation,\n        errors\n      );\n    }\n  }\n\n  /**\n   * Basic type validation for parameters\n   */\n  private validateParameterType(value: unknown, expectedType: string): boolean {\n    switch (expectedType) {\n      case 'string':\n        return typeof value === 'string';\n      case 'integer':\n      case 'number':\n        return typeof value === 'number' || (typeof value === 'string' && !isNaN(Number(value)));\n      case 'boolean':\n        return typeof value === 'boolean';\n      default:\n        return true; // Allow unknown types for now\n    }\n  }\n\n  /**\n   * Validate response data (can be extended for schema validation)\n   */\n  private validateResponse(endpoint: EndpointDefinition, data: unknown): void {\n    // Basic response validation - can be enhanced with JSON schema validation\n    if (data === null || data === undefined) {\n      // Check if null response is expected\n      const hasNullableResponse = Object.keys(endpoint.responses).some(code => \n        code === '204' || endpoint.responses[code]?.description?.toLowerCase().includes('no content')\n      );\n      \n      if (!hasNullableResponse) {\n        console.warn(`Received null/undefined response for ${endpoint.operationId}`);\n      }\n    }\n  }\n\n  /**\n   * Enhance errors with OpenAPI-specific context\n   */\n  private enhanceError(\n    error: ACubeSDKError,\n    endpoint: EndpointDefinition,\n    operation: string,\n    _options: RequestOptions\n  ): ACubeSDKError {\n    // Create enhanced error with additional context\n    const enhancedError = new (error.constructor as new (...args: any[]) => ACubeSDKError)(\n      error.message,\n      error.code,\n      {\n        operation: error.operation || endpoint.operationId,\n        retryable: error.retryable !== undefined ? error.retryable : EndpointUtils.isRetryable(endpoint),\n        statusCode: error.statusCode,\n        requestId: error.requestId,\n        auditInfo: {\n          ...error.auditInfo,\n          // Add OpenAPI-specific audit information\n          pemId: endpoint.metadata?.resource === 'point-of-sales' ? String(_options.pathParams?.serial_number || '') : error.auditInfo?.pemId,\n        },\n        cause: error.cause,\n      }\n    );\n\n    // Add a custom property for OpenAPI metadata (non-enumerable to avoid serialization issues)\n    Object.defineProperty(enhancedError, 'openapiMetadata', {\n      value: {\n        resource: endpoint.metadata?.resource,\n        endpointOperation: operation,\n        httpMethod: endpoint.method,\n        path: endpoint.path,\n      },\n      writable: false,\n      enumerable: false,\n      configurable: false,\n    });\n\n    return enhancedError;\n  }\n\n  /**\n   * Utility method to check if an operation is available\n   */\n  protected hasOperation(operationKey: string): boolean {\n    return operationKey in this.endpoints;\n  }\n\n  /**\n   * Get endpoint definition for an operation\n   */\n  protected getEndpoint(operationKey: string): EndpointDefinition | null {\n    return this.endpoints[operationKey] || null;\n  }\n\n  /**\n   * Get all available operations for this resource\n   */\n  protected getAvailableOperations(): string[] {\n    return Object.keys(this.endpoints);\n  }\n\n  /**\n   * Create a standardized error for missing operations\n   */\n  protected createUnsupportedOperationError(operation: string): ValidationError {\n    return new ValidationError(\n      `Operation '${operation}' is not supported by this resource`,\n      'unsupported_operation',\n      [{ \n        field: 'operation', \n        message: `Available operations: ${this.getAvailableOperations().join(', ')}`, \n        code: 'UNSUPPORTED_OPERATION' \n      }]\n    );\n  }\n\n  // Static utility methods for common patterns\n\n  /**\n   * Format validation errors for user-friendly display\n   */\n  static formatValidationErrors(errors: Array<{ field: string; message: string; code: string }>): string {\n    return errors.map(error => `${error.field}: ${error.message}`).join(', ');\n  }\n\n  /**\n   * Extract error details from API response\n   */\n  static extractErrorDetails(error: unknown): { message: string; details?: unknown } {\n    if (error instanceof ValidationError) {\n      return {\n        message: error.message,\n        details: error.violations,\n      };\n    }\n\n    if (error instanceof Error) {\n      return { message: error.message };\n    }\n\n    return { message: 'Unknown error occurred' };\n  }\n\n  /**\n   * Check if error indicates a temporary failure\n   */\n  static isTemporaryError(error: ACubeSDKError): boolean {\n    // Network errors are usually temporary\n    if (error.name === 'NetworkError') {\n      return true;\n    }\n\n    // Some HTTP status codes indicate temporary issues\n    if (error.statusCode) {\n      return [429, 500, 502, 503, 504].includes(error.statusCode);\n    }\n\n    return error.retryable ?? false;\n  }\n\n  /**\n   * Get retry delay for temporary errors\n   */\n  static getRetryDelay(_error: ACubeSDKError, attempt: number): number {\n    // Exponential backoff with jitter\n    const baseDelay = 1000; // 1 second\n    const maxDelay = 30000; // 30 seconds\n    \n    let delay = Math.min(baseDelay * Math.pow(2, attempt - 1), maxDelay);\n    \n    // Add jitter (±25%)\n    const jitter = delay * 0.25;\n    delay += (Math.random() * 2 - 1) * jitter;\n    \n    return Math.floor(delay);\n  }\n}\n\n/**\n * Type-safe endpoint builder for dynamic endpoint creation\n */\nexport class EndpointBuilder {\n  private definition: Partial<EndpointDefinition> = {};\n\n  constructor(path: string, method: HttpMethod) {\n    this.definition = {\n      path,\n      method,\n      tags: [],\n      responses: {},\n    };\n  }\n\n  operationId(id: string): this {\n    this.definition.operationId = id;\n    return this;\n  }\n\n  summary(text: string): this {\n    this.definition.summary = text;\n    return this;\n  }\n\n  description(text: string): this {\n    this.definition.description = text;\n    return this;\n  }\n\n  tag(name: string): this {\n    this.definition.tags = [...(this.definition.tags || []), name];\n    return this;\n  }\n\n  requireAuth(): this {\n    this.definition.security = [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }];\n    return this;\n  }\n\n  pathParam(name: string, type: string): this {\n    if (!this.definition.parameters) {\n      this.definition.parameters = {};\n    }\n    if (!this.definition.parameters.path) {\n      this.definition.parameters.path = {};\n    }\n    this.definition.parameters.path[name] = type;\n    return this;\n  }\n\n  queryParam(name: string, type: string): this {\n    if (!this.definition.parameters) {\n      this.definition.parameters = {};\n    }\n    if (!this.definition.parameters.query) {\n      this.definition.parameters.query = {};\n    }\n    this.definition.parameters.query[name] = type;\n    return this;\n  }\n\n  requestBody(schema: string, required = true): this {\n    this.definition.requestBody = {\n      required,\n      contentType: 'application/json',\n      schema,\n    };\n    return this;\n  }\n\n  response(statusCode: string, description: string, schema?: string): this {\n    if (!this.definition.responses) {\n      this.definition.responses = {};\n    }\n    this.definition.responses[statusCode] = {\n      description,\n      ...(schema && { contentType: 'application/json', schema }),\n    };\n    return this;\n  }\n\n  metadata(resource: string, operation: string, authRequired = true, retryable = true): this {\n    this.definition.metadata = {\n      resource,\n      operation,\n      authRequired,\n      retryable,\n    };\n    return this;\n  }\n\n  build(): EndpointDefinition {\n    if (!this.definition.operationId) {\n      throw new Error('operationId is required');\n    }\n\n    return this.definition as EndpointDefinition;\n  }\n}","/**\n * Merchants Resource - OpenAPI Implementation\n * Type-safe implementation for business entity management\n * \n * Features:\n * - Complete merchant lifecycle management\n * - Italian VAT number validation and verification\n * - Business address management\n * - Merchant profile and settings\n * - Compliance and certification tracking\n */\n\nimport { BaseOpenAPIResource } from '@/resources/base-openapi';\nimport { MerchantEndpoints } from '@/generated/endpoints';\nimport type { HttpClient } from '@/http/client';\nimport type { MerchantId, FiscalId } from '@/types/branded';\nimport type { components } from '@/types/generated';\nimport { ValidationError } from '@/errors/index';\n\n// Extract types from OpenAPI generated types\ntype MerchantCreateInput = components['schemas']['A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantCreateInput'];\ntype MerchantUpdateInput = components['schemas']['A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantUpdateInput'];\ntype MerchantOutput = components['schemas']['A-Cube_GOV-IT_PEL_Platform_Merchant.MerchantOutput'];\n\nexport interface MerchantValidationOptions {\n  validateVATNumber?: boolean;\n  checkBusinessRegistration?: boolean;\n  enforceAddressValidation?: boolean;\n  validateItalianPostalCodes?: boolean;\n}\n\nexport interface BusinessAnalytics {\n  registrationDate: string;\n  businessAge: number;\n  completenessScore: number;\n  missingFields: string[];\n  recommendations: string[];\n  complianceStatus: 'compliant' | 'pending' | 'non-compliant';\n}\n\nexport interface AddressValidationResult {\n  isValid: boolean;\n  errors: string[];\n  suggestions: string[];\n  formattedAddress?: string | undefined;\n}\n\nexport type BusinessType = 'individual' | 'partnership' | 'corporation' | 'cooperative' | 'other';\nexport type MerchantStatus = 'active' | 'pending' | 'suspended' | 'closed';\n\n/**\n * Merchants Resource Class - OpenAPI Based\n * Manages merchant business entities with full Italian compliance\n */\nexport class MerchantsResource extends BaseOpenAPIResource {\n  constructor(client: HttpClient) {\n    super({\n      client,\n      endpoints: {\n        list: MerchantEndpoints.LIST,\n        create: MerchantEndpoints.CREATE,\n        getByUuid: MerchantEndpoints.GET_BY_UUID,\n        update: MerchantEndpoints.UPDATE,\n      }\n    });\n  }\n\n  /**\n   * Get a list of merchants\n   * \n   * @returns Promise resolving to merchant list\n   */\n  async list(): Promise<MerchantOutput[]> {\n    return this.executeRequest<void, MerchantOutput[]>('list', undefined, {\n      metadata: {\n        operation: 'list_merchants',\n      }\n    });\n  }\n\n  /**\n   * Create a new merchant\n   * \n   * @param data - Merchant creation input data\n   * @param options - Validation options\n   * @returns Promise resolving to created merchant\n   */\n  async create(\n    data: MerchantCreateInput, \n    options: MerchantValidationOptions = {}\n  ): Promise<MerchantOutput> {\n    // Validate input with business rules\n    await this.validateMerchantCreateInput(data, options);\n\n    return this.executeRequest<MerchantCreateInput, MerchantOutput>('create', data, {\n      metadata: {\n        operation: 'create_merchant',\n        fiscalId: data.fiscal_id,\n        email: data.email,\n        businessName: data.name,\n      }\n    });\n  }\n\n  /**\n   * Get a merchant by UUID\n   * \n   * @param merchantId - Merchant UUID\n   * @returns Promise resolving to merchant details\n   */\n  async retrieve(merchantId: MerchantId | string): Promise<MerchantOutput> {\n    return this.executeRequest<void, MerchantOutput>('getByUuid', undefined, {\n      pathParams: { uuid: merchantId },\n      metadata: {\n        operation: 'get_merchant',\n        merchantId,\n      }\n    });\n  }\n\n  /**\n   * Update a merchant's information\n   * \n   * @param merchantId - Merchant UUID\n   * @param data - Merchant update input data\n   * @param options - Validation options\n   * @returns Promise resolving to updated merchant\n   */\n  async update(\n    merchantId: MerchantId | string, \n    data: MerchantUpdateInput,\n    options: MerchantValidationOptions = {}\n  ): Promise<MerchantOutput> {\n    await this.validateMerchantUpdateInput(data, options);\n\n    return this.executeRequest<MerchantUpdateInput, MerchantOutput>('update', data, {\n      pathParams: { uuid: merchantId },\n      metadata: {\n        operation: 'update_merchant',\n        merchantId,\n        businessName: data.name,\n      }\n    });\n  }\n\n  /**\n   * Get merchant business analytics\n   * \n   * @param merchantId - Merchant UUID\n   * @returns Promise resolving to business analytics\n   */\n  async getAnalytics(merchantId: MerchantId | string): Promise<BusinessAnalytics> {\n    const merchant = await this.retrieve(merchantId);\n    return MerchantsResource.analyzeBusinessProfile(merchant);\n  }\n\n  /**\n   * Validate merchant address\n   * \n   * @param address - Address to validate\n   * @returns Address validation result\n   */\n  async validateAddress(address: components['schemas']['A-Cube_GOV-IT_PEL_Platform_Address']): Promise<AddressValidationResult> {\n    return MerchantsResource.validateItalianAddress(address);\n  }\n\n  // Validation methods\n\n  /**\n   * Comprehensive merchant creation input validation\n   */\n  private async validateMerchantCreateInput(\n    data: MerchantCreateInput, \n    options: MerchantValidationOptions = {}\n  ): Promise<void> {\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    // Required fields validation\n    if (!data.fiscal_id) {\n      errors.push({\n        field: 'fiscal_id',\n        message: 'Fiscal ID is required',\n        code: 'REQUIRED'\n      });\n    } else if (options.validateVATNumber) {\n      const vatValidation = await this.validateItalianVATNumber(data.fiscal_id);\n      if (!vatValidation.isValid) {\n        errors.push({\n          field: 'fiscal_id',\n          message: vatValidation.error || 'Invalid Italian VAT number',\n          code: 'INVALID_VAT_NUMBER'\n        });\n      }\n    }\n\n    if (!data.name || data.name.trim().length === 0) {\n      errors.push({\n        field: 'name',\n        message: 'Business name is required',\n        code: 'REQUIRED'\n      });\n    } else {\n      const nameValidation = this.validateBusinessName(data.name);\n      if (!nameValidation.isValid) {\n        errors.push({\n          field: 'name',\n          message: nameValidation.error || 'Invalid business name',\n          code: 'INVALID_BUSINESS_NAME'\n        });\n      }\n    }\n\n    if (!data.email) {\n      errors.push({\n        field: 'email',\n        message: 'Email is required',\n        code: 'REQUIRED'\n      });\n    } else if (!this.isValidEmail(data.email)) {\n      errors.push({\n        field: 'email',\n        message: 'Invalid email format',\n        code: 'INVALID_EMAIL'\n      });\n    }\n\n    if (!data.password) {\n      errors.push({\n        field: 'password',\n        message: 'Password is required',\n        code: 'REQUIRED'\n      });\n    } else {\n      const passwordValidation = this.validatePassword(data.password);\n      if (!passwordValidation.isValid) {\n        errors.push({\n          field: 'password',\n          message: passwordValidation.error || 'Password does not meet requirements',\n          code: 'WEAK_PASSWORD'\n        });\n      }\n    }\n\n    // Address validation if provided\n    if (data.address && options.enforceAddressValidation) {\n      const addressValidation = await MerchantsResource.validateItalianAddress(data.address);\n      if (!addressValidation.isValid) {\n        errors.push(...addressValidation.errors.map(error => ({\n          field: 'address',\n          message: error,\n          code: 'INVALID_ADDRESS'\n        })));\n      }\n    }\n\n    if (errors.length > 0) {\n      throw new ValidationError('Invalid merchant create input', 'create_merchant', errors);\n    }\n  }\n\n  /**\n   * Merchant update input validation\n   */\n  private async validateMerchantUpdateInput(\n    data: MerchantUpdateInput, \n    options: MerchantValidationOptions = {}\n  ): Promise<void> {\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    // Business name validation\n    if (!data.name || data.name.trim().length === 0) {\n      errors.push({\n        field: 'name',\n        message: 'Business name is required',\n        code: 'REQUIRED'\n      });\n    } else {\n      const nameValidation = this.validateBusinessName(data.name);\n      if (!nameValidation.isValid) {\n        errors.push({\n          field: 'name',\n          message: nameValidation.error || 'Invalid business name',\n          code: 'INVALID_BUSINESS_NAME'\n        });\n      }\n    }\n\n    // Address validation if provided\n    if (data.address && options.enforceAddressValidation) {\n      const addressValidation = await MerchantsResource.validateItalianAddress(data.address);\n      if (!addressValidation.isValid) {\n        errors.push(...addressValidation.errors.map(error => ({\n          field: 'address',\n          message: error,\n          code: 'INVALID_ADDRESS'\n        })));\n      }\n    }\n\n    if (errors.length > 0) {\n      throw new ValidationError('Invalid merchant update input', 'update_merchant', errors);\n    }\n  }\n\n  /**\n   * Validate Italian VAT number with checksum\n   */\n  private async validateItalianVATNumber(vatNumber: string): Promise<{ isValid: boolean; error?: string }> {\n    if (!MerchantsResource.isValidItalianVATNumber(vatNumber)) {\n      return { isValid: false, error: 'Invalid Italian VAT number format or checksum' };\n    }\n\n    // Additional online validation could be implemented here\n    // For now, we'll just check the format and checksum\n    return { isValid: true };\n  }\n\n  /**\n   * Validate business name\n   */\n  private validateBusinessName(name: string): { isValid: boolean; error?: string } {\n    if (name.length > 200) {\n      return { isValid: false, error: 'Business name cannot exceed 200 characters' };\n    }\n\n    if (!/^[\\w\\s&.,'()\\-]+$/u.test(name)) {\n      return { isValid: false, error: 'Business name contains invalid characters' };\n    }\n\n    // Check for suspicious patterns\n    if (/test|example|sample/i.test(name)) {\n      console.warn(`Potentially test business name detected: ${name}`);\n    }\n\n    return { isValid: true };\n  }\n\n  /**\n   * Validate password strength\n   */\n  private validatePassword(password: string): { isValid: boolean; error?: string } {\n    if (password.length < 8) {\n      return { isValid: false, error: 'Password must be at least 8 characters long' };\n    }\n\n    if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(password)) {\n      return { isValid: false, error: 'Password must contain uppercase, lowercase, and numeric characters' };\n    }\n\n    return { isValid: true };\n  }\n\n  /**\n   * Validate email format\n   */\n  private isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  // Static utility methods\n\n  /**\n   * Validate Italian VAT number (static utility)\n   */\n  static isValidItalianVATNumber(vatNumber: string): boolean {\n    // Must be exactly 11 digits\n    if (!/^\\d{11}$/.test(vatNumber)) {\n      return false;\n    }\n\n    // Calculate checksum for Italian VAT number\n    let sum = 0;\n    for (let i = 0; i < 10; i++) {\n      let digit = parseInt(vatNumber[i]!, 10);\n      if (i % 2 === 1) {\n        digit *= 2;\n        if (digit > 9) {\n          digit = Math.floor(digit / 10) + (digit % 10);\n        }\n      }\n      sum += digit;\n    }\n\n    const checkDigit = (10 - (sum % 10)) % 10;\n    return checkDigit === parseInt(vatNumber[10]!, 10);\n  }\n\n  /**\n   * Format fiscal ID for display\n   */\n  static formatFiscalId(fiscalId: FiscalId | string): string {\n    // Format as XXX XXX XXXXX for readability\n    return fiscalId.replace(/(\\d{3})(\\d{3})(\\d{5})/, '$1 $2 $3');\n  }\n\n  /**\n   * Validate Italian address\n   */\n  static async validateItalianAddress(address: components['schemas']['A-Cube_GOV-IT_PEL_Platform_Address']): Promise<AddressValidationResult> {\n    const errors: string[] = [];\n    const suggestions: string[] = [];\n\n    if (!address.street_address || address.street_address.trim().length === 0) {\n      errors.push('Street address is required');\n    }\n\n    if (!address.zip_code || !/^\\d{5}$/.test(address.zip_code)) {\n      errors.push('ZIP code must be exactly 5 digits');\n    } else {\n      // Basic Italian postal code validation\n      const zipCode = parseInt(address.zip_code, 10);\n      if (zipCode < 10000 || zipCode > 98168) {\n        errors.push('Invalid Italian postal code range');\n      }\n    }\n\n    if (!address.city || address.city.trim().length === 0) {\n      errors.push('City is required');\n    }\n\n    if (!address.province || address.province.length !== 2) {\n      errors.push('Province must be exactly 2 characters');\n    } else {\n      // Validate against Italian province codes\n      const validProvinces = [\n        'AG', 'AL', 'AN', 'AO', 'AQ', 'AR', 'AP', 'AT', 'AV', 'BA', 'BT', 'BL', 'BN', 'BG', 'BI', 'BO', 'BZ', 'BS', 'BR',\n        'CA', 'CL', 'CB', 'CI', 'CE', 'CT', 'CZ', 'CH', 'CO', 'CS', 'CR', 'KR', 'CN', 'EN', 'FM', 'FE', 'FI', 'FG', 'FC',\n        'FR', 'GE', 'GO', 'GR', 'IM', 'IS', 'SP', 'LT', 'LE', 'LC', 'LI', 'LO', 'LU', 'MC', 'MN', 'MS', 'MT', 'VS', 'ME',\n        'MI', 'MO', 'MB', 'NA', 'NO', 'NU', 'OG', 'OT', 'OR', 'PD', 'PA', 'PR', 'PV', 'PG', 'PU', 'PE', 'PC', 'PI', 'PT',\n        'PN', 'PZ', 'PO', 'RG', 'RA', 'RC', 'RE', 'RI', 'RN', 'RM', 'RO', 'SA', 'SS', 'SV', 'SI', 'SR', 'SO', 'TA', 'TE',\n        'TR', 'TO', 'TP', 'TN', 'TV', 'TS', 'UD', 'VA', 'VE', 'VB', 'VC', 'VR', 'VV', 'VI', 'VT'\n      ];\n      \n      if (!validProvinces.includes(address.province.toUpperCase())) {\n        errors.push('Invalid Italian province code');\n        suggestions.push('Please use a valid Italian province code (e.g., RM for Rome, MI for Milan)');\n      }\n    }\n\n    const isValid = errors.length === 0;\n    const formattedAddress = isValid ? \n      `${address.street_address}, ${address.zip_code} ${address.city} (${address.province.toUpperCase()})` : \n      undefined;\n\n    return {\n      isValid,\n      errors,\n      suggestions,\n      formattedAddress,\n    };\n  }\n\n  /**\n   * Analyze business profile completeness and compliance\n   */\n  static analyzeBusinessProfile(merchant: MerchantOutput): BusinessAnalytics {\n    const missingFields: string[] = [];\n    const recommendations: string[] = [];\n    let completenessScore = 0;\n    const totalFields = 6; // Total number of important fields\n\n    // Check required fields\n    if (merchant.fiscal_id) completenessScore++;\n    else missingFields.push('fiscal_id');\n\n    if (merchant.name) completenessScore++;\n    else missingFields.push('name');\n\n    if (merchant.email) completenessScore++;\n    else missingFields.push('email');\n\n    if (merchant.address) {\n      completenessScore++;\n      // Check address completeness\n      if (!merchant.address.street_address) {\n        missingFields.push('address.street_address');\n        recommendations.push('Add complete street address for legal compliance');\n      }\n      if (!merchant.address.zip_code) {\n        missingFields.push('address.zip_code');\n      }\n      if (!merchant.address.city) {\n        missingFields.push('address.city');\n      }\n      if (!merchant.address.province) {\n        missingFields.push('address.province');\n      }\n    } else {\n      missingFields.push('address');\n      recommendations.push('Add complete business address for legal compliance');\n    }\n\n    // Business age calculation (mock implementation)\n    // Note: created_at field not available in OpenAPI schema\n    const registrationDate = new Date().toISOString();\n    const businessAge = Math.floor((Date.now() - new Date(registrationDate).getTime()) / (1000 * 60 * 60 * 24));\n\n    // Generate recommendations\n    if (completenessScore < totalFields) {\n      recommendations.push('Complete all required business information');\n    }\n\n    // Note: phone and website fields not available in OpenAPI schema\n    // Using mock recommendations\n    recommendations.push('Add phone number for better customer communication');\n    recommendations.push('Add website URL to improve business presence');\n\n    // Determine compliance status\n    let complianceStatus: 'compliant' | 'pending' | 'non-compliant' = 'compliant';\n    if (missingFields.length > 0) {\n      complianceStatus = missingFields.length > 2 ? 'non-compliant' : 'pending';\n    }\n\n    return {\n      registrationDate,\n      businessAge,\n      completenessScore: Math.round((completenessScore / totalFields) * 100),\n      missingFields,\n      recommendations,\n      complianceStatus,\n    };\n  }\n\n  /**\n   * Generate business summary\n   */\n  static generateBusinessSummary(merchant: MerchantOutput): string {\n    const addressPart = merchant.address \n      ? ` - ${merchant.address.city}, ${merchant.address.province}`\n      : '';\n    \n    return `${merchant.name} (VAT: ${this.formatFiscalId(merchant.fiscal_id || '')})${addressPart}`;\n  }\n\n  /**\n   * Validate business name format (static utility)\n   */\n  static isValidBusinessName(name: string): boolean {\n    return typeof name === 'string' && \n           name.trim().length > 0 && \n           name.length <= 200 && \n           /^[\\w\\s&.,'()\\-]+$/u.test(name);\n  }\n\n  /**\n   * Normalize business name\n   */\n  static normalizeBusinessName(name: string): string {\n    return name\n      .trim()\n      .replace(/\\s+/g, ' ')\n      .replace(/^\\\\w/, c => c.toUpperCase());\n  }\n\n  /**\n   * Extract province code from address\n   */\n  static getProvinceCode(merchant: MerchantOutput): string | null {\n    return merchant.address?.province || null;\n  }\n\n  /**\n   * Check if merchant is based in specific region\n   */\n  static isInRegion(merchant: MerchantOutput, regionProvinces: string[]): boolean {\n    const province = this.getProvinceCode(merchant);\n    return province ? regionProvinces.includes(province.toUpperCase()) : false;\n  }\n\n  /**\n   * Get Italian business regions\n   */\n  static getItalianRegions(): Record<string, string[]> {\n    return {\n      'Northern Italy': ['AO', 'TO', 'CN', 'AT', 'AL', 'VC', 'BI', 'NO', 'VB', 'VA', 'CO', 'SO', 'MI', 'MB', 'BG', 'BS', 'PV', 'CR', 'MN', 'LO', 'LC', 'BZ', 'TN', 'VR', 'VI', 'BL', 'TV', 'VE', 'PD', 'RO', 'UD', 'PN', 'TS', 'GO', 'PC', 'PR', 'RE', 'MO', 'BO', 'FE', 'RA', 'FC', 'RN', 'GE', 'SV', 'IM', 'SP', 'MS'],\n      'Central Italy': ['LU', 'PT', 'FI', 'LI', 'PI', 'AR', 'SI', 'GR', 'PO', 'PG', 'TR', 'VT', 'RI', 'RM', 'LT', 'FR', 'AQ', 'TE', 'PE', 'CH', 'MC', 'AP', 'AN', 'PU', 'FM'],\n      'Southern Italy': ['CB', 'IS', 'CE', 'BN', 'NA', 'AV', 'SA', 'FG', 'BT', 'BA', 'BR', 'TA', 'MT', 'PZ', 'CS', 'CZ', 'VV', 'RC', 'KR'],\n      'Islands': ['PA', 'ME', 'AG', 'CL', 'EN', 'CT', 'RG', 'SR', 'TP', 'CA', 'CI', 'VS', 'NU', 'OG', 'OR', 'SS', 'OT']\n    };\n  }\n\n  /**\n   * Determine merchant region\n   */\n  static getMerchantRegion(merchant: MerchantOutput): string | null {\n    const province = this.getProvinceCode(merchant);\n    if (!province) return null;\n\n    const regions = this.getItalianRegions();\n    for (const [region, provinces] of Object.entries(regions)) {\n      if (provinces.includes(province.toUpperCase())) {\n        return region;\n      }\n    }\n\n    return null;\n  }\n}\n\n// Re-export for convenience\nexport { MerchantsResource as Merchants };\n\n// Export types for external use\nexport type {\n  MerchantCreateInput,\n  MerchantUpdateInput,\n  MerchantOutput,\n};"]}