{"version":3,"sources":["../../src/generated/endpoints.ts","../../src/errors/index.ts","../../src/resources/base-openapi.ts","../../src/resources/receipts.ts"],"names":["CashierEndpoints","PointOfSalesEndpoints","ReceiptEndpoints","CashRegisterEndpoints","MerchantEndpoints","PEMEndpoints","EndpointUtils","resource","operationId","allClasses","endpointClass","endpoint","pathParams","url","key","value","statusCode","ACubeSDKError","message","code","options","generateRequestId","ValidationError","operation","violations","BaseOpenAPIResource","config","endpointKey","data","httpOptions","response","error","headers","successResponse","context","queryParams","errors","paramName","paramType","expectedType","_options","enhancedError","operationKey","_error","attempt","delay","jitter","ReceiptsResource","client","params","voidData","receiptId","format","acceptHeader","returnData","i","item","itemErrors","paymentErrors","calculationErrors","fiscalErrors","index","prefix","validVATRates","cashAmount","electronicAmount","ticketAmount","calculated","totalPayments","subtotal","totalVAT","totalDiscount","vatBreakdown","quantity","unitPrice","itemDiscount","vatRate","itemNetTotal","itemVAT","itemGrossTotal","vatKey","breakdown","finalSubtotal","finalTotal","sum","amounts","receipt","date","_receipt","receipts","summary","totalAmount","dates","r","a","b","amount","paymentMethod","returnDate","receiptDate","daysSinceReceipt","returnPeriodDays","chars","result"],"mappings":"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","file":"receipts.mjs","sourcesContent":["/**\n * Generated Endpoint Definitions from OpenAPI Specification\n * Comprehensive endpoint configurations for all API resources\n * \n * This file is auto-generated based on openapi.yaml\n * Do not edit manually - use regeneration scripts instead\n */\n\nexport type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n\nexport interface EndpointDefinition {\n  path: string;\n  method: HttpMethod;\n  operationId: string;\n  summary?: string;\n  description?: string;\n  tags: string[];\n  security?: Array<Record<string, string[]>>;\n  parameters?: {\n    path?: Record<string, string>;\n    query?: Record<string, string>;\n    header?: Record<string, string>;\n  };\n  requestBody?: {\n    required: boolean;\n    contentType: string;\n    schema: string;\n  };\n  responses: {\n    [statusCode: string]: {\n      description: string;\n      contentType?: string;\n      schema?: string;\n    };\n  };\n  metadata?: {\n    resource: string;\n    operation: string;\n    authRequired: boolean;\n    retryable: boolean;\n  };\n}\n\n/**\n * Cashier Endpoints - User account management for cashiers\n */\nexport class CashierEndpoints {\n  static readonly LIST: EndpointDefinition = {\n    path: '/mf1/cashiers',\n    method: 'GET',\n    operationId: 'read_cashiers_mf1_cashiers_get',\n    summary: 'Read Cashiers',\n    description: 'Get a paginated list of cashiers',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      query: {\n        page: 'integer',\n        size: 'integer'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_Page__T_Customized_CashierOutput_'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly CREATE: EndpointDefinition = {\n    path: '/mf1/cashiers',\n    method: 'POST',\n    operationId: 'create_cashier_mf1_cashiers_post',\n    summary: 'Create Cashier',\n    description: 'Create a new cashier account',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_CashierCreateInput'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashierOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'create',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly ME: EndpointDefinition = {\n    path: '/mf1/cashiers/me',\n    method: 'GET',\n    operationId: 'read_cashier_me_mf1_cashiers_me_get',\n    summary: 'Read Cashier Me',\n    description: 'Read currently authenticated cashier\\'s information',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashierOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'me',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly GET_BY_ID: EndpointDefinition = {\n    path: '/mf1/cashiers/{cashier_id}',\n    method: 'GET',\n    operationId: 'read_cashier_by_id_mf1_cashiers__cashier_id__get',\n    summary: 'Read Cashier By Id',\n    description: 'Get a specific user by id',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        cashier_id: 'integer'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashierOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly DELETE: EndpointDefinition = {\n    path: '/mf1/cashiers/{cashier_id}',\n    method: 'DELETE',\n    operationId: 'delete_cashier_mf1_cashiers__cashier_id__delete',\n    summary: 'Delete Cashier',\n    description: 'Delete a cashier',\n    tags: ['Cashier'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        cashier_id: 'integer'\n      }\n    },\n    responses: {\n      '204': {\n        description: 'Successful Response'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cashiers',\n      operation: 'delete',\n      authRequired: true,\n      retryable: false\n    }\n  };\n}\n\n/**\n * Point of Sales Endpoints - PEM device management\n */\nexport class PointOfSalesEndpoints {\n  static readonly LIST: EndpointDefinition = {\n    path: '/mf1/point-of-sales',\n    method: 'GET',\n    operationId: 'read_point_of_sales_mf1_point_of_sales_get',\n    summary: 'Read Point Of Sales',\n    description: 'Retrieve PEMs',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_Page__T_Customized_PointOfSaleOutput_'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly GET_BY_SERIAL: EndpointDefinition = {\n    path: '/mf1/point-of-sales/{serial_number}',\n    method: 'GET',\n    operationId: 'read_point_of_sale_mf1_point_of_sales__serial_number__get',\n    summary: 'Read Point Of Sale',\n    description: 'Get a specific Point of Sale by serial number',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        serial_number: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_PointOfSaleOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly CLOSE_JOURNAL: EndpointDefinition = {\n    path: '/mf1/point-of-sales/close',\n    method: 'POST',\n    operationId: 'close_journal_mf1_point_of_sales_close_post',\n    summary: 'Close Journal',\n    description: 'Close the daily journal for Point of Sales',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_CloseJournalRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CloseJournalOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'close_journal',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly ACTIVATION: EndpointDefinition = {\n    path: '/mf1/point-of-sales/{serial_number}/activation',\n    method: 'POST',\n    operationId: 'post_activation_mf1_point_of_sales__serial_number__activation_post',\n    summary: 'Post Activation',\n    description: 'Trigger the activation process of a Point of Sale by requesting a certificate to the Italian Tax Agency',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        serial_number: 'string'\n      }\n    },\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_ActivationRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ActivationOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'activation',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly CREATE_INACTIVITY: EndpointDefinition = {\n    path: '/mf1/point-of-sales/{serial_number}/inactivity',\n    method: 'POST',\n    operationId: 'create_inactivity_period_mf1_point_of_sales__serial_number__inactivity_post',\n    summary: 'Create Inactivity Period',\n    description: 'Create a new inactivity period',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        serial_number: 'string'\n      }\n    },\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_InactivityRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'create_inactivity',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly SET_OFFLINE: EndpointDefinition = {\n    path: '/mf1/point-of-sales/{serial_number}/status/offline',\n    method: 'POST',\n    operationId: 'post_offline_mf1_point_of_sales__serial_number__status_offline_post',\n    summary: 'Post Offline',\n    description: 'Change the state of the Point of Sale to \\'offline\\'',\n    tags: ['Point of Sale'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        serial_number: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'point-of-sales',\n      operation: 'set_offline',\n      authRequired: true,\n      retryable: false\n    }\n  };\n}\n\n/**\n * Receipt Endpoints - Electronic receipt management\n */\nexport class ReceiptEndpoints {\n  static readonly LIST: EndpointDefinition = {\n    path: '/mf1/receipts',\n    method: 'GET',\n    operationId: 'get_receipts_mf1_receipts_get',\n    summary: 'Get Receipts',\n    description: 'Get a list of electronic receipts',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      query: {\n        page: 'integer',\n        size: 'integer',\n        start_date: 'string',\n        end_date: 'string',\n        serial_number: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_Page__T_Customized_ReceiptOutput_'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly CREATE: EndpointDefinition = {\n    path: '/mf1/receipts',\n    method: 'POST',\n    operationId: 'create_receipt_mf1_receipts_post',\n    summary: 'Create Receipt',\n    description: 'Create a new electronic receipt',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_ReceiptInput'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'create',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly VOID: EndpointDefinition = {\n    path: '/mf1/receipts',\n    method: 'DELETE',\n    operationId: 'void_receipt_mf1_receipts_delete',\n    summary: 'Void Receipt',\n    description: 'Void an electronic receipt',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_VoidReceiptRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_VoidReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'void',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly GET_BY_UUID: EndpointDefinition = {\n    path: '/mf1/receipts/{receipt_uuid}',\n    method: 'GET',\n    operationId: 'get_receipt_mf1_receipts__receipt_uuid__get',\n    summary: 'Get Receipt',\n    description: 'Get an electronic receipt',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        receipt_uuid: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly VOID_WITH_PROOF: EndpointDefinition = {\n    path: '/mf1/receipts/void-with-proof',\n    method: 'DELETE',\n    operationId: 'void_receipt_via_proof_mf1_receipts_void_with_proof_delete',\n    summary: 'Void Receipt Via Proof',\n    description: 'Void an electronic receipt identified by a proof of purchase',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_VoidReceiptWithProofRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_VoidReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'void_with_proof',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly GET_DETAILS: EndpointDefinition = {\n    path: '/mf1/receipts/{receipt_uuid}/details',\n    method: 'GET',\n    operationId: 'get_receipt_details_mf1_receipts__receipt_uuid__details_get',\n    summary: 'Get Receipt Details',\n    description: 'Get the details or the PDF of an electronic receipt',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        receipt_uuid: 'string'\n      },\n      header: {\n        Accept: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'get_details',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly RETURN_ITEMS: EndpointDefinition = {\n    path: '/mf1/receipts/return',\n    method: 'POST',\n    operationId: 'return_receipt_items_mf1_receipts_return_post',\n    summary: 'Return Receipt Items',\n    description: 'Return items from an electronic receipt (same PEM or other PEM)',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_ReturnRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'return_items',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly RETURN_ITEMS_WITH_PROOF: EndpointDefinition = {\n    path: '/mf1/receipts/return-with-proof',\n    method: 'POST',\n    operationId: 'return_receipt_items_via_proof_mf1_receipts_return_with_proof_post',\n    summary: 'Return Receipt Items Via Proof',\n    description: 'Return items from an electronic receipt identified by a proof of purchase',\n    tags: ['Receipt'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_ReturnWithProofRequest'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ReceiptOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'receipts',\n      operation: 'return_items_with_proof',\n      authRequired: true,\n      retryable: false\n    }\n  };\n}\n\n/**\n * Cash Register Endpoints - Cash register management\n */\nexport class CashRegisterEndpoints {\n  static readonly CREATE: EndpointDefinition = {\n    path: '/mf1/cash-register',\n    method: 'POST',\n    operationId: 'create_cash_register_mf1_cash_register_post',\n    summary: 'Create Cash Register',\n    description: 'Create a new cash register',\n    tags: ['Cash Register'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'E-Receipt_IT_API_CashRegisterInput'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashRegisterOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'cash-registers',\n      operation: 'create',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly LIST: EndpointDefinition = {\n    path: '/mf1/cash-register',\n    method: 'GET',\n    operationId: 'get_cash_registers_mf1_cash_register_get',\n    summary: 'Get Cash Registers',\n    description: 'Get a list of cash registers',\n    tags: ['Cash Register'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_Page__T_Customized_CashRegisterOutput_'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'cash-registers',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly GET_BY_ID: EndpointDefinition = {\n    path: '/mf1/cash-register/{id}',\n    method: 'GET',\n    operationId: 'get_cash_register_mf1_cash_register__id__get',\n    summary: 'Get Cash Register',\n    description: 'Get a specific cash register by ID',\n    tags: ['Cash Register'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        id: 'integer'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_CashRegisterOutput'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'cash-registers',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n}\n\n/**\n * Merchant Endpoints - Business entity management\n */\nexport class MerchantEndpoints {\n  static readonly LIST: EndpointDefinition = {\n    path: '/merchants',\n    method: 'GET',\n    operationId: 'api_merchants_get_collection',\n    summary: 'Get Merchants',\n    description: 'Get a list of merchants',\n    tags: ['Merchant'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      }\n    },\n    metadata: {\n      resource: 'merchants',\n      operation: 'list',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly CREATE: EndpointDefinition = {\n    path: '/merchants',\n    method: 'POST',\n    operationId: 'api_merchants_post',\n    summary: 'Create Merchant',\n    description: 'Create a new merchant',\n    tags: ['Merchant'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'Merchant-create'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'Merchant-read'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'merchants',\n      operation: 'create',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly GET_BY_UUID: EndpointDefinition = {\n    path: '/merchants/{uuid}',\n    method: 'GET',\n    operationId: 'api_merchants_uuid_get',\n    summary: 'Get Merchant',\n    description: 'Get a specific merchant by UUID',\n    tags: ['Merchant'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        uuid: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'Merchant-read'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'merchants',\n      operation: 'get',\n      authRequired: true,\n      retryable: true\n    }\n  };\n\n  static readonly UPDATE: EndpointDefinition = {\n    path: '/merchants/{uuid}',\n    method: 'PUT',\n    operationId: 'api_merchants_uuid_put',\n    summary: 'Update Merchant',\n    description: 'Update a merchant',\n    tags: ['Merchant'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        uuid: 'string'\n      }\n    },\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'Merchant-update'\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'Merchant-read'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'merchants',\n      operation: 'update',\n      authRequired: true,\n      retryable: false\n    }\n  };\n}\n\n/**\n * PEM Endpoints - Point of Sale Module certificate management\n */\nexport class PEMEndpoints {\n  static readonly CREATE_POS: EndpointDefinition = {\n    path: '/point-of-sales',\n    method: 'POST',\n    operationId: 'api_point-of-sales_post',\n    summary: 'Create Point of Sale',\n    description: 'Create a new Point of Sale',\n    tags: ['Pem'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    requestBody: {\n      required: true,\n      contentType: 'application/json',\n      schema: 'PointOfSale-create'\n    },\n    responses: {\n      '201': {\n        description: 'Successful Response',\n        contentType: 'application/json',\n        schema: 'PointOfSale-read'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '422': {\n        description: 'Validation Error',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_HTTPValidationError'\n      }\n    },\n    metadata: {\n      resource: 'pems',\n      operation: 'create_pos',\n      authRequired: true,\n      retryable: false\n    }\n  };\n\n  static readonly GET_CERTIFICATES: EndpointDefinition = {\n    path: '/point-of-sales/{id}/certificates',\n    method: 'GET',\n    operationId: 'api_point-of-sales_idcertificates_get',\n    summary: 'Get PEM Certificates',\n    description: 'Get certificates for a Point of Sale',\n    tags: ['Pem'],\n    security: [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }],\n    parameters: {\n      path: {\n        id: 'string'\n      }\n    },\n    responses: {\n      '200': {\n        description: 'Successful Response',\n        contentType: 'application/json'\n      },\n      '403': {\n        description: 'Forbidden',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel403Forbidden'\n      },\n      '404': {\n        description: 'Not Found',\n        contentType: 'application/json',\n        schema: 'E-Receipt_IT_API_ErrorModel404NotFound'\n      }\n    },\n    metadata: {\n      resource: 'pems',\n      operation: 'get_certificates',\n      authRequired: true,\n      retryable: true\n    }\n  };\n}\n\n/**\n * Utility class for endpoint operations\n */\nexport class EndpointUtils {\n  /**\n   * Get all endpoints for a specific resource\n   */\n  static getResourceEndpoints(resource: string): EndpointDefinition[] {\n    switch (resource.toLowerCase()) {\n      case 'cashiers':\n        return Object.values(CashierEndpoints);\n      case 'point-of-sales':\n        return Object.values(PointOfSalesEndpoints);\n      case 'receipts':\n        return Object.values(ReceiptEndpoints);\n      case 'cash-registers':\n        return Object.values(CashRegisterEndpoints);\n      case 'merchants':\n        return Object.values(MerchantEndpoints);\n      case 'pems':\n        return Object.values(PEMEndpoints);\n      default:\n        return [];\n    }\n  }\n\n  /**\n   * Find endpoint by operation ID\n   */\n  static findEndpointByOperationId(operationId: string): EndpointDefinition | null {\n    const allClasses = [\n      CashierEndpoints,\n      PointOfSalesEndpoints,\n      ReceiptEndpoints,\n      CashRegisterEndpoints,\n      MerchantEndpoints,\n      PEMEndpoints,\n    ];\n\n    for (const endpointClass of allClasses) {\n      for (const endpoint of Object.values(endpointClass)) {\n        if (endpoint.operationId === operationId) {\n          return endpoint;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Build URL with path parameters\n   */\n  static buildUrl(endpoint: EndpointDefinition, pathParams: Record<string, string | number> = {}): string {\n    let url = endpoint.path;\n    \n    for (const [key, value] of Object.entries(pathParams)) {\n      url = url.replace(`{${key}}`, String(value));\n    }\n    \n    return url;\n  }\n\n  /**\n   * Check if endpoint requires authentication\n   */\n  static requiresAuth(endpoint: EndpointDefinition): boolean {\n    return endpoint.metadata?.authRequired ?? false;\n  }\n\n  /**\n   * Check if endpoint operation is retryable\n   */\n  static isRetryable(endpoint: EndpointDefinition): boolean {\n    return endpoint.metadata?.retryable ?? false;\n  }\n\n  /**\n   * Get expected content type for request body\n   */\n  static getRequestContentType(endpoint: EndpointDefinition): string | null {\n    return endpoint.requestBody?.contentType ?? null;\n  }\n\n  /**\n   * Get expected response content type\n   */\n  static getResponseContentType(endpoint: EndpointDefinition, statusCode: string): string | null {\n    return endpoint.responses[statusCode]?.contentType ?? null;\n  }\n}","/**\n * Enterprise-grade error handling system\n * Hierarchical error types with retry logic and audit information\n */\n\n// Base error class with audit information\nexport abstract class ACubeSDKError extends Error {\n  public readonly timestamp: Date;\n  public readonly requestId: string;\n  public readonly operation: string;\n  public readonly retryable: boolean;\n  public readonly statusCode?: number;\n  public readonly auditInfo?: AuditInfo;\n  public readonly cause?: Error;\n\n  constructor(\n    message: string,\n    public readonly code: string,\n    options: {\n      operation: string;\n      retryable?: boolean;\n      statusCode?: number;\n      requestId?: string;\n      auditInfo?: AuditInfo;\n      cause?: Error;\n    }\n  ) {\n    super(message);\n    if (options.cause) {\n      this.cause = options.cause;\n    }\n    this.name = this.constructor.name;\n    this.timestamp = new Date();\n    this.requestId = options.requestId ?? generateRequestId();\n    this.operation = options.operation;\n    this.retryable = options.retryable ?? false;\n    if (options.statusCode !== undefined) {\n      this.statusCode = options.statusCode;\n    }\n    if (options.auditInfo !== undefined) {\n      this.auditInfo = options.auditInfo;\n    }\n\n    // Ensure proper prototype chain\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  toJSON(): Record<string, unknown> {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      operation: this.operation,\n      retryable: this.retryable,\n      statusCode: this.statusCode,\n      timestamp: this.timestamp.toISOString(),\n      requestId: this.requestId,\n      auditInfo: this.auditInfo,\n      stack: this.stack,\n    };\n  }\n}\n\n// Audit information for compliance\nexport interface AuditInfo {\n  userId?: string;\n  role?: 'provider' | 'merchant' | 'cashier';\n  fiscalId?: string;\n  receiptId?: string;\n  pemId?: string;\n  ipAddress?: string;\n  userAgent?: string;\n}\n\n// Network-related errors (usually retryable)\nexport class NetworkError extends ACubeSDKError {\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      statusCode?: number;\n      requestId?: string;\n      retryable?: boolean;\n      cause?: Error;\n    } = {}\n  ) {\n    super(message, 'NETWORK_ERROR', {\n      operation,\n      retryable: options.retryable ?? true,\n      ...(options.statusCode !== undefined && { statusCode: options.statusCode }),\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.cause !== undefined && { cause: options.cause }),\n    });\n  }\n}\n\n// Authentication/Authorization errors (not retryable)\nexport class AuthenticationError extends ACubeSDKError {\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      statusCode?: number;\n      requestId?: string;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(message, 'AUTHENTICATION_ERROR', {\n      operation,\n      retryable: false,\n      statusCode: options.statusCode ?? 401,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n    });\n  }\n}\n\n// Authorization errors (not retryable)\nexport class AuthorizationError extends ACubeSDKError {\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      statusCode?: number;\n      requestId?: string;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(message, 'AUTHORIZATION_ERROR', {\n      operation,\n      retryable: false,\n      statusCode: options.statusCode ?? 403,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n    });\n  }\n}\n\n// Validation errors (not retryable)\nexport class ValidationError extends ACubeSDKError {\n  public readonly violations: ValidationViolation[];\n\n  constructor(\n    message: string,\n    operation: string,\n    violations: ValidationViolation[],\n    options: {\n      requestId?: string;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(message, 'VALIDATION_ERROR', {\n      operation,\n      retryable: false,\n      statusCode: 422,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n    });\n    this.violations = violations;\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      violations: this.violations,\n    };\n  }\n}\n\nexport interface ValidationViolation {\n  field: string;\n  message: string;\n  code: string;\n  value?: unknown;\n}\n\n// Fiscal/compliance specific errors (usually not retryable)\nexport class FiscalError extends ACubeSDKError {\n  public readonly fiscalCode?: string;\n  public readonly documentNumber?: string;\n\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      fiscalCode?: string;\n      documentNumber?: string;\n      statusCode?: number;\n      requestId?: string;\n      retryable?: boolean;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(message, 'FISCAL_ERROR', {\n      operation,\n      retryable: options.retryable ?? false,\n      statusCode: options.statusCode ?? 400,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n      ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n    });\n    if (options.fiscalCode !== undefined) {\n      this.fiscalCode = options.fiscalCode;\n    }\n    if (options.documentNumber !== undefined) {\n      this.documentNumber = options.documentNumber;\n    }\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      fiscalCode: this.fiscalCode,\n      documentNumber: this.documentNumber,\n    };\n  }\n}\n\n// Rate limiting errors (retryable)\nexport class RateLimitError extends ACubeSDKError {\n  public readonly retryAfter?: number;\n\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      retryAfter?: number;\n      requestId?: string;\n    } = {}\n  ) {\n    super(message, 'RATE_LIMIT_ERROR', {\n      operation,\n      retryable: true,\n      statusCode: 429,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n    });\n    if (options.retryAfter !== undefined) {\n      this.retryAfter = options.retryAfter;\n    }\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      retryAfter: this.retryAfter,\n    };\n  }\n}\n\n// Configuration errors (not retryable)\nexport class ConfigurationError extends ACubeSDKError {\n  constructor(\n    message: string,\n    operation: string,\n    options: {\n      requestId?: string;\n    } = {}\n  ) {\n    super(message, 'CONFIGURATION_ERROR', {\n      operation,\n      retryable: false,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n    });\n  }\n}\n\n// Resource not found errors (not retryable)\nexport class NotFoundError extends ACubeSDKError {\n  public readonly resourceType: string;\n  public readonly resourceId: string;\n\n  constructor(\n    resourceType: string,\n    resourceId: string,\n    operation: string,\n    options: {\n      requestId?: string;\n      auditInfo?: AuditInfo;\n    } = {}\n  ) {\n    super(\n      `${resourceType} with id ${resourceId} not found`,\n      'NOT_FOUND_ERROR',\n      {\n        operation,\n        retryable: false,\n        statusCode: 404,\n        ...(options.requestId !== undefined && { requestId: options.requestId }),\n        ...(options.auditInfo !== undefined && { auditInfo: options.auditInfo }),\n      }\n    );\n    this.resourceType = resourceType;\n    this.resourceId = resourceId;\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      resourceType: this.resourceType,\n      resourceId: this.resourceId,\n    };\n  }\n}\n\n// Circuit breaker errors (retryable)\nexport class CircuitBreakerError extends ACubeSDKError {\n  public readonly state: 'OPEN' | 'HALF_OPEN';\n\n  constructor(\n    message: string,\n    operation: string,\n    state: 'OPEN' | 'HALF_OPEN',\n    options: {\n      requestId?: string;\n    } = {}\n  ) {\n    super(message, 'CIRCUIT_BREAKER_ERROR', {\n      operation,\n      retryable: true,\n      ...(options.requestId !== undefined && { requestId: options.requestId }),\n    });\n    this.state = state;\n  }\n\n  override toJSON(): Record<string, unknown> {\n    return {\n      ...super.toJSON(),\n      state: this.state,\n    };\n  }\n}\n\n// Utility functions\nfunction generateRequestId(): string {\n  return `req_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;\n}\n\n// Error factory for creating errors from HTTP responses\nexport function createErrorFromResponse(\n  response: {\n    status: number;\n    statusText: string;\n    data?: unknown;\n  },\n  operation: string,\n  requestId?: string\n): ACubeSDKError {\n  const message = getErrorMessage(response.data) || response.statusText;\n\n  switch (response.status) {\n    case 401:\n      return new AuthenticationError(message, operation, {\n        statusCode: response.status,\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 403:\n      return new AuthorizationError(message, operation, {\n        statusCode: response.status,\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 404:\n      // Try to extract resource info from error data\n      const resourceType = extractResourceType(response.data);\n      const resourceId = extractResourceId(response.data);\n      if (resourceType && resourceId) {\n        return new NotFoundError(resourceType, resourceId, operation, {\n          ...(requestId !== undefined && { requestId }),\n        });\n      }\n      // Create a concrete NotFoundError for generic 404s\n      return new NotFoundError('Resource', 'unknown', operation, {\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 422:\n      const violations = extractValidationViolations(response.data);\n      return new ValidationError(message, operation, violations, {\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 429:\n      const retryAfter = extractRetryAfter(response.data);\n      return new RateLimitError(message, operation, {\n        ...(retryAfter !== undefined && { retryAfter }),\n        ...(requestId !== undefined && { requestId }),\n      });\n    case 500:\n    case 502:\n    case 503:\n    case 504:\n      return new NetworkError(message, operation, {\n        statusCode: response.status,\n        ...(requestId !== undefined && { requestId }),\n        retryable: true,\n      });\n    default:\n      return new NetworkError(message, operation, {\n        statusCode: response.status,\n        ...(requestId !== undefined && { requestId }),\n        retryable: response.status >= 500,\n      });\n  }\n}\n\n// Helper functions for extracting error details\nfunction getErrorMessage(data: unknown): string | null {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    return (obj.message as string) || (obj.detail as string) || null;\n  }\n  return null;\n}\n\nfunction extractResourceType(data: unknown): string | null {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    return obj.resourceType as string || null;\n  }\n  return null;\n}\n\nfunction extractResourceId(data: unknown): string | null {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    return obj.resourceId as string || null;\n  }\n  return null;\n}\n\nfunction extractValidationViolations(data: unknown): ValidationViolation[] {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    if (Array.isArray(obj.violations)) {\n      return obj.violations.map((v: any) => ({\n        field: v.propertyPath || v.field || 'unknown',\n        message: v.message || 'Validation failed',\n        code: v.code || 'VALIDATION_FAILED',\n        value: v.value,\n      }));\n    }\n    if (Array.isArray(obj.detail)) {\n      return obj.detail.map((v: any) => ({\n        field: v.loc?.join('.') || 'unknown',\n        message: v.msg || 'Validation failed',\n        code: v.type || 'VALIDATION_FAILED',\n        value: v.input,\n      }));\n    }\n  }\n  return [];\n}\n\nfunction extractRetryAfter(data: unknown): number | undefined {\n  if (typeof data === 'object' && data !== null) {\n    const obj = data as Record<string, unknown>;\n    const retryAfter = obj.retryAfter || obj.retry_after;\n    return typeof retryAfter === 'number' ? retryAfter : undefined;\n  }\n  return undefined;\n}","/**\n * Base OpenAPI Resource Class\n * Enterprise-grade foundation for all API resources with full type safety\n * \n * Features:\n * - Type-safe request execution based on OpenAPI specification\n * - Automatic parameter binding (path, query, body)\n * - Schema validation and error handling\n * - Audit trail and metadata tracking\n * - Integration with existing HTTP client and middleware\n */\n\nimport type { HttpClient, RequestOptions as HttpRequestOptions } from '@/http/client';\nimport type { EndpointDefinition, HttpMethod } from '@/generated/endpoints';\nimport { EndpointUtils } from '@/generated/endpoints';\nimport { ValidationError, type ACubeSDKError } from '@/errors/index';\n\nexport interface BaseResourceConfig {\n  client: HttpClient;\n  endpoints: Record<string, EndpointDefinition>;\n}\n\nexport interface RequestOptions {\n  pathParams?: Record<string, string | number>;\n  queryParams?: Record<string, unknown>;\n  headers?: Record<string, string>;\n  metadata?: Record<string, unknown>;\n  skipRetry?: boolean;\n  skipCircuitBreaker?: boolean;\n  timeout?: number;\n}\n\nexport interface ValidationContext {\n  endpoint: EndpointDefinition;\n  operation: string;\n  data?: unknown;\n  pathParams?: Record<string, string | number>;\n  queryParams?: Record<string, unknown>;\n}\n\n/**\n * Abstract base class for all OpenAPI-based resources\n * Provides type-safe operations with comprehensive error handling and validation\n */\nexport abstract class BaseOpenAPIResource {\n  protected readonly client: HttpClient;\n  protected readonly endpoints: Record<string, EndpointDefinition>;\n\n  constructor(config: BaseResourceConfig) {\n    this.client = config.client;\n    this.endpoints = config.endpoints;\n  }\n\n  /**\n   * Execute a type-safe API request based on OpenAPI endpoint definition\n   * \n   * @template TRequest - Type of request data\n   * @template TResponse - Type of response data\n   * @param endpointKey - Key to identify the endpoint in the endpoints map\n   * @param data - Request body data (for POST/PUT/PATCH requests)\n   * @param options - Additional request options\n   * @returns Promise resolving to typed response data\n   */\n  protected async executeRequest<TRequest = unknown, TResponse = unknown>(\n    endpointKey: string,\n    data?: TRequest,\n    options: RequestOptions = {}\n  ): Promise<TResponse> {\n    const endpoint = this.endpoints[endpointKey];\n    if (!endpoint) {\n      throw new ValidationError(\n        `Unknown endpoint: ${endpointKey}`,\n        'execute_request',\n        [{ field: 'endpointKey', message: `Endpoint '${endpointKey}' not found`, code: 'UNKNOWN_ENDPOINT' }]\n      );\n    }\n\n    // Validate the request before execution\n    this.validateRequest({ endpoint, operation: endpointKey, data, ...options });\n\n    // Build the complete URL with path parameters\n    const url = this.buildRequestUrl(endpoint, options.pathParams);\n\n    // Prepare request options for HTTP client\n    const httpOptions: HttpRequestOptions = {\n      method: endpoint.method,\n      url,\n      data,\n      headers: {\n        ...this.getDefaultHeaders(endpoint),\n        ...options.headers,\n      },\n      metadata: {\n        operationId: endpoint.operationId,\n        resource: endpoint.metadata?.resource,\n        operation: endpoint.metadata?.operation,\n        ...options.metadata,\n      },\n      skipRetry: options.skipRetry ?? !EndpointUtils.isRetryable(endpoint),\n    };\n\n    // Add optional properties only if they have values\n    if (options.queryParams) {\n      httpOptions.params = options.queryParams;\n    }\n    if (options.timeout) {\n      httpOptions.timeout = options.timeout;\n    }\n    if (options.skipCircuitBreaker !== undefined) {\n      httpOptions.skipCircuitBreaker = options.skipCircuitBreaker;\n    }\n\n    try {\n      // Execute the HTTP request through the client\n      const response = await this.client.request<TResponse>(httpOptions);\n      \n      // Validate response if needed\n      this.validateResponse(endpoint, response.data);\n      \n      return response.data;\n    } catch (error) {\n      // Enhanced error handling with OpenAPI context\n      throw this.enhanceError(error as ACubeSDKError, endpoint, endpointKey, options);\n    }\n  }\n\n  /**\n   * Build complete request URL with path parameter substitution\n   */\n  private buildRequestUrl(endpoint: EndpointDefinition, pathParams: Record<string, string | number> = {}): string {\n    return EndpointUtils.buildUrl(endpoint, pathParams);\n  }\n\n  /**\n   * Get default headers based on endpoint requirements\n   */\n  private getDefaultHeaders(endpoint: EndpointDefinition): Record<string, string> {\n    const headers: Record<string, string> = {};\n\n    // Set content type for requests with body\n    if (endpoint.requestBody) {\n      headers['Content-Type'] = endpoint.requestBody.contentType;\n    }\n\n    // Set default accept header\n    const successResponse = endpoint.responses['200'] || endpoint.responses['201'];\n    if (successResponse?.contentType) {\n      headers['Accept'] = successResponse.contentType;\n    }\n\n    return headers;\n  }\n\n  /**\n   * Validate request data against OpenAPI specification\n   */\n  private validateRequest(context: ValidationContext): void {\n    const { endpoint, operation, data, pathParams, queryParams } = context;\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    // Validate required path parameters\n    if (endpoint.parameters?.path) {\n      for (const [paramName, paramType] of Object.entries(endpoint.parameters.path)) {\n        if (!pathParams || !(paramName in pathParams)) {\n          errors.push({\n            field: `path.${paramName}`,\n            message: `Required path parameter '${paramName}' is missing`,\n            code: 'MISSING_PATH_PARAM',\n          });\n        } else {\n          // Type validation for path parameters\n          const value = pathParams[paramName];\n          if (!this.validateParameterType(value, paramType)) {\n            errors.push({\n              field: `path.${paramName}`,\n              message: `Path parameter '${paramName}' must be of type ${paramType}`,\n              code: 'INVALID_PATH_PARAM_TYPE',\n            });\n          }\n        }\n      }\n    }\n\n    // Validate required request body\n    if (endpoint.requestBody?.required && !data) {\n      errors.push({\n        field: 'body',\n        message: 'Request body is required',\n        code: 'MISSING_BODY',\n      });\n    }\n\n    // Validate query parameters (basic type checking)\n    if (endpoint.parameters?.query && queryParams) {\n      for (const [paramName, paramType] of Object.entries(endpoint.parameters.query)) {\n        const value = queryParams[paramName];\n        if (value !== undefined && !this.validateParameterType(value, paramType)) {\n          errors.push({\n            field: `query.${paramName}`,\n            message: `Query parameter '${paramName}' must be of type ${paramType}`,\n            code: 'INVALID_QUERY_PARAM_TYPE',\n          });\n        }\n      }\n    }\n\n    if (errors.length > 0) {\n      throw new ValidationError(\n        `Request validation failed for operation '${operation}'`,\n        operation,\n        errors\n      );\n    }\n  }\n\n  /**\n   * Basic type validation for parameters\n   */\n  private validateParameterType(value: unknown, expectedType: string): boolean {\n    switch (expectedType) {\n      case 'string':\n        return typeof value === 'string';\n      case 'integer':\n      case 'number':\n        return typeof value === 'number' || (typeof value === 'string' && !isNaN(Number(value)));\n      case 'boolean':\n        return typeof value === 'boolean';\n      default:\n        return true; // Allow unknown types for now\n    }\n  }\n\n  /**\n   * Validate response data (can be extended for schema validation)\n   */\n  private validateResponse(endpoint: EndpointDefinition, data: unknown): void {\n    // Basic response validation - can be enhanced with JSON schema validation\n    if (data === null || data === undefined) {\n      // Check if null response is expected\n      const hasNullableResponse = Object.keys(endpoint.responses).some(code => \n        code === '204' || endpoint.responses[code]?.description?.toLowerCase().includes('no content')\n      );\n      \n      if (!hasNullableResponse) {\n        console.warn(`Received null/undefined response for ${endpoint.operationId}`);\n      }\n    }\n  }\n\n  /**\n   * Enhance errors with OpenAPI-specific context\n   */\n  private enhanceError(\n    error: ACubeSDKError,\n    endpoint: EndpointDefinition,\n    operation: string,\n    _options: RequestOptions\n  ): ACubeSDKError {\n    // Create enhanced error with additional context\n    const enhancedError = new (error.constructor as new (...args: any[]) => ACubeSDKError)(\n      error.message,\n      error.code,\n      {\n        operation: error.operation || endpoint.operationId,\n        retryable: error.retryable !== undefined ? error.retryable : EndpointUtils.isRetryable(endpoint),\n        statusCode: error.statusCode,\n        requestId: error.requestId,\n        auditInfo: {\n          ...error.auditInfo,\n          // Add OpenAPI-specific audit information\n          pemId: endpoint.metadata?.resource === 'point-of-sales' ? String(_options.pathParams?.serial_number || '') : error.auditInfo?.pemId,\n        },\n        cause: error.cause,\n      }\n    );\n\n    // Add a custom property for OpenAPI metadata (non-enumerable to avoid serialization issues)\n    Object.defineProperty(enhancedError, 'openapiMetadata', {\n      value: {\n        resource: endpoint.metadata?.resource,\n        endpointOperation: operation,\n        httpMethod: endpoint.method,\n        path: endpoint.path,\n      },\n      writable: false,\n      enumerable: false,\n      configurable: false,\n    });\n\n    return enhancedError;\n  }\n\n  /**\n   * Utility method to check if an operation is available\n   */\n  protected hasOperation(operationKey: string): boolean {\n    return operationKey in this.endpoints;\n  }\n\n  /**\n   * Get endpoint definition for an operation\n   */\n  protected getEndpoint(operationKey: string): EndpointDefinition | null {\n    return this.endpoints[operationKey] || null;\n  }\n\n  /**\n   * Get all available operations for this resource\n   */\n  protected getAvailableOperations(): string[] {\n    return Object.keys(this.endpoints);\n  }\n\n  /**\n   * Create a standardized error for missing operations\n   */\n  protected createUnsupportedOperationError(operation: string): ValidationError {\n    return new ValidationError(\n      `Operation '${operation}' is not supported by this resource`,\n      'unsupported_operation',\n      [{ \n        field: 'operation', \n        message: `Available operations: ${this.getAvailableOperations().join(', ')}`, \n        code: 'UNSUPPORTED_OPERATION' \n      }]\n    );\n  }\n\n  // Static utility methods for common patterns\n\n  /**\n   * Format validation errors for user-friendly display\n   */\n  static formatValidationErrors(errors: Array<{ field: string; message: string; code: string }>): string {\n    return errors.map(error => `${error.field}: ${error.message}`).join(', ');\n  }\n\n  /**\n   * Extract error details from API response\n   */\n  static extractErrorDetails(error: unknown): { message: string; details?: unknown } {\n    if (error instanceof ValidationError) {\n      return {\n        message: error.message,\n        details: error.violations,\n      };\n    }\n\n    if (error instanceof Error) {\n      return { message: error.message };\n    }\n\n    return { message: 'Unknown error occurred' };\n  }\n\n  /**\n   * Check if error indicates a temporary failure\n   */\n  static isTemporaryError(error: ACubeSDKError): boolean {\n    // Network errors are usually temporary\n    if (error.name === 'NetworkError') {\n      return true;\n    }\n\n    // Some HTTP status codes indicate temporary issues\n    if (error.statusCode) {\n      return [429, 500, 502, 503, 504].includes(error.statusCode);\n    }\n\n    return error.retryable ?? false;\n  }\n\n  /**\n   * Get retry delay for temporary errors\n   */\n  static getRetryDelay(_error: ACubeSDKError, attempt: number): number {\n    // Exponential backoff with jitter\n    const baseDelay = 1000; // 1 second\n    const maxDelay = 30000; // 30 seconds\n    \n    let delay = Math.min(baseDelay * Math.pow(2, attempt - 1), maxDelay);\n    \n    // Add jitter (±25%)\n    const jitter = delay * 0.25;\n    delay += (Math.random() * 2 - 1) * jitter;\n    \n    return Math.floor(delay);\n  }\n}\n\n/**\n * Type-safe endpoint builder for dynamic endpoint creation\n */\nexport class EndpointBuilder {\n  private definition: Partial<EndpointDefinition> = {};\n\n  constructor(path: string, method: HttpMethod) {\n    this.definition = {\n      path,\n      method,\n      tags: [],\n      responses: {},\n    };\n  }\n\n  operationId(id: string): this {\n    this.definition.operationId = id;\n    return this;\n  }\n\n  summary(text: string): this {\n    this.definition.summary = text;\n    return this;\n  }\n\n  description(text: string): this {\n    this.definition.description = text;\n    return this;\n  }\n\n  tag(name: string): this {\n    this.definition.tags = [...(this.definition.tags || []), name];\n    return this;\n  }\n\n  requireAuth(): this {\n    this.definition.security = [{ 'E-Receipt_IT_API_OAuth2PasswordBearer': [] }];\n    return this;\n  }\n\n  pathParam(name: string, type: string): this {\n    if (!this.definition.parameters) {\n      this.definition.parameters = {};\n    }\n    if (!this.definition.parameters.path) {\n      this.definition.parameters.path = {};\n    }\n    this.definition.parameters.path[name] = type;\n    return this;\n  }\n\n  queryParam(name: string, type: string): this {\n    if (!this.definition.parameters) {\n      this.definition.parameters = {};\n    }\n    if (!this.definition.parameters.query) {\n      this.definition.parameters.query = {};\n    }\n    this.definition.parameters.query[name] = type;\n    return this;\n  }\n\n  requestBody(schema: string, required = true): this {\n    this.definition.requestBody = {\n      required,\n      contentType: 'application/json',\n      schema,\n    };\n    return this;\n  }\n\n  response(statusCode: string, description: string, schema?: string): this {\n    if (!this.definition.responses) {\n      this.definition.responses = {};\n    }\n    this.definition.responses[statusCode] = {\n      description,\n      ...(schema && { contentType: 'application/json', schema }),\n    };\n    return this;\n  }\n\n  metadata(resource: string, operation: string, authRequired = true, retryable = true): this {\n    this.definition.metadata = {\n      resource,\n      operation,\n      authRequired,\n      retryable,\n    };\n    return this;\n  }\n\n  build(): EndpointDefinition {\n    if (!this.definition.operationId) {\n      throw new Error('operationId is required');\n    }\n\n    return this.definition as EndpointDefinition;\n  }\n}","/**\n * Receipts Resource - OpenAPI Implementation\n * Type-safe implementation for electronic receipt management\n * \n * Features:\n * - Complete electronic receipt lifecycle management\n * - Type-safe input/output with branded types\n * - Advanced validation for Italian fiscal requirements\n * - Receipt item calculations and VAT handling\n * - PDF generation and details retrieval\n * - Return and void operations\n */\n\nimport { BaseOpenAPIResource } from '@/resources/base-openapi';\nimport { ReceiptEndpoints } from '@/generated/endpoints';\nimport type { HttpClient } from '@/http/client';\nimport type { ReceiptId, Amount } from '@/types/branded';\nimport type { components } from '@/types/generated';\nimport { ValidationError } from '@/errors/index';\n\n// Extract types from OpenAPI generated types\ntype ReceiptInput = components['schemas']['E-Receipt_IT_API_ReceiptInput'];\ntype ReceiptOutput = components['schemas']['E-Receipt_IT_API_ReceiptOutput'];\ntype ReceiptPage = components['schemas']['E-Receipt_IT_API_Page__T_Customized_ReceiptOutput_'];\ntype VoidReceiptRequest = components['schemas']['E-Receipt_IT_API_ReceiptReturnOrVoidViaPEMInput'];\ntype VoidReceiptOutput = ReceiptOutput; // Returns standard receipt output\ntype VoidReceiptWithProofRequest = components['schemas']['E-Receipt_IT_API_ReceiptReturnOrVoidWithProofInput'];\ntype ReturnRequest = components['schemas']['E-Receipt_IT_API_ReceiptReturnOrVoidViaPEMInput'];\ntype ReturnWithProofRequest = components['schemas']['E-Receipt_IT_API_ReceiptReturnOrVoidWithProofInput'];\n\nexport interface ReceiptListParams {\n  page?: number | undefined;\n  size?: number | undefined;\n  start_date?: string | undefined;\n  end_date?: string | undefined;\n  serial_number?: string | undefined;\n}\n\nexport interface ReceiptValidationOptions {\n  validateVATRates?: boolean;\n  checkTotalCalculations?: boolean;\n  enforceItalianFiscalRules?: boolean;\n  maxReceiptItems?: number;\n}\n\nexport interface ReceiptCalculationResult {\n  subtotal: Amount;\n  vatAmount: Amount;\n  totalAmount: Amount;\n  discountAmount: Amount;\n  itemCount: number;\n  breakdown: {\n    vatRate: string;\n    netAmount: Amount;\n    vatAmount: Amount;\n    grossAmount: Amount;\n  }[];\n}\n\nexport type ReceiptItemType = 'good' | 'service' | 'mixed';\nexport type PaymentMethod = 'cash' | 'electronic' | 'ticket_restaurant' | 'mixed';\n\n/**\n * Receipts Resource Class - OpenAPI Based\n * Manages electronic receipts with full Italian fiscal compliance\n */\nexport class ReceiptsResource extends BaseOpenAPIResource {\n  constructor(client: HttpClient) {\n    super({\n      client,\n      endpoints: {\n        list: ReceiptEndpoints.LIST,\n        create: ReceiptEndpoints.CREATE,\n        void: ReceiptEndpoints.VOID,\n        getByUuid: ReceiptEndpoints.GET_BY_UUID,\n        voidWithProof: ReceiptEndpoints.VOID_WITH_PROOF,\n        getDetails: ReceiptEndpoints.GET_DETAILS,\n        returnItems: ReceiptEndpoints.RETURN_ITEMS,\n        returnItemsWithProof: ReceiptEndpoints.RETURN_ITEMS_WITH_PROOF,\n      }\n    });\n  }\n\n  /**\n   * Get a list of receipts with filtering and pagination\n   * \n   * @param params - List parameters including filters and pagination\n   * @returns Promise resolving to paginated receipt list\n   */\n  async list(params?: ReceiptListParams): Promise<ReceiptPage> {\n    return this.executeRequest<void, ReceiptPage>('list', undefined, {\n      ...(params && { queryParams: params as Record<string, unknown> }),\n      metadata: {\n        operation: 'list_receipts',\n        dateRange: params?.start_date && params?.end_date ? `${params.start_date} to ${params.end_date}` : undefined,\n      }\n    });\n  }\n\n  /**\n   * Create a new electronic receipt\n   * \n   * @param data - Receipt input data with items and payment information\n   * @param options - Validation options for fiscal compliance\n   * @returns Promise resolving to created receipt\n   */\n  async create(\n    data: ReceiptInput, \n    options: ReceiptValidationOptions = {}\n  ): Promise<ReceiptOutput> {\n    // Validate input with Italian fiscal rules\n    await this.validateReceiptInput(data, options);\n\n    return this.executeRequest<ReceiptInput, ReceiptOutput>('create', data, {\n      metadata: {\n        operation: 'create_receipt',\n        itemCount: data.items.length,\n        totalAmount: this.calculateTotalAmount(data).totalAmount,\n      }\n    });\n  }\n\n  /**\n   * Void an electronic receipt\n   * \n   * @param voidData - Void request data\n   * @returns Promise resolving to void confirmation\n   */\n  async void(voidData: VoidReceiptRequest): Promise<VoidReceiptOutput> {\n    return this.executeRequest<VoidReceiptRequest, VoidReceiptOutput>('void', voidData, {\n      metadata: {\n        operation: 'void_receipt',\n      }\n    });\n  }\n\n  /**\n   * Get a specific receipt by UUID\n   * \n   * @param receiptId - Receipt UUID\n   * @returns Promise resolving to receipt details\n   */\n  async retrieve(receiptId: ReceiptId | string): Promise<ReceiptOutput> {\n    return this.executeRequest<void, ReceiptOutput>('getByUuid', undefined, {\n      pathParams: { receipt_uuid: receiptId },\n      metadata: {\n        operation: 'get_receipt',\n        receiptId,\n      }\n    });\n  }\n\n  /**\n   * Void a receipt using proof of purchase\n   * \n   * @param voidData - Void request with proof data\n   * @returns Promise resolving to void confirmation\n   */\n  async voidWithProof(voidData: VoidReceiptWithProofRequest): Promise<VoidReceiptOutput> {\n    return this.executeRequest<VoidReceiptWithProofRequest, VoidReceiptOutput>('voidWithProof', voidData, {\n      metadata: {\n        operation: 'void_receipt_with_proof',\n      }\n    });\n  }\n\n  /**\n   * Get receipt details or PDF\n   * \n   * @param receiptId - Receipt UUID\n   * @param format - Response format ('json' or 'pdf')\n   * @returns Promise resolving to receipt details or PDF blob\n   */\n  async getDetails(receiptId: ReceiptId | string, format: 'json' | 'pdf' = 'json'): Promise<components['schemas']['E-Receipt_IT_API_ReceiptDetailsOutput'] | Blob> {\n    const acceptHeader = format === 'pdf' ? 'application/pdf' : 'application/json';\n    \n    return this.executeRequest<void, components['schemas']['E-Receipt_IT_API_ReceiptDetailsOutput'] | Blob>('getDetails', undefined, {\n      pathParams: { receipt_uuid: receiptId },\n      headers: { Accept: acceptHeader },\n      metadata: {\n        operation: 'get_receipt_details',\n        receiptId,\n        format,\n      }\n    });\n  }\n\n  /**\n   * Return items from a receipt\n   * \n   * @param returnData - Return request data\n   * @returns Promise resolving to return receipt\n   */\n  async returnItems(returnData: ReturnRequest): Promise<ReceiptOutput> {\n    return this.executeRequest<ReturnRequest, ReceiptOutput>('returnItems', returnData, {\n      metadata: {\n        operation: 'return_receipt_items',\n      }\n    });\n  }\n\n  /**\n   * Return items from a receipt using proof of purchase\n   * \n   * @param returnData - Return request with proof data\n   * @returns Promise resolving to return receipt\n   */\n  async returnItemsWithProof(returnData: ReturnWithProofRequest): Promise<ReceiptOutput> {\n    return this.executeRequest<ReturnWithProofRequest, ReceiptOutput>('returnItemsWithProof', returnData, {\n      metadata: {\n        operation: 'return_receipt_items_with_proof',\n      }\n    });\n  }\n\n  // Validation methods\n\n  /**\n   * Comprehensive receipt input validation\n   */\n  private async validateReceiptInput(\n    data: ReceiptInput, \n    options: ReceiptValidationOptions = {}\n  ): Promise<void> {\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    // Basic validation\n    if (!data.items || data.items.length === 0) {\n      errors.push({\n        field: 'items',\n        message: 'Receipt must contain at least one item',\n        code: 'NO_ITEMS'\n      });\n    }\n\n    // Item count validation\n    if (options.maxReceiptItems && data.items.length > options.maxReceiptItems) {\n      errors.push({\n        field: 'items',\n        message: `Receipt cannot contain more than ${options.maxReceiptItems} items`,\n        code: 'TOO_MANY_ITEMS'\n      });\n    }\n\n    // Validate each item\n    for (let i = 0; i < data.items.length; i++) {\n      const item = data.items[i];\n      if (!item) continue;\n      const itemErrors = this.validateReceiptItem(item, i, options);\n      errors.push(...itemErrors);\n    }\n\n    // Payment validation\n    const paymentErrors = this.validatePaymentAmounts(data);\n    errors.push(...paymentErrors);\n\n    // Total calculation validation\n    if (options.checkTotalCalculations) {\n      const calculationErrors = this.validateCalculations(data);\n      errors.push(...calculationErrors);\n    }\n\n    // Italian fiscal rules validation\n    if (options.enforceItalianFiscalRules) {\n      const fiscalErrors = this.validateItalianFiscalRules(data);\n      errors.push(...fiscalErrors);\n    }\n\n    if (errors.length > 0) {\n      throw new ValidationError('Invalid receipt input', 'create_receipt', errors);\n    }\n  }\n\n  /**\n   * Validate individual receipt item\n   */\n  private validateReceiptItem(\n    item: components['schemas']['E-Receipt_IT_API_ReceiptItem'], \n    index: number, \n    options: ReceiptValidationOptions\n  ): Array<{ field: string; message: string; code: string }> {\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n    const prefix = `items[${index}]`;\n\n    // Required fields\n    if (!item.description || item.description.trim().length === 0) {\n      errors.push({\n        field: `${prefix}.description`,\n        message: 'Item description is required',\n        code: 'REQUIRED'\n      });\n    }\n\n    if (!item.quantity || parseFloat(item.quantity) <= 0) {\n      errors.push({\n        field: `${prefix}.quantity`,\n        message: 'Item quantity must be greater than 0',\n        code: 'INVALID_QUANTITY'\n      });\n    }\n\n    if (!item.unit_price || parseFloat(item.unit_price) < 0) {\n      errors.push({\n        field: `${prefix}.unit_price`,\n        message: 'Item unit price cannot be negative',\n        code: 'INVALID_PRICE'\n      });\n    }\n\n    // VAT rate validation\n    if (options.validateVATRates && item.vat_rate_code) {\n      const validVATRates = ['0', '4', '5', '10', '22']; // Italian VAT rates\n      if (!validVATRates.includes(item.vat_rate_code)) {\n        errors.push({\n          field: `${prefix}.vat_rate_code`,\n          message: `Invalid VAT rate. Valid rates: ${validVATRates.join(', ')}`,\n          code: 'INVALID_VAT_RATE'\n        });\n      }\n    }\n\n    // Description length validation\n    if (item.description && item.description.length > 200) {\n      errors.push({\n        field: `${prefix}.description`,\n        message: 'Item description cannot exceed 200 characters',\n        code: 'DESCRIPTION_TOO_LONG'\n      });\n    }\n\n    return errors;\n  }\n\n  /**\n   * Validate payment amounts\n   */\n  private validatePaymentAmounts(data: ReceiptInput): Array<{ field: string; message: string; code: string }> {\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    const cashAmount = parseFloat(data.cash_payment_amount || '0');\n    const electronicAmount = parseFloat(data.electronic_payment_amount || '0');\n    const ticketAmount = parseFloat(data.ticket_restaurant_payment_amount || '0');\n\n    // At least one payment method must be used\n    if (cashAmount <= 0 && electronicAmount <= 0 && ticketAmount <= 0) {\n      errors.push({\n        field: 'payment',\n        message: 'At least one payment method must have a positive amount',\n        code: 'NO_PAYMENT'\n      });\n    }\n\n    // Negative amounts validation\n    if (cashAmount < 0) {\n      errors.push({\n        field: 'cash_payment_amount',\n        message: 'Cash payment amount cannot be negative',\n        code: 'NEGATIVE_AMOUNT'\n      });\n    }\n\n    if (electronicAmount < 0) {\n      errors.push({\n        field: 'electronic_payment_amount',\n        message: 'Electronic payment amount cannot be negative',\n        code: 'NEGATIVE_AMOUNT'\n      });\n    }\n\n    if (ticketAmount < 0) {\n      errors.push({\n        field: 'ticket_restaurant_payment_amount',\n        message: 'Ticket restaurant payment amount cannot be negative',\n        code: 'NEGATIVE_AMOUNT'\n      });\n    }\n\n    return errors;\n  }\n\n  /**\n   * Validate calculation accuracy\n   */\n  private validateCalculations(data: ReceiptInput): Array<{ field: string; message: string; code: string }> {\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    try {\n      const calculated = this.calculateTotalAmount(data);\n      const totalPayments = parseFloat(data.cash_payment_amount || '0') + \n                           parseFloat(data.electronic_payment_amount || '0') + \n                           parseFloat(data.ticket_restaurant_payment_amount || '0');\n\n      // Check if total payments match calculated total (with small tolerance for rounding)\n      const tolerance = 0.01;\n      if (Math.abs(totalPayments - parseFloat(calculated.totalAmount)) > tolerance) {\n        errors.push({\n          field: 'payment_total',\n          message: `Payment total (${totalPayments.toFixed(2)}) does not match calculated total (${calculated.totalAmount})`,\n          code: 'PAYMENT_MISMATCH'\n        });\n      }\n    } catch (error) {\n      errors.push({\n        field: 'calculation',\n        message: 'Failed to validate receipt calculations',\n        code: 'CALCULATION_ERROR'\n      });\n    }\n\n    return errors;\n  }\n\n  /**\n   * Validate Italian fiscal compliance rules\n   */\n  private validateItalianFiscalRules(data: ReceiptInput): Array<{ field: string; message: string; code: string }> {\n    const errors: Array<{ field: string; message: string; code: string }> = [];\n\n    // Check for fiscal compliance requirements\n    const totalAmount = parseFloat(this.calculateTotalAmount(data).totalAmount);\n\n    // High-value transaction reporting (example threshold)\n    if (totalAmount > 3000) {\n      const cashAmount = parseFloat(data.cash_payment_amount || '0');\n      if (cashAmount > 1000) {\n        errors.push({\n          field: 'cash_payment_amount',\n          message: 'Cash payments over €1000 require additional documentation for transactions above €3000',\n          code: 'HIGH_VALUE_CASH_LIMIT'\n        });\n      }\n    }\n\n    // Validate lottery code if provided (simplified check)\n    if (data.customer_lottery_code && !/^[A-Z0-9]{16}$/.test(data.customer_lottery_code)) {\n      errors.push({\n        field: 'customer_lottery_code',\n        message: 'Lottery code must be 16 alphanumeric characters',\n        code: 'INVALID_LOTTERY_CODE'\n      });\n    }\n\n    return errors;\n  }\n\n  // Calculation methods\n\n  /**\n   * Calculate total receipt amount with VAT breakdown\n   */\n  public calculateTotalAmount(data: ReceiptInput): ReceiptCalculationResult {\n    let subtotal = 0;\n    let totalVAT = 0;\n    let totalDiscount = parseFloat(data.discount || '0');\n    \n    const vatBreakdown = new Map<string, { net: number; vat: number; gross: number }>();\n\n    // Calculate item totals\n    for (const item of data.items) {\n      const quantity = parseFloat(item.quantity);\n      const unitPrice = parseFloat(item.unit_price);\n      const itemDiscount = parseFloat(item.discount || '0');\n      const vatRate = parseFloat(item.vat_rate_code || '0') / 100;\n\n      // Calculate item total before VAT\n      const itemNetTotal = (quantity * unitPrice) - itemDiscount;\n      const itemVAT = itemNetTotal * vatRate;\n      const itemGrossTotal = itemNetTotal + itemVAT;\n\n      subtotal += itemNetTotal;\n      totalVAT += itemVAT;\n\n      // Track VAT breakdown\n      const vatKey = item.vat_rate_code || '0';\n      if (!vatBreakdown.has(vatKey)) {\n        vatBreakdown.set(vatKey, { net: 0, vat: 0, gross: 0 });\n      }\n      const breakdown = vatBreakdown.get(vatKey)!;\n      breakdown.net += itemNetTotal;\n      breakdown.vat += itemVAT;\n      breakdown.gross += itemGrossTotal;\n    }\n\n    // Apply global discount\n    const finalSubtotal = subtotal - totalDiscount;\n    const finalTotal = finalSubtotal + totalVAT;\n\n    return {\n      subtotal: finalSubtotal.toFixed(2) as Amount,\n      vatAmount: totalVAT.toFixed(2) as Amount,\n      totalAmount: finalTotal.toFixed(2) as Amount,\n      discountAmount: (totalDiscount + data.items.reduce((sum, item) => sum + parseFloat(item.discount || '0'), 0)).toFixed(2) as Amount,\n      itemCount: data.items.length,\n      breakdown: Array.from(vatBreakdown.entries()).map(([vatRate, amounts]) => ({\n        vatRate,\n        netAmount: amounts.net.toFixed(2) as Amount,\n        vatAmount: amounts.vat.toFixed(2) as Amount,\n        grossAmount: amounts.gross.toFixed(2) as Amount,\n      })),\n    };\n  }\n\n  // Static utility methods\n\n  /**\n   * Format receipt for display\n   */\n  static formatReceiptForDisplay(receipt: ReceiptOutput): {\n    receiptNumber: string;\n    date: string;\n    time: string;\n    formattedTotal: string;\n    paymentMethod: PaymentMethod;\n    itemSummary: string;\n  } {\n    const date = new Date(receipt.created_at);\n    \n    return {\n      receiptNumber: receipt.uuid.split('-')[0]?.toUpperCase() || 'UNKNOWN',\n      date: date.toLocaleDateString('it-IT'),\n      time: date.toLocaleTimeString('it-IT'),\n      formattedTotal: `€ ${receipt.total_amount}`,\n      paymentMethod: this.determinePaymentMethod(receipt),\n      itemSummary: `0 items`, // items field not available in OpenAPI schema\n    };\n  }\n\n  /**\n   * Determine primary payment method\n   */\n  private static determinePaymentMethod(_receipt: ReceiptOutput): PaymentMethod {\n    // Note: payment amount fields not available in OpenAPI schema\n    // Using default payment method\n    return 'cash'; // Default\n  }\n\n  /**\n   * Generate receipt summary for reports\n   */\n  static generateReceiptSummary(receipts: ReceiptOutput[]): {\n    totalCount: number;\n    totalAmount: Amount;\n    vatAmount: Amount;\n    averageAmount: Amount;\n    paymentMethodBreakdown: Record<PaymentMethod, { count: number; amount: Amount }>;\n    dateRange: { from: string; to: string };\n  } {\n    const summary = {\n      totalCount: receipts.length,\n      totalAmount: '0.00' as Amount,\n      vatAmount: '0.00' as Amount,\n      averageAmount: '0.00' as Amount,\n      paymentMethodBreakdown: {\n        cash: { count: 0, amount: '0.00' as Amount },\n        electronic: { count: 0, amount: '0.00' as Amount },\n        ticket_restaurant: { count: 0, amount: '0.00' as Amount },\n        mixed: { count: 0, amount: '0.00' as Amount },\n      } as Record<PaymentMethod, { count: number; amount: Amount }>,\n      dateRange: { from: '', to: '' },\n    };\n\n    if (receipts.length === 0) return summary;\n\n    let totalAmount = 0;\n    let totalVAT = 0;\n    const dates = receipts.map(r => new Date(r.created_at)).sort((a, b) => a.getTime() - b.getTime());\n\n    for (const receipt of receipts) {\n      const amount = parseFloat(receipt.total_amount);\n      totalAmount += amount;\n      \n      // Estimate VAT (simplified calculation)\n      totalVAT += amount * 0.15; // Rough estimate\n\n      const paymentMethod = this.determinePaymentMethod(receipt);\n      summary.paymentMethodBreakdown[paymentMethod].count++;\n      summary.paymentMethodBreakdown[paymentMethod].amount = \n        (parseFloat(summary.paymentMethodBreakdown[paymentMethod].amount) + amount).toFixed(2) as Amount;\n    }\n\n    summary.totalAmount = totalAmount.toFixed(2) as Amount;\n    summary.vatAmount = totalVAT.toFixed(2) as Amount;\n    summary.averageAmount = (totalAmount / receipts.length).toFixed(2) as Amount;\n    summary.dateRange.from = dates[0]?.toISOString().split('T')[0] || '';\n    summary.dateRange.to = dates[dates.length - 1]?.toISOString().split('T')[0] || '';\n\n    return summary;\n  }\n\n  /**\n   * Validate receipt return eligibility\n   */\n  static validateReturnEligibility(receipt: ReceiptOutput, returnDate: Date = new Date()): {\n    eligible: boolean;\n    reason?: string;\n    daysRemaining?: number;\n  } {\n    const receiptDate = new Date(receipt.created_at);\n    const daysSinceReceipt = Math.floor((returnDate.getTime() - receiptDate.getTime()) / (1000 * 60 * 60 * 24));\n    const returnPeriodDays = 30; // Example return period\n\n    if (daysSinceReceipt > returnPeriodDays) {\n      return {\n        eligible: false,\n        reason: `Return period expired. Returns allowed within ${returnPeriodDays} days.`,\n      };\n    }\n\n    if (receipt.document_number && receipt.document_number.includes('VOID')) {\n      return {\n        eligible: false,\n        reason: 'Receipt has already been voided',\n      };\n    }\n\n    return {\n      eligible: true,\n      daysRemaining: returnPeriodDays - daysSinceReceipt,\n    };\n  }\n\n  /**\n   * Generate fiscal code for lottery participation\n   */\n  static generateLotteryCode(): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for (let i = 0; i < 16; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n}\n\n// Re-export for convenience\nexport { ReceiptsResource as Receipts };\n\n// Export types for external use\nexport type {\n  ReceiptInput,\n  ReceiptOutput,\n  ReceiptPage,\n  VoidReceiptRequest,\n  VoidReceiptOutput,\n  ReturnRequest,\n};"]}